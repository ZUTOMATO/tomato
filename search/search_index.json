{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":""},{"location":"#_1","title":"\u5173\u4e8e\u6b64\u7f51\u7ad9","text":"<p>\u8fd9\u91cc\u662fZUTOMATO\u7684\u4e2a\u4eba\u4e3b\u9875</p>"},{"location":"#_2","title":"\u4e3a\u4ec0\u4e48\u8981\u5efa","text":"<p>\u4e4b\u524d\u4e0a\u8bfe\u7684\u7b14\u8bb0\u57fa\u672c\u90fd\u662f\u7eb8\u8d28\u7248\u7684\uff0c\u4f46\u4e0d\u592a\u597d\u4fdd\u5b58\u548c\u5206\u4eab\uff08\u5176\u5b9e\u662f\u81ea\u5df1\u6ca1\u597d\u597d\u653e\uff09\uff0c\u52a0\u4e0a\u53ef\u80fd\u540e\u7eed\u5b66\u7684\u8ba1\u7b97\u673a\u7c7b\u8bfe\u7a0b \u4e5f\u4f1a\u6bd4\u8f83\u591a\uff0c\u6240\u4ee5\u60f3\u505a\u4e00\u4e9b\u7535\u5b50\u7248\u7684\u7b14\u8bb0\uff0c\u6bd4\u8f83\u65b9\u4fbf\u4e5f\u6bd4\u8f83\u597d\u5206\u4eab\u7ed9\u5176\u4ed6\u4eba\u3002\u6b64\u5916\u4e5f\u53ef\u4ee5\u5f53\u6210\u5206\u4eab\u65e5\u5e38\u7684\u5730\u70b9\u3002</p>"},{"location":"#_3","title":"\u6211\u4f1a\u5728\u8fd9\u91cc\u653e\u4ec0\u4e48","text":"<p>\u6211\u4f1a\u4e0d\u5b9a\u671f\u5728\u8fd9\u91cc\u653e\u4e00\u4e9b\u8bfe\u7a0b\u603b\u7ed3\u3001\u8bfe\u7a0b\u7b14\u8bb0\u3001\u97f3\u4e50\u611f\u60f3\u4ee5\u53ca\u7f16\u66f2\u6df7\u97f3\u7b14\u8bb0\u3001\u4f5c\u66f2\u7f16\u66f2\u4f5c\u54c1\uff08\u5982\u679c\u81ea\u6211\u611f\u89c9\u8fd8\u884c\u7684\u8bdd\uff09\uff0c\u8fd8\u6709\u53ef\u80fd\u653e\u4e00\u70b9\u65e5\u5e38\u611f\u60f3\u3002</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"md/PY1/","title":"chap 1-4","text":"In\u00a0[30]: Copied! <pre>name = \"ada lovelace\"\n</pre> name = \"ada lovelace\" <p>\u9996\u5b57\u6bcd\u5927\u5199\uff1a</p> In\u00a0[31]: Copied! <pre>print(name.title())\n</pre> print(name.title()) <pre>Ada Lovelace\n</pre> <p>\u5168\u5927\u5199/\u5c0f\u5199\uff1a</p> In\u00a0[32]: Copied! <pre>print(name.upper())\n\nprint(name.lower())\n</pre> print(name.upper())  print(name.lower()) <pre>ADA LOVELACE\nada lovelace\n</pre> In\u00a0[33]: Copied! <pre>first_name = \"ada\"\nlast_name = \"lovelace\"\n</pre> first_name = \"ada\" last_name = \"lovelace\" <p>\u5408\u5e76\u5b57\u7b26\u4e32\uff1a</p> In\u00a0[34]: Copied! <pre>full_name = first_name + \" \" + last_name\nprint(full_name.title())\n</pre> full_name = first_name + \" \" + last_name print(full_name.title()) <pre>Ada Lovelace\n</pre> <p>\u5236\u8868\u7b26\u4e0e\u6362\u884c\u7b26\uff1a</p> In\u00a0[35]: Copied! <pre>print(\"Python\")\n\nprint(\"\\tPython\")\n\nprint(\"Languages:\\nPython\\nC\\nJavaScript\")\n\nprint(\"Languages:\\n\\tPython\\n\\tC\\n\\tJavaScript\")\n</pre> print(\"Python\")  print(\"\\tPython\")  print(\"Languages:\\nPython\\nC\\nJavaScript\")  print(\"Languages:\\n\\tPython\\n\\tC\\n\\tJavaScript\") <pre>Python\n\tPython\nLanguages:\nPython\nC\nJavaScript\nLanguages:\n\tPython\n\tC\n\tJavaScript\n</pre> <p>\u5220\u9664\u7a7a\u767d:</p> In\u00a0[36]: Copied! <pre>favorite_language = \" python \"\n\nfavorite_language\n\nfavorite_language.rstrip() # \u5220\u9664\u53f3\u4fa7\u7a7a\u767d\n\nfavorite_language.lstrip()# \u5220\u9664\u5de6\u4fa7\u7a7a\u767d\n\nfavorite_language.strip() # \u5220\u9664\u4e24\u4fa7\u7a7a\u767d\n</pre> favorite_language = \" python \"  favorite_language  favorite_language.rstrip() # \u5220\u9664\u53f3\u4fa7\u7a7a\u767d  favorite_language.lstrip()# \u5220\u9664\u5de6\u4fa7\u7a7a\u767d  favorite_language.strip() # \u5220\u9664\u4e24\u4fa7\u7a7a\u767d Out[36]: <pre>'python'</pre> <p>str()</p> In\u00a0[37]: Copied! <pre>age = 23\n\nmessage = \"Happy \" + str(age) + \"rd Birthday!\"\n\nprint(message)\n</pre> age = 23  message = \"Happy \" + str(age) + \"rd Birthday!\"  print(message) <pre>Happy 23rd Birthday!\n</pre> In\u00a0[38]: Copied! <pre>bicycles = ['trek', 'cannondale', 'redline', 'specialized']\n\nprint(bicycles)\n\nprint(bicycles[0])\n</pre> bicycles = ['trek', 'cannondale', 'redline', 'specialized']  print(bicycles)  print(bicycles[0]) <pre>['trek', 'cannondale', 'redline', 'specialized']\ntrek\n</pre> <p>\u4fee\u6539\u3001\u6dfb\u52a0\u3001\u5220\u9664\u5217\u8868\u4e2d\u7684\u5143\u7d20</p> In\u00a0[39]: Copied! <pre>motorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n\nmotorcycles[0] = 'ducati' # \u4fee\u6539\u5217\u8868\u5143\u7d20\nprint(motorcycles)\n\nmotorcycles.append('ducati') # \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\nprint(motorcycles)\n\nmotorcycles.insert(0, 'ducati') # \u5728\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u5143\u7d20\nprint(motorcycles)\n\ndel motorcycles[0] # \u5220\u9664\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20\nprint(motorcycles)\n\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n\npopped_motorcycle = motorcycles.pop() # \u5f39\u51fa\u5217\u8868\u672b\u5c3e\u5143\u7d20\nprint(motorcycles)\nprint(popped_motorcycle)\n\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n\nfirst_owned = motorcycles.pop(0) # \u5f39\u51fa\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20\nprint(f\"The first motorcycle I owned was a {first_owned.title()}.\")\n\nmotorcycles = ['honda', 'yamaha', 'suzuki', 'ducati']\nprint(motorcycles)\nmotorcycles.remove('ducati') # \u5220\u9664\u5217\u8868\u6307\u5b9a\u503c\u5143\u7d20\nprint(motorcycles)\n\nmotorcycles = ['honda', 'yamaha', 'suzuki']\nprint(motorcycles)\n\ntoo_expensive = 'suzuki'\nmotorcycles.remove(too_expensive)\nprint(motorcycles)\nprint(f\"\\nA {too_expensive.title()} is too expensive for me.\")\n</pre> motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles)  motorcycles[0] = 'ducati' # \u4fee\u6539\u5217\u8868\u5143\u7d20 print(motorcycles)  motorcycles.append('ducati') # \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20 print(motorcycles)  motorcycles.insert(0, 'ducati') # \u5728\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u5143\u7d20 print(motorcycles)  del motorcycles[0] # \u5220\u9664\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20 print(motorcycles)  motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles)  popped_motorcycle = motorcycles.pop() # \u5f39\u51fa\u5217\u8868\u672b\u5c3e\u5143\u7d20 print(motorcycles) print(popped_motorcycle)  motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles)  first_owned = motorcycles.pop(0) # \u5f39\u51fa\u5217\u8868\u6307\u5b9a\u4f4d\u7f6e\u5143\u7d20 print(f\"The first motorcycle I owned was a {first_owned.title()}.\")  motorcycles = ['honda', 'yamaha', 'suzuki', 'ducati'] print(motorcycles) motorcycles.remove('ducati') # \u5220\u9664\u5217\u8868\u6307\u5b9a\u503c\u5143\u7d20 print(motorcycles)  motorcycles = ['honda', 'yamaha', 'suzuki'] print(motorcycles)  too_expensive = 'suzuki' motorcycles.remove(too_expensive) print(motorcycles) print(f\"\\nA {too_expensive.title()} is too expensive for me.\") <pre>['honda', 'yamaha', 'suzuki']\n['ducati', 'yamaha', 'suzuki']\n['ducati', 'yamaha', 'suzuki', 'ducati']\n['ducati', 'ducati', 'yamaha', 'suzuki', 'ducati']\n['ducati', 'yamaha', 'suzuki', 'ducati']\n['honda', 'yamaha', 'suzuki']\n['honda', 'yamaha']\nsuzuki\n['honda', 'yamaha', 'suzuki']\nThe first motorcycle I owned was a Honda.\n['honda', 'yamaha', 'suzuki', 'ducati']\n['honda', 'yamaha', 'suzuki']\n['honda', 'yamaha', 'suzuki']\n['honda', 'yamaha']\n\nA Suzuki is too expensive for me.\n</pre> <p>sort()\uff1a\u6c38\u4e45\u6027\u6392\u5e8f</p> In\u00a0[40]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\ncars.sort()  # \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u5217\u8868\nprint(cars)\n\ncars.sort(reverse=True)  # \u6309\u5b57\u6bcd\u9006\u5e8f\u6392\u5217\u5217\u8868\nprint(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] cars.sort()  # \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u5217\u8868 print(cars)  cars.sort(reverse=True)  # \u6309\u5b57\u6bcd\u9006\u5e8f\u6392\u5217\u5217\u8868 print(cars) <pre>['audi', 'bmw', 'subaru', 'toyota']\n['toyota', 'subaru', 'bmw', 'audi']\n</pre> <p>sorted()\uff1a\u4e34\u65f6\u6392\u5e8f</p> In\u00a0[41]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\nprint(sorted(cars))  # \u4e34\u65f6\u6392\u5e8f\nprint(cars)  # \u539f\u5217\u8868\u672a\u6539\u53d8\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] print(sorted(cars))  # \u4e34\u65f6\u6392\u5e8f print(cars)  # \u539f\u5217\u8868\u672a\u6539\u53d8 <pre>['audi', 'bmw', 'subaru', 'toyota']\n['bmw', 'audi', 'toyota', 'subaru']\n</pre> <p>\u5012\u7740\u6253\u5370\u5217\u8868(\u6c38\u4e45\u6027)</p> In\u00a0[42]: Copied! <pre>cars = ['bmw', 'audi', 'toyota', 'subaru']\ncars.reverse()  # \u5012\u7740\u6253\u5370\u5217\u8868\nprint(cars)\n</pre> cars = ['bmw', 'audi', 'toyota', 'subaru'] cars.reverse()  # \u5012\u7740\u6253\u5370\u5217\u8868 print(cars) <pre>['subaru', 'toyota', 'audi', 'bmw']\n</pre> <p>\u5217\u8868\u957f\u5ea6</p> In\u00a0[43]: Copied! <pre>len(cars)\n</pre> len(cars) Out[43]: <pre>4</pre> <p>\u904d\u5386\u6574\u4e2a\u5217\u8868\uff1a</p> In\u00a0[44]: Copied! <pre>magicians = ['alice', 'david', 'carolina']\nfor magician in magicians:\n\tprint(magician)\n</pre> magicians = ['alice', 'david', 'carolina'] for magician in magicians: \tprint(magician) <pre>alice\ndavid\ncarolina\n</pre> <p>\u521b\u5efa\u6570\u5b57\u5217\u8868\uff1arange()\uff1a</p> In\u00a0[45]: Copied! <pre>for value in range(1,5):\n\tprint(value)\n</pre> for value in range(1,5): \tprint(value) <pre>1\n2\n3\n4\n</pre> In\u00a0[46]: Copied! <pre>numbers = list(range(1,6)) # \u521b\u5efa\u6570\u5b57\u5217\u8868\uff0c\u4ece1\u52305\nprint(numbers)\n</pre> numbers = list(range(1,6)) # \u521b\u5efa\u6570\u5b57\u5217\u8868\uff0c\u4ece1\u52305 print(numbers) <pre>[1, 2, 3, 4, 5]\n</pre> In\u00a0[47]: Copied! <pre>even_numbers = list(range(2,11,2)) # \u521b\u5efa\u5076\u6570\u5217\u8868\uff0c\u6307\u5b9a\u6b65\u957f\nprint(even_numbers)\n</pre> even_numbers = list(range(2,11,2)) # \u521b\u5efa\u5076\u6570\u5217\u8868\uff0c\u6307\u5b9a\u6b65\u957f print(even_numbers) <pre>[2, 4, 6, 8, 10]\n</pre> In\u00a0[48]: Copied! <pre>squares = []\nfor value in range(1,11): \n\tsquare = value**2\n\tsquares.append(square)\nprint(squares)\n\n#\u6216\uff1a\nsquares = [value**2 for value in range(1,11)]\nprint(squares)\n</pre> squares = [] for value in range(1,11):  \tsquare = value**2 \tsquares.append(square) print(squares)  #\u6216\uff1a squares = [value**2 for value in range(1,11)] print(squares) <pre>[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n</pre> In\u00a0[49]: Copied! <pre># \u91ca\u653e\u4e4b\u524d\u7684\u53d8\u91cf\u5185\u5b58\ndel age, bicycles, cars, favorite_language, first_name, first_owned, full_name, last_name\ndel message, motorcycles, name, numbers, popped_motorcycle, square, squares, too_expensive, value\n</pre> # \u91ca\u653e\u4e4b\u524d\u7684\u53d8\u91cf\u5185\u5b58 del age, bicycles, cars, favorite_language, first_name, first_owned, full_name, last_name del message, motorcycles, name, numbers, popped_motorcycle, square, squares, too_expensive, value In\u00a0[50]: Copied! <pre>digits = [1,2,3,4,5,6,7,8,9,0]\nprint(min(digits)) # \u6700\u5c0f\u503c\nprint(max(digits)) # \u6700\u5927\u503c\nprint(sum(digits)) # \u603b\u548c\n</pre> digits = [1,2,3,4,5,6,7,8,9,0] print(min(digits)) # \u6700\u5c0f\u503c print(max(digits)) # \u6700\u5927\u503c print(sum(digits)) # \u603b\u548c <pre>0\n9\n45\n</pre> <p>\u5207\u7247\uff1a</p> In\u00a0[51]: Copied! <pre>players = ['charles', 'martina', 'michael', 'florence', 'eli']\nprint(players[0:3])  # \u6253\u5370\u524d\u4e09\u540d\u9009\u624b\nprint(players[1:4])  # \u6253\u5370\u7b2c\u4e8c\u5230\u7b2c\u56db\u540d\u9009\u624b\nprint(players[-3:])   # \u6253\u5370\u6700\u540e\u4e09\u540d\u9009\u624b\nprint(players[:3])  # \u6253\u5370\u524d\u4e09\u540d\u9009\u624b\nprint(players[2:])  # \u6253\u5370\u7b2c\u4e09\u540d\u53ca\u4e4b\u540e\u7684\u9009\u624b\n</pre> players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[0:3])  # \u6253\u5370\u524d\u4e09\u540d\u9009\u624b print(players[1:4])  # \u6253\u5370\u7b2c\u4e8c\u5230\u7b2c\u56db\u540d\u9009\u624b print(players[-3:])   # \u6253\u5370\u6700\u540e\u4e09\u540d\u9009\u624b print(players[:3])  # \u6253\u5370\u524d\u4e09\u540d\u9009\u624b print(players[2:])  # \u6253\u5370\u7b2c\u4e09\u540d\u53ca\u4e4b\u540e\u7684\u9009\u624b <pre>['charles', 'martina', 'michael']\n['martina', 'michael', 'florence']\n['michael', 'florence', 'eli']\n['charles', 'martina', 'michael']\n['michael', 'florence', 'eli']\n</pre> <p>\u904d\u5386\u5207\u7247</p> In\u00a0[52]: Copied! <pre>for player in players[:3]:\n\tprint(player.title())\n</pre> for player in players[:3]: \tprint(player.title()) <pre>Charles\nMartina\nMichael\n</pre> <p>\u590d\u5236\u5217\u8868\uff1a</p> In\u00a0[57]: Copied! <pre>my_foods = ['pizza', 'carrot cake', 'falafel']\nfriend_foods = my_foods[:]\nprint(\"My favorite foods are:\")\nprint(my_foods)\nprint(\"\\nMy friend's favorite foods are:\")\nprint(friend_foods)\n</pre> my_foods = ['pizza', 'carrot cake', 'falafel'] friend_foods = my_foods[:] print(\"My favorite foods are:\") print(my_foods) print(\"\\nMy friend's favorite foods are:\") print(friend_foods) <pre>My favorite foods are:\n['pizza', 'carrot cake', 'falafel']\n\nMy friend's favorite foods are:\n['pizza', 'carrot cake', 'falafel']\n</pre> <p>\u53e6\uff1a\u6309\u957f\u5ea6\u6392\u5e8f</p> In\u00a0[58]: Copied! <pre>my_foods.sort(key=len)\nprint(my_foods)\n</pre> my_foods.sort(key=len) print(my_foods) <pre>['pizza', 'falafel', 'carrot cake']\n</pre> <p>\u53e6\uff1a\u4e8c\u5206\u641c\u7d22\u548c\u5df2\u6392\u5e8f\u5217\u8868\u7684\u7ef4\u62a4</p> In\u00a0[60]: Copied! <pre>import bisect\n\nc = [1, 2, 2, 2, 3, 4, 7]\nprint(bisect.bisect(c,2))\nprint(bisect.bisect(c,6))\nbisect.insort(c,6)\nprint(c)\n</pre> import bisect  c = [1, 2, 2, 2, 3, 4, 7] print(bisect.bisect(c,2)) print(bisect.bisect(c,6)) bisect.insort(c,6) print(c) <pre>4\n6\n[1, 2, 2, 2, 3, 4, 6, 7]\n</pre> In\u00a0[\u00a0]: Copied! <pre>dimension = (200,50)\nprint(dimension[0])  # \u6253\u5370\u5143\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\nprint(dimension[1])  # \u6253\u5370\u5143\u7ec4\u7b2c\u4e8c\u4e2a\u5143\u7d20\nprint(dimension)\n# \u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e0d\u80fd\u4fee\u6539\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u53ea\u80fd\u91cd\u65b0\u5b9a\u4e49\u6574\u4e2a\u5143\u7ec4\n# dimension[0] = 250  # \u8fd9\u884c\u4ee3\u7801\u4f1a\u62a5\u9519\n# \u5143\u7ec4\u540c\u6837\u53ef\u4ee5\u7528for\u5faa\u73af\u904d\u5386\nfor dim in dimension:\n\tprint(dim)\n</pre> dimension = (200,50) print(dimension[0])  # \u6253\u5370\u5143\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20 print(dimension[1])  # \u6253\u5370\u5143\u7ec4\u7b2c\u4e8c\u4e2a\u5143\u7d20 print(dimension) # \u5143\u7ec4\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e0d\u80fd\u4fee\u6539\u5143\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u53ea\u80fd\u91cd\u65b0\u5b9a\u4e49\u6574\u4e2a\u5143\u7ec4 # dimension[0] = 250  # \u8fd9\u884c\u4ee3\u7801\u4f1a\u62a5\u9519 # \u5143\u7ec4\u540c\u6837\u53ef\u4ee5\u7528for\u5faa\u73af\u904d\u5386 for dim in dimension: \tprint(dim) <pre>200\n50\n(200, 50)\n200\n50\n</pre>"},{"location":"md/PY1/#chap-1-2","title":"chap 1-2 \u53d8\u91cf\u4e0e\u7b80\u5355\u6570\u636e\u7c7b\u578b\u00b6","text":""},{"location":"md/PY1/#chap-3","title":"chap 3 \u5217\u8868\u00b6","text":""},{"location":"md/PY1/#chap-4","title":"chap 4 \u64cd\u4f5c\u5217\u8868\u00b6","text":""},{"location":"md/PY1/#for","title":"for\u5faa\u73af\uff1a\u00b6","text":"<ul> <li>\u6ce8\u610f\u7f29\u8fdb</li> <li>\u6ce8\u610f\u5192\u53f7</li> </ul>"},{"location":"md/PY1/","title":"\u5bf9\u6570\u5b57\u5217\u8868\u505a\u7edf\u8ba1\u8ba1\u7b97\uff1a\u00b6","text":""},{"location":"md/PY1/","title":"\u4f7f\u7528\u5217\u8868\u7684\u4e00\u90e8\u5206\u00b6","text":""},{"location":"md/PY1/","title":"\u5143\u7ec4\u00b6","text":""},{"location":"md/PY2/","title":"chap 5-8","text":"In\u00a0[1]: Copied! <pre>cars = [\"audi\", \"bmw\", \"subaru\", \"toyota\"]\n\nfor car in cars:\n\tif car == \"bmw\":\n\t\tprint(car.upper())\n\telse:\n\t\tprint(car.title())\n</pre> cars = [\"audi\", \"bmw\", \"subaru\", \"toyota\"]  for car in cars: \tif car == \"bmw\": \t\tprint(car.upper()) \telse: \t\tprint(car.title()) <pre>Audi\nBMW\nSubaru\nToyota\n</pre> <p>and/or\uff1a</p> In\u00a0[2]: Copied! <pre>age_0 = 22\nage_1 = 18\nprint(age_0 &gt;= 21 and age_1 &gt;= 21)\nprint(age_0 &gt;= 21 or age_1 &gt;= 21)\n</pre> age_0 = 22 age_1 = 18 print(age_0 &gt;= 21 and age_1 &gt;= 21) print(age_0 &gt;= 21 or age_1 &gt;= 21) <pre>False\nTrue\n</pre> <p>\u68c0\u67e5\u7279\u5b9a\u503c\u662f\u5426\u4e0d\u5305\u542b\u5728\u5217\u8868\u4e2d\uff1a</p> In\u00a0[3]: Copied! <pre>banned_users = ['andrew', 'carolina', 'david']\nuser = 'marie'\n\nif user not in banned_users:\n\tprint(user.title() + \", you can post a response if you wish.\")\n</pre> banned_users = ['andrew', 'carolina', 'david'] user = 'marie'  if user not in banned_users: \tprint(user.title() + \", you can post a response if you wish.\") <pre>Marie, you can post a response if you wish.\n</pre> <p>if-else\u8bed\u53e5\uff1a</p> In\u00a0[4]: Copied! <pre>age = 17\nif age &gt;= 18:\n\tprint(\"You are old enough to vote!\")\n\tprint(\"Have you registered to vote yet?\")\nelse:\n\tprint(\"Sorry, you are too young to vote.\")\n\tprint(\"Please register to vote as soon as you turn 18!\")\n</pre> age = 17 if age &gt;= 18: \tprint(\"You are old enough to vote!\") \tprint(\"Have you registered to vote yet?\") else: \tprint(\"Sorry, you are too young to vote.\") \tprint(\"Please register to vote as soon as you turn 18!\") <pre>Sorry, you are too young to vote.\nPlease register to vote as soon as you turn 18!\n</pre> <p>\u786e\u5b9a\u5217\u8868\u4e0d\u662f\u7a7a\u7684\uff1a</p> In\u00a0[5]: Copied! <pre>requeseted_toppings = []\n\nif requeseted_toppings:\n\tfor topping in requeseted_toppings:\n\t\tprint(\"Adding \" + topping + \".\")\n\tprint(\"\\nFinished making your pizza!\")\nelse:\n\tprint(\"Are you sure you want a plain pizza?\")\n</pre> requeseted_toppings = []  if requeseted_toppings: \tfor topping in requeseted_toppings: \t\tprint(\"Adding \" + topping + \".\") \tprint(\"\\nFinished making your pizza!\") else: \tprint(\"Are you sure you want a plain pizza?\") <pre>Are you sure you want a plain pizza?\n</pre> In\u00a0[6]: Copied! <pre>alien_0 = {'color': 'green', 'points': 5} #\u521b\u5efa\u4e00\u4e2a\u5b57\u5178\nprint(alien_0['color']) #\u8bbf\u95ee\u5b57\u5178\u4e2d\u7684\u503c\nprint(alien_0['points'])\n</pre> alien_0 = {'color': 'green', 'points': 5} #\u521b\u5efa\u4e00\u4e2a\u5b57\u5178 print(alien_0['color']) #\u8bbf\u95ee\u5b57\u5178\u4e2d\u7684\u503c print(alien_0['points']) <pre>green\n5\n</pre> <p>\u6dfb\u52a0\u952e-\u503c\u5bf9\uff1a</p> In\u00a0[7]: Copied! <pre>alien_0['x_position'] = 0 \nalien_0['y_position'] = 25\nprint(alien_0)\n</pre> alien_0['x_position'] = 0  alien_0['y_position'] = 25 print(alien_0) <pre>{'color': 'green', 'points': 5, 'x_position': 0, 'y_position': 25}\n</pre> In\u00a0[8]: Copied! <pre>del age, cars, car, age_0, age_1, banned_users, user, requeseted_toppings, alien_0\n</pre> del age, cars, car, age_0, age_1, banned_users, user, requeseted_toppings, alien_0 <p>\u904d\u5386\u5b57\u5178</p> In\u00a0[9]: Copied! <pre>user_0 = {\n\t'username':'efermi',\n\t'first':'enrico',\n\t'last':'fermi'\n}\n\nfor keys, values in user_0.items():\n\tprint(\"\\nKey: \" + keys)\n\tprint(\"Value: \" + values)\n</pre> user_0 = { \t'username':'efermi', \t'first':'enrico', \t'last':'fermi' }  for keys, values in user_0.items(): \tprint(\"\\nKey: \" + keys) \tprint(\"Value: \" + values) <pre>\nKey: username\nValue: efermi\n\nKey: first\nValue: enrico\n\nKey: last\nValue: fermi\n</pre> <p>\u904d\u5386\u952e\u6216\u503c</p> In\u00a0[10]: Copied! <pre>for a in user_0.keys():\n\tprint(a.title())\n\nfor a in user_0.values():\n\tprint(a.title())\n\nfor a in set(user_0.keys()): #\u53bb\u9664\u91cd\u590d\u9879\n\tprint(a.title())\n</pre> for a in user_0.keys(): \tprint(a.title())  for a in user_0.values(): \tprint(a.title())  for a in set(user_0.keys()): #\u53bb\u9664\u91cd\u590d\u9879 \tprint(a.title()) <pre>Username\nFirst\nLast\nEfermi\nEnrico\nFermi\nUsername\nFirst\nLast\n</pre> <p>\u8fd9\u91cc set() \u662f\u96c6\u5408\u51fd\u6570\uff0c\u5c06\u53d8\u91cf\u53d8\u4e3a\u96c6\u5408</p> <p>\u4ea4\u3001\u5e76\u3001\u5bf9\u79f0\u5dee</p> In\u00a0[11]: Copied! <pre>a = {1, 2, 3, 4, 5}\nb = {3, 4, 5, 6, 7, 8}\n\nprint(a.union(b)) \nprint(a | b) #\u5e76\u96c6\n\nprint(a &amp; b) #\u4ea4\u96c6\n\nprint(a ^ b) #\u5bf9\u79f0\u5dee\n</pre> a = {1, 2, 3, 4, 5} b = {3, 4, 5, 6, 7, 8}  print(a.union(b))  print(a | b) #\u5e76\u96c6  print(a &amp; b) #\u4ea4\u96c6  print(a ^ b) #\u5bf9\u79f0\u5dee <pre>{1, 2, 3, 4, 5, 6, 7, 8}\n{1, 2, 3, 4, 5, 6, 7, 8}\n{3, 4, 5}\n{1, 2, 6, 7, 8}\n</pre> <p>\u68c0\u67e5\u96c6\u5408\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6</p> In\u00a0[12]: Copied! <pre>a_set = set(range(1, 5))\nprint(set(range(1, 4)).issubset(a_set))\nprint(a_set.issuperset(set(range(1, 4))))\n</pre> a_set = set(range(1, 5)) print(set(range(1, 4)).issubset(a_set)) print(a_set.issuperset(set(range(1, 4)))) <pre>True\nTrue\n</pre> <p>input()</p> In\u00a0[13]: Copied! <pre>message = input(\"abc\")\nprint(message) #\u8f93\u5165\u7684\u5185\u5bb9\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\u683c\u5f0f\uff0c\u5982\u8981\u8f6c\u6362\u5219\u7528int()\u7b49\u51fd\u6570\n</pre> message = input(\"abc\") print(message) #\u8f93\u5165\u7684\u5185\u5bb9\u4e00\u5b9a\u662f\u5b57\u7b26\u4e32\u683c\u5f0f\uff0c\u5982\u8981\u8f6c\u6362\u5219\u7528int()\u7b49\u51fd\u6570 <pre>a\n</pre> <p>while\u5faa\u73af</p> In\u00a0[14]: Copied! <pre>message = \"\"\nwhile message != 'quit':\n\tmessage = input()\n\tif message != 'quit':\n\t\tprint(message)\n</pre> message = \"\" while message != 'quit': \tmessage = input() \tif message != 'quit': \t\tprint(message) <pre>a\na\na\na\na\na\na\na\na\na\na\na\na\n\na\na\n\na\na\n\naaaa\naa\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\n</pre> <p>break\u548ccontinue\u7684\u7528\u6cd5\u548cC\u8bed\u8a00\u4e00\u6837</p> In\u00a0[15]: Copied! <pre>def f(x, y, z=1.5): #\u5b9a\u4e49\u4e86z\u7684\u9ed8\u8ba4\u503c\n\tif z &gt; 1:\n\t\treturn z * (x + y)\n\telse:\n\t\treturn z / (x + y)\n\nprint(f(5, 6, z=0.7))\nprint(f(3.14, 7, 3.5))\nprint(f(10, 20))\n</pre> def f(x, y, z=1.5): #\u5b9a\u4e49\u4e86z\u7684\u9ed8\u8ba4\u503c \tif z &gt; 1: \t\treturn z * (x + y) \telse: \t\treturn z / (x + y)  print(f(5, 6, z=0.7)) print(f(3.14, 7, 3.5)) print(f(10, 20)) <pre>0.06363636363636363\n35.49\n45.0\n</pre> <p>\u547d\u540d\u7a7a\u95f4\u3001\u4f5c\u7528\u57df\u548c\u672c\u5730\u51fd\u6570</p> In\u00a0[16]: Copied! <pre>def func():\n\ta = []\n\tfor i in range(5):\n\t\ta.append(i) #\u8fd9\u91cc\u7684a\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u9000\u51fa\u65f6\u4f1a\u88ab\u9500\u6bc1\n\na = []\ndef func():\n\tfor i in range(5):\n\t\ta.append(i) #\u8fd9\u91cca\u5728\u51fd\u6570\u5916\u90e8\u88ab\u8d4b\u503c\n\ndef func():\n\tglobal a\n\ta = []\n\tfor i in range(5):\n\t\ta.append(i) #\u8fd9\u91cca\u88ab\u5b9a\u4e49\u4e3a\u5168\u5c40\u53d8\u91cf\n</pre> def func(): \ta = [] \tfor i in range(5): \t\ta.append(i) #\u8fd9\u91cc\u7684a\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u5728\u51fd\u6570\u9000\u51fa\u65f6\u4f1a\u88ab\u9500\u6bc1  a = [] def func(): \tfor i in range(5): \t\ta.append(i) #\u8fd9\u91cca\u5728\u51fd\u6570\u5916\u90e8\u88ab\u8d4b\u503c  def func(): \tglobal a \ta = [] \tfor i in range(5): \t\ta.append(i) #\u8fd9\u91cca\u88ab\u5b9a\u4e49\u4e3a\u5168\u5c40\u53d8\u91cf <p>\u51fd\u6570\u53ef\u4ee5\u4f5c\u4e3a\u5bf9\u8c61</p> In\u00a0[17]: Copied! <pre>states = ['   Alabama  ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda', 'south     carolina##', 'West virginia?']\nimport re\n\ndef remove_punctuation(value):\n\treturn re.sub('[!#?]', '', value)\n\nclean_ops = [str.strip, remove_punctuation, str.title]\n\ndef clean_strings(strings, ops):\n\tresult = []\n\tfor value in strings:\n\t\tfor function in ops:\n\t\t\tvalue = function(value)\n\t\tresult.append(value)\n\treturn result\nclean_strings(states, clean_ops)\n</pre> states = ['   Alabama  ', 'Georgia!', 'Georgia', 'georgia', 'FlOrIda', 'south     carolina##', 'West virginia?'] import re  def remove_punctuation(value): \treturn re.sub('[!#?]', '', value)  clean_ops = [str.strip, remove_punctuation, str.title]  def clean_strings(strings, ops): \tresult = [] \tfor value in strings: \t\tfor function in ops: \t\t\tvalue = function(value) \t\tresult.append(value) \treturn result clean_strings(states, clean_ops) Out[17]: <pre>['Alabama',\n 'Georgia',\n 'Georgia',\n 'Georgia',\n 'Florida',\n 'South     Carolina',\n 'West Virginia']</pre> <p>\u533f\u540d\uff08Lamda\uff09\u51fd\u6570</p> In\u00a0[18]: Copied! <pre>def function(x):\n\treturn x * 2\n\nequiv_anon = lambda x: x * 2\n</pre> def function(x): \treturn x * 2  equiv_anon = lambda x: x * 2"},{"location":"md/PY2/#chap-5-if","title":"chap 5 if\u8bed\u53e5\u00b6","text":""},{"location":"md/PY2/#chap-6","title":"chap 6 \u5b57\u5178\u00b6","text":""},{"location":"md/PY2/","title":"\u8865\u5145\uff1a\u96c6\u5408\u00b6","text":""},{"location":"md/PY2/#chap-7-while","title":"chap 7 \u7528\u6237\u8f93\u5165\u548cwhile\u5faa\u73af\u00b6","text":""},{"location":"md/PY2/#chap-8","title":"chap 8 \u51fd\u6570\u00b6","text":""},{"location":"md/PY3/","title":"PY3","text":"<p>\u521b\u5efa\u548c\u4f7f\u7528\u7c7b</p> In\u00a0[1]: Copied! <pre>class Dog():\n\t\"\"\"\u4e00\u6b21\u6a21\u62df\u5c0f\u72d7\u7684\u7b80\u5355\u5c1d\u8bd5\"\"\"\n\n\tdef __init__(self, name, age):\n\t\t\"\"\"\u521d\u59cb\u5316\u5c5e\u6027name\u548cage\"\"\"\n\t\tself.name = name\n\t\tself.age = age\n\t\t\n\tdef sit(self):\n\t\t\"\"\"\u6a21\u62df\u5c0f\u72d7\u8e72\u4e0b\"\"\"\n\t\tprint(self.name.title() + \" is now sitting.\")\n\t\n\tdef roll_over(self):\n\t\t\"\"\"\u6a21\u62df\u5c0f\u72d7\u6253\u6eda\"\"\"\n\t\tprint(self.name.title() + \" rolled over.\")\n</pre> class Dog(): \t\"\"\"\u4e00\u6b21\u6a21\u62df\u5c0f\u72d7\u7684\u7b80\u5355\u5c1d\u8bd5\"\"\"  \tdef __init__(self, name, age): \t\t\"\"\"\u521d\u59cb\u5316\u5c5e\u6027name\u548cage\"\"\" \t\tself.name = name \t\tself.age = age \t\t \tdef sit(self): \t\t\"\"\"\u6a21\u62df\u5c0f\u72d7\u8e72\u4e0b\"\"\" \t\tprint(self.name.title() + \" is now sitting.\") \t \tdef roll_over(self): \t\t\"\"\"\u6a21\u62df\u5c0f\u72d7\u6253\u6eda\"\"\" \t\tprint(self.name.title() + \" rolled over.\")"},{"location":"md/PY3/","title":"\u7c7b\u00b6","text":""},{"location":"md/daanpy/","title":"\u6570\u636e\u8f7d\u5165\u3001\u5b58\u50a8\u53ca\u6587\u4ef6\u683c\u5f0f","text":"<p>pandas\u7684\u89e3\u6790\u51fd\u6570\uff1a</p> <ul> <li>read_csv</li> <li>read_table</li> <li>...</li> </ul> In\u00a0[47]: Copied! <pre>import pandas as pd\nimport numpy as np\n</pre> import pandas as pd import numpy as np In\u00a0[48]: Copied! <pre>df = pd.read_csv('examples/ex1.csv')\nprint(df) #\u7528read_csv()\u8bfb\u53d6csv\u6587\u4ef6\nprint(pd.read_table('examples/ex1.csv', sep=',')) #\u7528read_table()\u8bfb\u53d6csv\u6587\u4ef6\uff0c\u5e76\u6307\u5b9a\u5206\u9694\u7b26\nprint(pd.read_csv('examples/ex2.csv', header=None)) #\u6ca1\u6709\u5217\u540d\u65f6\uff0cheader=None\nprint(pd.read_csv('examples/ex2.csv', names=['a', 'b', 'c', 'd', 'message'])) #\u6307\u5b9a\u5217\u540d\nnames = ['a', 'b', 'c', 'd', 'message']\nprint(pd.read_csv('examples/ex2.csv', names=names, index_col='message')) #\u6307\u5b9a\u5217\u540d\uff0c\u5e76\u5c06message\u5217\u4f5c\u4e3a\u7d22\u5f15\n</pre> df = pd.read_csv('examples/ex1.csv') print(df) #\u7528read_csv()\u8bfb\u53d6csv\u6587\u4ef6 print(pd.read_table('examples/ex1.csv', sep=',')) #\u7528read_table()\u8bfb\u53d6csv\u6587\u4ef6\uff0c\u5e76\u6307\u5b9a\u5206\u9694\u7b26 print(pd.read_csv('examples/ex2.csv', header=None)) #\u6ca1\u6709\u5217\u540d\u65f6\uff0cheader=None print(pd.read_csv('examples/ex2.csv', names=['a', 'b', 'c', 'd', 'message'])) #\u6307\u5b9a\u5217\u540d names = ['a', 'b', 'c', 'd', 'message'] print(pd.read_csv('examples/ex2.csv', names=names, index_col='message')) #\u6307\u5b9a\u5217\u540d\uff0c\u5e76\u5c06message\u5217\u4f5c\u4e3a\u7d22\u5f15 <pre>   a   b   c   d message\n0  1   2   3   4   hello\n1  5   6   7   8   world\n2  9  10  11  12     foo\n   a   b   c   d message\n0  1   2   3   4   hello\n1  5   6   7   8   world\n2  9  10  11  12     foo\n   0   1   2   3      4\n0  1   2   3   4  hello\n1  5   6   7   8  world\n2  9  10  11  12    foo\n   a   b   c   d message\n0  1   2   3   4   hello\n1  5   6   7   8   world\n2  9  10  11  12     foo\n         a   b   c   d\nmessage               \nhello    1   2   3   4\nworld    5   6   7   8\nfoo      9  10  11  12\n</pre> In\u00a0[49]: Copied! <pre>parsed = pd.read_csv('examples/csv_mindex.csv', index_col=['key1', 'key2'])\nprint(parsed) #\u6307\u5b9a\u591a\u5217\u4f5c\u4e3a\u7d22\u5f15\nprint(list(open('examples/ex3.txt'))) #\u9010\u884c\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\nresult = pd.read_table('examples/ex3.txt', sep='\\s+') #\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5206\u9694\u7b26\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\uff0c\\s+\u8868\u793a\u591a\u4e2a\u7a7a\u683c\nprint(result)\n</pre> parsed = pd.read_csv('examples/csv_mindex.csv', index_col=['key1', 'key2']) print(parsed) #\u6307\u5b9a\u591a\u5217\u4f5c\u4e3a\u7d22\u5f15 print(list(open('examples/ex3.txt'))) #\u9010\u884c\u8bfb\u53d6\u6587\u672c\u6587\u4ef6 result = pd.read_table('examples/ex3.txt', sep='\\s+') #\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5206\u9694\u7b26\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\uff0c\\s+\u8868\u793a\u591a\u4e2a\u7a7a\u683c print(result) <pre>           value1  value2\nkey1 key2                \none  a          1       2\n     b          3       4\n     c          5       6\n     d          7       8\ntwo  a          9      10\n     b         11      12\n     c         13      14\n     d         15      16\n['            A         B         C\\n', 'aaa -0.264438 -1.026059 -0.619500\\n', 'bbb  0.927272  0.302904 -0.032399\\n', 'ccc -0.264273 -0.386314 -0.217601\\n', 'ddd -0.871858 -0.348382  1.100491\\n']\n            A         B         C\naaa -0.264438 -1.026059 -0.619500\nbbb  0.927272  0.302904 -0.032399\nccc -0.264273 -0.386314 -0.217601\nddd -0.871858 -0.348382  1.100491\n</pre> <pre>&lt;&gt;:4: SyntaxWarning: invalid escape sequence '\\s'\n&lt;&gt;:4: SyntaxWarning: invalid escape sequence '\\s'\n/tmp/ipykernel_1860/1436999290.py:4: SyntaxWarning: invalid escape sequence '\\s'\n  result = pd.read_table('examples/ex3.txt', sep='\\s+') #\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4f5c\u4e3a\u5206\u9694\u7b26\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\uff0c\\s+\u8868\u793a\u591a\u4e2a\u7a7a\u683c\n</pre> In\u00a0[50]: Copied! <pre>print(pd.read_csv('examples/ex4.csv', skiprows=[0, 2, 3])) #\u8df3\u8fc7\u6307\u5b9a\u884c\u8bfb\u53d6csv\u6587\u4ef6\nresults = pd.read_csv('examples/ex5.csv')\nprint(results)\nprint(results.isnull()) #\u68c0\u67e5\u7f3a\u5931\u503c\nresults = pd.read_csv('examples/ex5.csv', na_values=['NULL']) #\u5c06\u6307\u5b9a\u503c\u8bc6\u522b\u4e3aNaN\nprint(results)\nsentinels = {'message': ['foo', 'NA'], 'something': ['two']}\nprint(pd.read_csv('examples/ex5.csv', na_values=sentinels)) #\u4e3a\u4e0d\u540c\u5217\u6307\u5b9a\u4e0d\u540c\u7684\u7f3a\u5931\u503c\u6807\u8bb0\n</pre> print(pd.read_csv('examples/ex4.csv', skiprows=[0, 2, 3])) #\u8df3\u8fc7\u6307\u5b9a\u884c\u8bfb\u53d6csv\u6587\u4ef6 results = pd.read_csv('examples/ex5.csv') print(results) print(results.isnull()) #\u68c0\u67e5\u7f3a\u5931\u503c results = pd.read_csv('examples/ex5.csv', na_values=['NULL']) #\u5c06\u6307\u5b9a\u503c\u8bc6\u522b\u4e3aNaN print(results) sentinels = {'message': ['foo', 'NA'], 'something': ['two']} print(pd.read_csv('examples/ex5.csv', na_values=sentinels)) #\u4e3a\u4e0d\u540c\u5217\u6307\u5b9a\u4e0d\u540c\u7684\u7f3a\u5931\u503c\u6807\u8bb0 <pre>   a   b   c   d message\n0  1   2   3   4   hello\n1  5   6   7   8   world\n2  9  10  11  12     foo\n  something  a   b     c   d message\n0       one  1   2   3.0   4     NaN\n1       two  5   6   NaN   8   world\n2     three  9  10  11.0  12     foo\n   something      a      b      c      d  message\n0      False  False  False  False  False     True\n1      False  False  False   True  False    False\n2      False  False  False  False  False    False\n  something  a   b     c   d message\n0       one  1   2   3.0   4     NaN\n1       two  5   6   NaN   8   world\n2     three  9  10  11.0  12     foo\n  something  a   b     c   d message\n0       one  1   2   3.0   4     NaN\n1       NaN  5   6   NaN   8   world\n2     three  9  10  11.0  12     NaN\n</pre> In\u00a0[51]: Copied! <pre>pd.options.display.max_rows = 10 #\u8bbe\u7f6e\u663e\u793a\u7684\u6700\u5927\u884c\u6570\nresult = pd.read_csv('examples/ex6.csv')\nprint(result)\nprint(pd.read_csv('examples/ex6.csv', nrows=5)) #\u53ea\u8bfb\u53d6\u524d5\u884c\n</pre> pd.options.display.max_rows = 10 #\u8bbe\u7f6e\u663e\u793a\u7684\u6700\u5927\u884c\u6570 result = pd.read_csv('examples/ex6.csv') print(result) print(pd.read_csv('examples/ex6.csv', nrows=5)) #\u53ea\u8bfb\u53d6\u524d5\u884c <pre>           one       two     three      four key\n0     0.467976 -0.038649 -0.295344 -1.824726   L\n1    -0.358893  1.404453  0.704965 -0.200638   B\n2    -0.501840  0.659254 -0.421691 -0.057688   G\n3     0.204886  1.074134  1.388361 -0.982404   R\n4     0.354628 -0.133116  0.283763 -0.837063   Q\n...        ...       ...       ...       ...  ..\n9995  2.311896 -0.417070 -1.409599 -0.515821   L\n9996 -0.479893 -0.650419  0.745152 -0.646038   E\n9997  0.523331  0.787112  0.486066  1.093156   K\n9998 -0.362559  0.598894 -1.843201  0.887292   G\n9999 -0.096376 -1.012999 -0.657431 -0.573315   0\n\n[10000 rows x 5 columns]\n        one       two     three      four key\n0  0.467976 -0.038649 -0.295344 -1.824726   L\n1 -0.358893  1.404453  0.704965 -0.200638   B\n2 -0.501840  0.659254 -0.421691 -0.057688   G\n3  0.204886  1.074134  1.388361 -0.982404   R\n4  0.354628 -0.133116  0.283763 -0.837063   Q\n</pre> In\u00a0[52]: Copied! <pre>chunks = pd.read_csv('examples/ex6.csv', chunksize=1000) #\u5206\u5757\u8bfb\u53d6\u5927\u6587\u4ef6\uff0c\u6bcf\u6b21\u8bfb\u53d61000\u884c\nprint(chunks) #\u8fd4\u56de\u4e00\u4e2aTextFileReader\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8fed\u4ee3\nchuner = pd.read_csv('examples/ex6.csv', chunksize=1000)\ntot = pd.Series([])\nfor piece in chuner:\n\ttot = tot.add(piece['key'].value_counts(), fill_value=0) #\u7edf\u8ba1\u6bcf\u4e2a\u5757\u4e2dkey\u5217\u7684\u503c\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5e76\u7d2f\u52a0\n\ntot = tot.sort_values(ascending=False) #\u6309\u51fa\u73b0\u6b21\u6570\u6392\u5e8f\nprint(tot[:10]) #\u663e\u793a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u524d10\u4e2a\u503c\n</pre> chunks = pd.read_csv('examples/ex6.csv', chunksize=1000) #\u5206\u5757\u8bfb\u53d6\u5927\u6587\u4ef6\uff0c\u6bcf\u6b21\u8bfb\u53d61000\u884c print(chunks) #\u8fd4\u56de\u4e00\u4e2aTextFileReader\u5bf9\u8c61\uff0c\u53ef\u4ee5\u8fed\u4ee3 chuner = pd.read_csv('examples/ex6.csv', chunksize=1000) tot = pd.Series([]) for piece in chuner: \ttot = tot.add(piece['key'].value_counts(), fill_value=0) #\u7edf\u8ba1\u6bcf\u4e2a\u5757\u4e2dkey\u5217\u7684\u503c\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5e76\u7d2f\u52a0  tot = tot.sort_values(ascending=False) #\u6309\u51fa\u73b0\u6b21\u6570\u6392\u5e8f print(tot[:10]) #\u663e\u793a\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u524d10\u4e2a\u503c <pre>&lt;pandas.io.parsers.readers.TextFileReader object at 0x7f79e9b141a0&gt;\nkey\nE    368\nX    364\nL    346\nO    343\nQ    340\nM    338\nJ    337\nF    335\nK    334\nH    330\ndtype: object\n</pre> In\u00a0[53]: Copied! <pre>data = pd.read_csv('examples/ex5.csv')\nprint(data)\ndata.to_csv('examples/out.csv') #\u5c06DataFrame\u5199\u5165csv\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u6587\u4ef6\nimport sys\ndata.to_csv(sys.stdout, sep='|') #\u5c06DataFrame\u5199\u5165csv\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u6307\u5b9a\u5206\u9694\u7b26\ndata.to_csv(sys.stdout, na_rep='NULL') #\u5c06NaN\u503c\u5199\u4e3a\u6307\u5b9a\u5b57\u7b26\u4e32\ndata.to_csv(sys.stdout, index=False, header=False) #\u4e0d\u5199\u5165\u884c\u7d22\u5f15\u548c\u5217\u540d\ndata.to_csv(sys.stdout, index=False, columns=['a', 'b', 'c']) #\u53ea\u5199\u5165\u6307\u5b9a\u7684\u5217\ndates = pd.date_range('1/1/2000', periods=7)\nts = pd.Series(np.arange(7), index=dates)\nprint(ts)\nts.to_csv('examples/tseries.csv') #\u5c06\u65f6\u95f4\u5e8f\u5217\u5199\u5165csv\u6587\u4ef6\n</pre> data = pd.read_csv('examples/ex5.csv') print(data) data.to_csv('examples/out.csv') #\u5c06DataFrame\u5199\u5165csv\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u6587\u4ef6 import sys data.to_csv(sys.stdout, sep='|') #\u5c06DataFrame\u5199\u5165csv\u683c\u5f0f\u7684\u6587\u4ef6\uff0c\u6307\u5b9a\u5206\u9694\u7b26 data.to_csv(sys.stdout, na_rep='NULL') #\u5c06NaN\u503c\u5199\u4e3a\u6307\u5b9a\u5b57\u7b26\u4e32 data.to_csv(sys.stdout, index=False, header=False) #\u4e0d\u5199\u5165\u884c\u7d22\u5f15\u548c\u5217\u540d data.to_csv(sys.stdout, index=False, columns=['a', 'b', 'c']) #\u53ea\u5199\u5165\u6307\u5b9a\u7684\u5217 dates = pd.date_range('1/1/2000', periods=7) ts = pd.Series(np.arange(7), index=dates) print(ts) ts.to_csv('examples/tseries.csv') #\u5c06\u65f6\u95f4\u5e8f\u5217\u5199\u5165csv\u6587\u4ef6 <pre>  something  a   b     c   d message\n0       one  1   2   3.0   4     NaN\n1       two  5   6   NaN   8   world\n2     three  9  10  11.0  12     foo\n|something|a|b|c|d|message\n0|one|1|2|3.0|4|\n1|two|5|6||8|world\n2|three|9|10|11.0|12|foo\n,something,a,b,c,d,message\n0,one,1,2,3.0,4,NULL\n1,two,5,6,NULL,8,world\n2,three,9,10,11.0,12,foo\none,1,2,3.0,4,\ntwo,5,6,,8,world\nthree,9,10,11.0,12,foo\na,b,c\n1,2,3.0\n5,6,\n9,10,11.0\n2000-01-01    0\n2000-01-02    1\n2000-01-03    2\n2000-01-04    3\n2000-01-05    4\n2000-01-06    5\n2000-01-07    6\nFreq: D, dtype: int64\n</pre> In\u00a0[54]: Copied! <pre>import csv\nf = open('examples/ex7.csv')\nreader = csv.reader(f) #\u4f7f\u7528csv\u6a21\u5757\u8bfb\u53d6csv\u6587\u4ef6\nfor line in reader:\n\tprint(line)\nwith open('examples/ex7.csv') as f:\n\tlines = list(csv.reader(f)) #\u5c06csv\u6587\u4ef6\u8bfb\u53d6\u4e3a\u5217\u8868\nheader, values = lines[0], lines[1:] #\u5206\u79bb\u8868\u5934\u548c\u6570\u636e\ndata_dict = {h: v for h, v in zip(header, zip(*values))} #\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5b57\u5178\nprint(data_dict)\n</pre> import csv f = open('examples/ex7.csv') reader = csv.reader(f) #\u4f7f\u7528csv\u6a21\u5757\u8bfb\u53d6csv\u6587\u4ef6 for line in reader: \tprint(line) with open('examples/ex7.csv') as f: \tlines = list(csv.reader(f)) #\u5c06csv\u6587\u4ef6\u8bfb\u53d6\u4e3a\u5217\u8868 header, values = lines[0], lines[1:] #\u5206\u79bb\u8868\u5934\u548c\u6570\u636e data_dict = {h: v for h, v in zip(header, zip(*values))} #\u5c06\u6570\u636e\u8f6c\u6362\u4e3a\u5b57\u5178 print(data_dict) <pre>['a', 'b', 'c']\n['1', '2', '3']\n['1', '2', '3']\n{'a': ('1', '1'), 'b': ('2', '2'), 'c': ('3', '3')}\n</pre> In\u00a0[55]: Copied! <pre>obj = \"\"\"\n{\"name\": \"Wes\", \"places_lived\": [\"United States\", \"Spain\", \"Germany\"], \"pet\": null, \"siblings\": [{\"name\": \"Scott\", \"age\": 30, \"pet\": \"Zuko\"}, {\"name\": \"Katie\", \"age\": 38, \"pet\": \"Cisco\"}]}\n\"\"\"\nimport json\nresult = json.loads(obj) #\u5c06JSON\u5b57\u7b26\u4e32\u89e3\u6790\u4e3aPython\u5b57\u5178\nprint(result)\nasjson = json.dumps(result) #\u5c06Python\u5b57\u5178\u8f6c\u6362\u4e3aJSON\u5b57\u7b26\u4e32\nprint(asjson)\nsiblings = pd.DataFrame(result['siblings'], columns=['name', 'age', 'pet']) #\u5c06\u5b57\u5178\u4e2d\u7684\u5217\u8868\u8f6c\u6362\u4e3aDataFrame\nprint(siblings)\ndata = pd.read_json('examples/example.json') #\u4eceJSON\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\nprint(data)\nprint(data.to_json()) #\u5c06DataFrame\u8f6c\u6362\u4e3aJSON\u5b57\u7b26\u4e32\nprint(data.to_json(orient='records')) #\u5c06DataFrame\u8f6c\u6362\u4e3aJSON\u5b57\u7b26\u4e32\uff0c\u6309\u8bb0\u5f55\u683c\u5f0f\n</pre> obj = \"\"\" {\"name\": \"Wes\", \"places_lived\": [\"United States\", \"Spain\", \"Germany\"], \"pet\": null, \"siblings\": [{\"name\": \"Scott\", \"age\": 30, \"pet\": \"Zuko\"}, {\"name\": \"Katie\", \"age\": 38, \"pet\": \"Cisco\"}]} \"\"\" import json result = json.loads(obj) #\u5c06JSON\u5b57\u7b26\u4e32\u89e3\u6790\u4e3aPython\u5b57\u5178 print(result) asjson = json.dumps(result) #\u5c06Python\u5b57\u5178\u8f6c\u6362\u4e3aJSON\u5b57\u7b26\u4e32 print(asjson) siblings = pd.DataFrame(result['siblings'], columns=['name', 'age', 'pet']) #\u5c06\u5b57\u5178\u4e2d\u7684\u5217\u8868\u8f6c\u6362\u4e3aDataFrame print(siblings) data = pd.read_json('examples/example.json') #\u4eceJSON\u6587\u4ef6\u8bfb\u53d6\u6570\u636e print(data) print(data.to_json()) #\u5c06DataFrame\u8f6c\u6362\u4e3aJSON\u5b57\u7b26\u4e32 print(data.to_json(orient='records')) #\u5c06DataFrame\u8f6c\u6362\u4e3aJSON\u5b57\u7b26\u4e32\uff0c\u6309\u8bb0\u5f55\u683c\u5f0f <pre>{'name': 'Wes', 'places_lived': ['United States', 'Spain', 'Germany'], 'pet': None, 'siblings': [{'name': 'Scott', 'age': 30, 'pet': 'Zuko'}, {'name': 'Katie', 'age': 38, 'pet': 'Cisco'}]}\n{\"name\": \"Wes\", \"places_lived\": [\"United States\", \"Spain\", \"Germany\"], \"pet\": null, \"siblings\": [{\"name\": \"Scott\", \"age\": 30, \"pet\": \"Zuko\"}, {\"name\": \"Katie\", \"age\": 38, \"pet\": \"Cisco\"}]}\n    name  age    pet\n0  Scott   30   Zuko\n1  Katie   38  Cisco\n   a  b  c\n0  1  2  3\n1  4  5  6\n2  7  8  9\n{\"a\":{\"0\":1,\"1\":4,\"2\":7},\"b\":{\"0\":2,\"1\":5,\"2\":8},\"c\":{\"0\":3,\"1\":6,\"2\":9}}\n[{\"a\":1,\"b\":2,\"c\":3},{\"a\":4,\"b\":5,\"c\":6},{\"a\":7,\"b\":8,\"c\":9}]\n</pre> In\u00a0[56]: Copied! <pre>tables = pd.read_html('examples/fdic_failed_bank_list.html') #\u4eceHTML\u6587\u4ef6\u4e2d\u63d0\u53d6\u6240\u6709\u8868\u683c\nprint(len(tables)) #\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u6240\u6709\u63d0\u53d6\u7684\u8868\u683c\nfailures = tables[0]\nprint(failures.head()) #\u663e\u793a\u7b2c\u4e00\u4e2a\u8868\u683c\u7684\u524d5\u884c\nclose_dates = pd.to_datetime(failures['Closing Date']) #\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u65e5\u671f\u65f6\u95f4\u683c\u5f0f\nprint(close_dates.dt.year.value_counts()) #\u7edf\u8ba1\u6bcf\u5e74\u5173\u95ed\u7684\u94f6\u884c\u6570\u91cf\nprint(failures['City'].value_counts()) #\u7edf\u8ba1\u6bcf\u4e2a\u57ce\u5e02\u5173\u95ed\u7684\u94f6\u884c\u6570\u91cf\n</pre> tables = pd.read_html('examples/fdic_failed_bank_list.html') #\u4eceHTML\u6587\u4ef6\u4e2d\u63d0\u53d6\u6240\u6709\u8868\u683c print(len(tables)) #\u8fd4\u56de\u4e00\u4e2a\u5217\u8868\uff0c\u5305\u542b\u6240\u6709\u63d0\u53d6\u7684\u8868\u683c failures = tables[0] print(failures.head()) #\u663e\u793a\u7b2c\u4e00\u4e2a\u8868\u683c\u7684\u524d5\u884c close_dates = pd.to_datetime(failures['Closing Date']) #\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u65e5\u671f\u65f6\u95f4\u683c\u5f0f print(close_dates.dt.year.value_counts()) #\u7edf\u8ba1\u6bcf\u5e74\u5173\u95ed\u7684\u94f6\u884c\u6570\u91cf print(failures['City'].value_counts()) #\u7edf\u8ba1\u6bcf\u4e2a\u57ce\u5e02\u5173\u95ed\u7684\u94f6\u884c\u6570\u91cf <pre>1\n                      Bank Name             City  ST   CERT  \\\n0                   Allied Bank         Mulberry  AR     91   \n1  The Woodbury Banking Company         Woodbury  GA  11297   \n2        First CornerStone Bank  King of Prussia  PA  35312   \n3            Trust Company Bank          Memphis  TN   9956   \n4    North Milwaukee State Bank        Milwaukee  WI  20364   \n\n                 Acquiring Institution        Closing Date       Updated Date  \n0                         Today's Bank  September 23, 2016  November 17, 2016  \n1                          United Bank     August 19, 2016  November 17, 2016  \n2  First-Citizens Bank &amp; Trust Company         May 6, 2016  September 6, 2016  \n3           The Bank of Fayette County      April 29, 2016  September 6, 2016  \n4  First-Citizens Bank &amp; Trust Company      March 11, 2016      June 16, 2016  \nClosing Date\n2010    157\n2009    140\n2011     92\n2012     51\n2008     25\n       ... \n2004      4\n2001      4\n2007      3\n2003      3\n2000      2\nName: count, Length: 15, dtype: int64\nCity\nChicago            18\nAtlanta            10\nPhoenix             6\nNaples              5\nMiami               4\n                   ..\nClarkesville        1\nNapa                1\nSan Luis Obispo     1\nSt. Charles         1\nHonolulu            1\nName: count, Length: 421, dtype: int64\n</pre> In\u00a0[57]: Copied! <pre>#\u5f85\u8865\u5145\n</pre> #\u5f85\u8865\u5145 In\u00a0[58]: Copied! <pre>frame = pd.read_csv('examples/ex1.csv')\nprint(frame)\nframe.to_pickle('examples/frame_pickle') #\u5c06DataFrame\u5b58\u50a8\u4e3apickle\u683c\u5f0f\u7684\u6587\u4ef6\npd.read_pickle('examples/frame_pickle') #\u4ecepickle\u683c\u5f0f\u7684\u6587\u4ef6\u8bfb\u53d6DataFrame\n</pre> frame = pd.read_csv('examples/ex1.csv') print(frame) frame.to_pickle('examples/frame_pickle') #\u5c06DataFrame\u5b58\u50a8\u4e3apickle\u683c\u5f0f\u7684\u6587\u4ef6 pd.read_pickle('examples/frame_pickle') #\u4ecepickle\u683c\u5f0f\u7684\u6587\u4ef6\u8bfb\u53d6DataFrame <pre>   a   b   c   d message\n0  1   2   3   4   hello\n1  5   6   7   8   world\n2  9  10  11  12     foo\n</pre> Out[58]: a b c d message 0 1 2 3 4 hello 1 5 6 7 8 world 2 9 10 11 12 foo In\u00a0[59]: Copied! <pre>frame = pd.DataFrame({'a': np.random.randn(100)})\nstore = pd.HDFStore('mydata.h5') #\u521b\u5efaHDF5\u6587\u4ef6\nstore['obj1'] = frame #\u5c06DataFrame\u5b58\u50a8\u4e3aHDF5\u683c\u5f0f\nprint(store['obj1']) #\u4eceHDF5\u6587\u4ef6\u8bfb\u53d6DataFrame\nstore['obj1_col'] = frame['a'] #\u5c06DataFrame\u7684\u4e00\u5217\u5b58\u50a8\u4e3aHDF5\u683c\u5f0f\nprint(store['obj1_col']) #\u4eceHDF5\u6587\u4ef6\u8bfb\u53d6DataFrame\u7684\u4e00\u5217\nprint(store) #\u663e\u793aHDF5\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5bf9\u8c61\nstore.close() #\u5173\u95edHDF5\u6587\u4ef6\n</pre> frame = pd.DataFrame({'a': np.random.randn(100)}) store = pd.HDFStore('mydata.h5') #\u521b\u5efaHDF5\u6587\u4ef6 store['obj1'] = frame #\u5c06DataFrame\u5b58\u50a8\u4e3aHDF5\u683c\u5f0f print(store['obj1']) #\u4eceHDF5\u6587\u4ef6\u8bfb\u53d6DataFrame store['obj1_col'] = frame['a'] #\u5c06DataFrame\u7684\u4e00\u5217\u5b58\u50a8\u4e3aHDF5\u683c\u5f0f print(store['obj1_col']) #\u4eceHDF5\u6587\u4ef6\u8bfb\u53d6DataFrame\u7684\u4e00\u5217 print(store) #\u663e\u793aHDF5\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5bf9\u8c61 store.close() #\u5173\u95edHDF5\u6587\u4ef6 <pre>           a\n0  -0.501809\n1  -2.468277\n2  -1.097029\n3   1.083563\n4  -1.473387\n..       ...\n95  1.902708\n96 -0.432740\n97  0.855250\n98  0.168788\n99 -0.096917\n\n[100 rows x 1 columns]\n0    -0.501809\n1    -2.468277\n2    -1.097029\n3     1.083563\n4    -1.473387\n        ...   \n95    1.902708\n96   -0.432740\n97    0.855250\n98    0.168788\n99   -0.096917\nName: a, Length: 100, dtype: float64\n&lt;class 'pandas.io.pytables.HDFStore'&gt;\nFile path: mydata.h5\n\n</pre> In\u00a0[60]: Copied! <pre>xlsx = pd.ExcelFile('examples/ex1.xlsx') #\u8bfb\u53d6Excel\u6587\u4ef6\nprint(xlsx.sheet_names) #\u663e\u793a\u6240\u6709\u5de5\u4f5c\u8868\u7684\u540d\u79f0\nprint(pd.read_excel(xlsx, 'Sheet1')) #\u8bfb\u53d6\u6307\u5b9a\u5de5\u4f5c\u8868\nframe = pd.read_excel('examples/ex1.xlsx', 'Sheet1') #\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u5de5\u4f5c\u8868\nprint(frame)\nwriter = pd.ExcelWriter('examples/ex2.xlsx') #\u521b\u5efaExcel\u5199\u5165\u5bf9\u8c61\nframe.to_excel(writer, 'Sheet1') #\u5c06DataFrame\u5199\u5165\u6307\u5b9a\u5de5\u4f5c\u8868\nwith pd.ExcelWriter('examples/ex2.xlsx') as writer:\n    frame.to_excel(writer, sheet_name='Sheet1', index=False)\n# \u79bb\u5f00 with \u5757\u65f6\u81ea\u52a8\u4fdd\u5b58\u5e76\u5173\u95ed\nframe.to_excel('examples/ex2.xlsx')\n</pre> xlsx = pd.ExcelFile('examples/ex1.xlsx') #\u8bfb\u53d6Excel\u6587\u4ef6 print(xlsx.sheet_names) #\u663e\u793a\u6240\u6709\u5de5\u4f5c\u8868\u7684\u540d\u79f0 print(pd.read_excel(xlsx, 'Sheet1')) #\u8bfb\u53d6\u6307\u5b9a\u5de5\u4f5c\u8868 frame = pd.read_excel('examples/ex1.xlsx', 'Sheet1') #\u76f4\u63a5\u8bfb\u53d6\u6307\u5b9a\u5de5\u4f5c\u8868 print(frame) writer = pd.ExcelWriter('examples/ex2.xlsx') #\u521b\u5efaExcel\u5199\u5165\u5bf9\u8c61 frame.to_excel(writer, 'Sheet1') #\u5c06DataFrame\u5199\u5165\u6307\u5b9a\u5de5\u4f5c\u8868 with pd.ExcelWriter('examples/ex2.xlsx') as writer:     frame.to_excel(writer, sheet_name='Sheet1', index=False) # \u79bb\u5f00 with \u5757\u65f6\u81ea\u52a8\u4fdd\u5b58\u5e76\u5173\u95ed frame.to_excel('examples/ex2.xlsx') <pre>['Sheet1']\n   Unnamed: 0  a   b   c   d message\n0           0  1   2   3   4   hello\n1           1  5   6   7   8   world\n2           2  9  10  11  12     foo\n   Unnamed: 0  a   b   c   d message\n0           0  1   2   3   4   hello\n1           1  5   6   7   8   world\n2           2  9  10  11  12     foo\n</pre> <pre>/tmp/ipykernel_1860/851877596.py:7: FutureWarning: Starting with pandas version 3.0 all arguments of to_excel except for the argument 'excel_writer' will be keyword-only.\n  frame.to_excel(writer, 'Sheet1') #\u5c06DataFrame\u5199\u5165\u6307\u5b9a\u5de5\u4f5c\u8868\n</pre> In\u00a0[61]: Copied! <pre>import requests\n\nurl = 'https://api.github.com/repos/pandas-dev/pandas/issues'\nresp = requests.get(url) #\u53d1\u9001GET\u8bf7\u6c42\nprint(resp) #\u663e\u793a\u54cd\u5e94\u72b6\u6001\u7801\ndata = resp.json() #\u5c06\u54cd\u5e94\u5185\u5bb9\u89e3\u6790\u4e3aJSON\u683c\u5f0f\nprint(data[0]['title']) #\u663e\u793a\u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u6807\u9898\nissues = pd.DataFrame(data, columns=['number', 'title', 'labels', 'state']) #\u5c06JSON\u6570\u636e\u8f6c\u6362\u4e3aDataFrame\nprint(issues) #\u663e\u793aDataFrame\n</pre> import requests  url = 'https://api.github.com/repos/pandas-dev/pandas/issues' resp = requests.get(url) #\u53d1\u9001GET\u8bf7\u6c42 print(resp) #\u663e\u793a\u54cd\u5e94\u72b6\u6001\u7801 data = resp.json() #\u5c06\u54cd\u5e94\u5185\u5bb9\u89e3\u6790\u4e3aJSON\u683c\u5f0f print(data[0]['title']) #\u663e\u793a\u7b2c\u4e00\u4e2a\u95ee\u9898\u7684\u6807\u9898 issues = pd.DataFrame(data, columns=['number', 'title', 'labels', 'state']) #\u5c06JSON\u6570\u636e\u8f6c\u6362\u4e3aDataFrame print(issues) #\u663e\u793aDataFrame <pre>&lt;Response [200]&gt;\nBUG: use `make altinstall` in debug Dockerfile to avoid overwriting system python3\n    number                                              title  \\\n0    62272  BUG: use `make altinstall` in debug Dockerfile...   \n1    62271  ERR: Improve error message for deprecated freq...   \n2    62270  CLN: Enforce deprecation of PeriodIndex in res...   \n3    62269                 CLN: Apply ruff format to scripts/   \n4    62268  ENH: Make ExtensionDtype.numpy_dtype part of t...   \n..     ...                                                ...   \n25   62232  DEPR: Remove special date-datetime64 case in i...   \n26   62227  BUG: rank with object dtype and small values #...   \n27   62226  fix : include datatype in memo key in sanitiza...   \n28   62225  DOC: Fix linkcode_resolve for inherited proper...   \n29   62222  Remove custom footer template in favor of them...   \n\n                                               labels state  \n0                                                  []  open  \n1                                                  []  open  \n2                                                  []  open  \n3   [{'id': 48070600, 'node_id': 'MDU6TGFiZWw0ODA3...  open  \n4   [{'id': 76812, 'node_id': 'MDU6TGFiZWw3NjgxMg=...  open  \n..                                                ...   ...  \n25                                                 []  open  \n26                                                 []  open  \n27                                                 []  open  \n28                                                 []  open  \n29                                                 []  open  \n\n[30 rows x 4 columns]\n</pre> In\u00a0[66]: Copied! <pre>import sqlite3\nquery = \"\"\"CREATE TABLE test (a VARCHAR(20), b VARCHAR(20), c REAL, d INTEGER);\nINSERT INTO test VALUES ('one', 'two', 3.0, 4);\nINSERT INTO test VALUES ('five', 'six', 7.0, 8);\nINSERT INTO test VALUES ('nine', 'ten', 11.0, 12);\n\"\"\"\ncon = sqlite3.connect(':memory:') #\u521b\u5efa\u5185\u5b58\u4e2d\u7684SQLite\u6570\u636e\u5e93\ncon.executescript(query) #\u6267\u884c\u591a\u6761SQL\u8bed\u53e5\ncon.commit() #\u63d0\u4ea4\u4e8b\u52a1\ndata = [('Atlanta', 'Georgia', 1.25, 6), ('Tallahassee', 'Florida', 2.6, 3), ('Sacramento', 'California', 1.7, 5)]\nstmt = \"INSERT INTO test VALUES (?, ?, ?, ?)\"\ncon.executemany(stmt, data) #\u6267\u884c\u591a\u6761SQL\u8bed\u53e5\ncon.commit() #\u63d0\u4ea4\u4e8b\u52a1\ncursor = con.execute('select * from test') #\u6267\u884c\u67e5\u8be2\u8bed\u53e5\nrows = cursor.fetchall() #\u83b7\u53d6\u6240\u6709\u67e5\u8be2\u7ed3\u679c\nprint(rows)\nprint(cursor.description) #\u663e\u793a\u67e5\u8be2\u7ed3\u679c\u7684\u5217\u4fe1\u606f\nprint(pd.DataFrame(rows, columns=[x[0] for x in cursor.description])) #\u5c06\u67e5\u8be2\u7ed3\u679c\u8f6c\u6362\u4e3aDataFrame\nimport sqlalchemy as sqlal\ndb = sqlal.create_engine('sqlite:///:mydata.sqlite') #\u521b\u5efa\u5185\u5b58\u4e2d\u7684SQLite\u6570\u636e\u5e93\n</pre> import sqlite3 query = \"\"\"CREATE TABLE test (a VARCHAR(20), b VARCHAR(20), c REAL, d INTEGER); INSERT INTO test VALUES ('one', 'two', 3.0, 4); INSERT INTO test VALUES ('five', 'six', 7.0, 8); INSERT INTO test VALUES ('nine', 'ten', 11.0, 12); \"\"\" con = sqlite3.connect(':memory:') #\u521b\u5efa\u5185\u5b58\u4e2d\u7684SQLite\u6570\u636e\u5e93 con.executescript(query) #\u6267\u884c\u591a\u6761SQL\u8bed\u53e5 con.commit() #\u63d0\u4ea4\u4e8b\u52a1 data = [('Atlanta', 'Georgia', 1.25, 6), ('Tallahassee', 'Florida', 2.6, 3), ('Sacramento', 'California', 1.7, 5)] stmt = \"INSERT INTO test VALUES (?, ?, ?, ?)\" con.executemany(stmt, data) #\u6267\u884c\u591a\u6761SQL\u8bed\u53e5 con.commit() #\u63d0\u4ea4\u4e8b\u52a1 cursor = con.execute('select * from test') #\u6267\u884c\u67e5\u8be2\u8bed\u53e5 rows = cursor.fetchall() #\u83b7\u53d6\u6240\u6709\u67e5\u8be2\u7ed3\u679c print(rows) print(cursor.description) #\u663e\u793a\u67e5\u8be2\u7ed3\u679c\u7684\u5217\u4fe1\u606f print(pd.DataFrame(rows, columns=[x[0] for x in cursor.description])) #\u5c06\u67e5\u8be2\u7ed3\u679c\u8f6c\u6362\u4e3aDataFrame import sqlalchemy as sqlal db = sqlal.create_engine('sqlite:///:mydata.sqlite') #\u521b\u5efa\u5185\u5b58\u4e2d\u7684SQLite\u6570\u636e\u5e93 <pre>[('one', 'two', 3.0, 4), ('five', 'six', 7.0, 8), ('nine', 'ten', 11.0, 12), ('Atlanta', 'Georgia', 1.25, 6), ('Tallahassee', 'Florida', 2.6, 3), ('Sacramento', 'California', 1.7, 5)]\n(('a', None, None, None, None, None, None), ('b', None, None, None, None, None, None), ('c', None, None, None, None, None, None), ('d', None, None, None, None, None, None))\n             a           b      c   d\n0          one         two   3.00   4\n1         five         six   7.00   8\n2         nine         ten  11.00  12\n3      Atlanta     Georgia   1.25   6\n4  Tallahassee     Florida   2.60   3\n5   Sacramento  California   1.70   5\n</pre>"},{"location":"md/daanpy/","title":"\u6587\u672c\u683c\u5f0f\u6570\u636e\u7684\u8bfb\u5199\u00b6","text":""},{"location":"md/daanpy/","title":"\u5206\u5757\u8bfb\u5165\u6587\u672c\u6587\u4ef6\u00b6","text":""},{"location":"md/daanpy/","title":"\u5c06\u6570\u636e\u5199\u5165\u6587\u672c\u683c\u5f0f\u00b6","text":""},{"location":"md/daanpy/","title":"\u4f7f\u7528\u5206\u9694\u683c\u5f0f\u00b6","text":""},{"location":"md/daanpy/#json","title":"JSON\u6570\u636e\u00b6","text":""},{"location":"md/daanpy/#xmlhtml","title":"XML\u548cHTML\uff1a\u7f51\u7edc\u6293\u53d6\u00b6","text":""},{"location":"md/daanpy/#ixmlobjectifyxml","title":"\u4f7f\u7528ixml.objectify\u89e3\u6790XML\u00b6","text":""},{"location":"md/daanpy/","title":"\u4e8c\u8fdb\u5236\u683c\u5f0f\u00b6","text":""},{"location":"md/daanpy/#hdf5","title":"\u4f7f\u7528HDF5\u683c\u5f0f\u00b6","text":""},{"location":"md/daanpy/#excel","title":"\u8bfb\u53d6Excel\u6587\u4ef6\u00b6","text":""},{"location":"md/daanpy/#web-api","title":"\u4e0eWeb API\u4ea4\u4e92\u00b6","text":""},{"location":"md/daanpy/","title":"\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u00b6","text":""},{"location":"md/daanpy2/","title":"\u6570\u636e\u6e05\u6d17\u4e0e\u51c6\u5907","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport numpy as np\n</pre> import pandas as pd import numpy as np In\u00a0[4]: Copied! <pre>string_data = pd.Series(['aardvark', 'artichoke', np.nan, 'avocado'])\nprint(string_data)\nprint(string_data.isnull())\nstring_data[0] = None\nprint(string_data.isnull())\n</pre> string_data = pd.Series(['aardvark', 'artichoke', np.nan, 'avocado']) print(string_data) print(string_data.isnull()) string_data[0] = None print(string_data.isnull()) <pre>0     aardvark\n1    artichoke\n2          NaN\n3      avocado\ndtype: object\n0    False\n1    False\n2     True\n3    False\ndtype: bool\n0     True\n1    False\n2     True\n3    False\ndtype: bool\n</pre> In\u00a0[6]: Copied! <pre>from numpy import nan as NA\ndata = pd.Series([1, NA, 3.5, NA, 7])\nprint(data)\nprint(data.dropna())\nprint(data[data.notnull()])\n</pre> from numpy import nan as NA data = pd.Series([1, NA, 3.5, NA, 7]) print(data) print(data.dropna()) print(data[data.notnull()]) <pre>0    1.0\n1    NaN\n2    3.5\n3    NaN\n4    7.0\ndtype: float64\n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n0    1.0\n2    3.5\n4    7.0\ndtype: float64\n</pre> In\u00a0[8]: Copied! <pre>data = pd.DataFrame([[1., 6.5, 3.], [1., NA, NA], [NA, NA, NA], [NA, 6.5, 3.]])\ncleaned = data.dropna()\nprint(data)\nprint(cleaned)\nprint(data.dropna(how='all'))\ndata[4] = NA\nprint(data)\nprint(data.dropna(axis=1, how='all'))\n</pre> data = pd.DataFrame([[1., 6.5, 3.], [1., NA, NA], [NA, NA, NA], [NA, 6.5, 3.]]) cleaned = data.dropna() print(data) print(cleaned) print(data.dropna(how='all')) data[4] = NA print(data) print(data.dropna(axis=1, how='all')) <pre>     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  6.5  3.0\n     0    1    2\n0  1.0  6.5  3.0\n     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n3  NaN  6.5  3.0\n     0    1    2   4\n0  1.0  6.5  3.0 NaN\n1  1.0  NaN  NaN NaN\n2  NaN  NaN  NaN NaN\n3  NaN  6.5  3.0 NaN\n     0    1    2\n0  1.0  6.5  3.0\n1  1.0  NaN  NaN\n2  NaN  NaN  NaN\n3  NaN  6.5  3.0\n</pre> In\u00a0[10]: Copied! <pre>df = pd.DataFrame(np.random.randn(7, 3))\ndf.iloc[:4, 1] = NA\ndf.iloc[:2, 2] = NA\nprint(df)\nprint(df.dropna())\nprint(df.dropna(thresh=2)) # \u81f3\u5c11\u6709\u4e24\u4e2a\u975eNA\u503c\u7684\u884c\n</pre> df = pd.DataFrame(np.random.randn(7, 3)) df.iloc[:4, 1] = NA df.iloc[:2, 2] = NA print(df) print(df.dropna()) print(df.dropna(thresh=2)) # \u81f3\u5c11\u6709\u4e24\u4e2a\u975eNA\u503c\u7684\u884c <pre>          0         1         2\n0  0.924823       NaN       NaN\n1 -1.001581       NaN       NaN\n2  0.070636       NaN  0.601011\n3 -0.851477       NaN -0.443560\n4 -0.302486 -0.883002  0.306087\n5 -0.778317 -1.343997 -1.104546\n6  2.009433 -1.070997 -0.467373\n          0         1         2\n4 -0.302486 -0.883002  0.306087\n5 -0.778317 -1.343997 -1.104546\n6  2.009433 -1.070997 -0.467373\n          0         1         2\n2  0.070636       NaN  0.601011\n3 -0.851477       NaN -0.443560\n4 -0.302486 -0.883002  0.306087\n5 -0.778317 -1.343997 -1.104546\n6  2.009433 -1.070997 -0.467373\n</pre> In\u00a0[11]: Copied! <pre>print(df.fillna(0)) # \u75280\u586b\u5145NA\u503c\nprint(df.fillna({1: 0.5, 2: 0})) # \u7528\u4e0d\u540c\u7684\u503c\u586b\u5145\u4e0d\u540c\u7684\u5217\n</pre> print(df.fillna(0)) # \u75280\u586b\u5145NA\u503c print(df.fillna({1: 0.5, 2: 0})) # \u7528\u4e0d\u540c\u7684\u503c\u586b\u5145\u4e0d\u540c\u7684\u5217 <pre>          0         1         2\n0  0.924823  0.000000  0.000000\n1 -1.001581  0.000000  0.000000\n2  0.070636  0.000000  0.601011\n3 -0.851477  0.000000 -0.443560\n4 -0.302486 -0.883002  0.306087\n5 -0.778317 -1.343997 -1.104546\n6  2.009433 -1.070997 -0.467373\n          0         1         2\n0  0.924823  0.500000  0.000000\n1 -1.001581  0.500000  0.000000\n2  0.070636  0.500000  0.601011\n3 -0.851477  0.500000 -0.443560\n4 -0.302486 -0.883002  0.306087\n5 -0.778317 -1.343997 -1.104546\n6  2.009433 -1.070997 -0.467373\n</pre> In\u00a0[12]: Copied! <pre>_ = df.fillna(0, inplace=True)\nprint(df) # \u539f\u5730\u4fee\u6539\n</pre> _ = df.fillna(0, inplace=True) print(df) # \u539f\u5730\u4fee\u6539 <pre>          0         1         2\n0  0.924823  0.000000  0.000000\n1 -1.001581  0.000000  0.000000\n2  0.070636  0.000000  0.601011\n3 -0.851477  0.000000 -0.443560\n4 -0.302486 -0.883002  0.306087\n5 -0.778317 -1.343997 -1.104546\n6  2.009433 -1.070997 -0.467373\n</pre> In\u00a0[13]: Copied! <pre>df = pd.DataFrame(np.random.randn(6, 3))\ndf.iloc[2:, 1] = NA\ndf.iloc[4:, 2] = NA\nprint(df)\nprint(df.fillna(method='ffill')) # \u5411\u524d\u586b\u5145\nprint(df.fillna(method='ffill', limit=2)) # \u6700\u591a\u586b\u5145\u4e24\u4e2a\ndata = pd.Series([1., NA, 3.5, NA, 7])\nprint(data.fillna(data.mean())) # \u7528\u5747\u503c\u586b\u5145\n</pre> df = pd.DataFrame(np.random.randn(6, 3)) df.iloc[2:, 1] = NA df.iloc[4:, 2] = NA print(df) print(df.fillna(method='ffill')) # \u5411\u524d\u586b\u5145 print(df.fillna(method='ffill', limit=2)) # \u6700\u591a\u586b\u5145\u4e24\u4e2a data = pd.Series([1., NA, 3.5, NA, 7]) print(data.fillna(data.mean())) # \u7528\u5747\u503c\u586b\u5145 <pre>          0         1         2\n0 -0.153056 -0.053037  1.582065\n1 -0.005950  0.908369  0.288584\n2  0.666006       NaN  0.088508\n3  0.946138       NaN -0.979656\n4  0.409500       NaN       NaN\n5  0.019259       NaN       NaN\n          0         1         2\n0 -0.153056 -0.053037  1.582065\n1 -0.005950  0.908369  0.288584\n2  0.666006  0.908369  0.088508\n3  0.946138  0.908369 -0.979656\n4  0.409500  0.908369 -0.979656\n5  0.019259  0.908369 -0.979656\n          0         1         2\n0 -0.153056 -0.053037  1.582065\n1 -0.005950  0.908369  0.288584\n2  0.666006  0.908369  0.088508\n3  0.946138  0.908369 -0.979656\n4  0.409500       NaN -0.979656\n5  0.019259       NaN -0.979656\n0    1.000000\n1    3.833333\n2    3.500000\n3    3.833333\n4    7.000000\ndtype: float64\n</pre> <pre>/tmp/ipykernel_11760/47257907.py:5: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  print(df.fillna(method='ffill')) # \u5411\u524d\u586b\u5145\n/tmp/ipykernel_11760/47257907.py:6: FutureWarning: DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n  print(df.fillna(method='ffill', limit=2)) # \u6700\u591a\u586b\u5145\u4e24\u4e2a\n</pre>"},{"location":"md/daanpy2/","title":"\u5904\u7406\u7f3a\u5931\u503c\u00b6","text":""},{"location":"md/daanpy2/","title":"\u8fc7\u6ee4\u7f3a\u5931\u503c\u00b6","text":""},{"location":"md/daanpy2/","title":"\u8865\u5168\u7f3a\u5931\u503c\u00b6","text":""},{"location":"md/jieba/","title":"jieba","text":""},{"location":"md/numpy1/","title":"Numpy","text":"In\u00a0[30]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[31]: Copied! <pre>data = np.random.randn(2, 3) #\u751f\u6210\u4e00\u4e2a2\u884c3\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4\nprint(data)\nprint(data.shape) #\u8f93\u51fa\u6570\u7ec4\u7684\u5f62\u72b6\nprint(data.dtype) #\u8f93\u51fa\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b\n</pre> data = np.random.randn(2, 3) #\u751f\u6210\u4e00\u4e2a2\u884c3\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4 print(data) print(data.shape) #\u8f93\u51fa\u6570\u7ec4\u7684\u5f62\u72b6 print(data.dtype) #\u8f93\u51fa\u6570\u7ec4\u7684\u6570\u636e\u7c7b\u578b <pre>[[ 1.64084257  1.73985329 -0.40436881]\n [-1.21210161  0.56489944  0.93753172]]\n(2, 3)\nfloat64\n</pre> <p>\u751f\u6210ndarray</p> In\u00a0[32]: Copied! <pre>data1 = [6, 7.5, 8, 0, 1]\narr1 = np.array(data1) #\u5c06\u5217\u8868\u8f6c\u6362\u4e3andarray\nprint(arr1)\n\ndata2 =[[1, 2, 3, 4], [5, 6, 7, 8]] #\u5c06\u5d4c\u5957\u5217\u8868\u8f6c\u6362\u4e3andarray\narr2 = np.array(data2)\nprint(arr2)\nprint(arr2.ndim)\nprint(arr2.shape)\nprint(arr2.dtype)\n</pre> data1 = [6, 7.5, 8, 0, 1] arr1 = np.array(data1) #\u5c06\u5217\u8868\u8f6c\u6362\u4e3andarray print(arr1)  data2 =[[1, 2, 3, 4], [5, 6, 7, 8]] #\u5c06\u5d4c\u5957\u5217\u8868\u8f6c\u6362\u4e3andarray arr2 = np.array(data2) print(arr2) print(arr2.ndim) print(arr2.shape) print(arr2.dtype) <pre>[6.  7.5 8.  0.  1. ]\n[[1 2 3 4]\n [5 6 7 8]]\n2\n(2, 4)\nint64\n</pre> In\u00a0[33]: Copied! <pre>print(np.zeros(10)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b10\u4e2a0\u7684ndarray\nprint(np.zeros((3, 6))) #\u751f\u6210\u4e00\u4e2a3\u884c6\u5217\u7684ndarray\uff0c\u5143\u7d20\u4e3a0\nprint(np.empty((2, 3, 2))) #\u751f\u6210\u4e00\u4e2a2\u884c3\u52172\u5c42\u7684ndarray\uff0c\u5143\u7d20\u4e3a0\uff0c\u6709\u53ef\u80fd\u4e0d\u5b89\u5168\uff0c\u6709\u65f6\u5019\u8fd4\u56de\u672a\u521d\u59cb\u5316\u7684\u5783\u573e\u6570\u503c\nprint(np.arange(15)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b0\u523014\u7684ndarray\nprint(np.arange(5,8)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b5\u52307\u7684ndarray\nprint(np.arange(5,20,3)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b5\u523019\uff0c\u6b65\u957f\u4e3a3\u7684ndarray\n</pre> print(np.zeros(10)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b10\u4e2a0\u7684ndarray print(np.zeros((3, 6))) #\u751f\u6210\u4e00\u4e2a3\u884c6\u5217\u7684ndarray\uff0c\u5143\u7d20\u4e3a0 print(np.empty((2, 3, 2))) #\u751f\u6210\u4e00\u4e2a2\u884c3\u52172\u5c42\u7684ndarray\uff0c\u5143\u7d20\u4e3a0\uff0c\u6709\u53ef\u80fd\u4e0d\u5b89\u5168\uff0c\u6709\u65f6\u5019\u8fd4\u56de\u672a\u521d\u59cb\u5316\u7684\u5783\u573e\u6570\u503c print(np.arange(15)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b0\u523014\u7684ndarray print(np.arange(5,8)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b5\u52307\u7684ndarray print(np.arange(5,20,3)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b5\u523019\uff0c\u6b65\u957f\u4e3a3\u7684ndarray <pre>[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]\n[[0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0.]\n [0. 0. 0. 0. 0. 0.]]\n[[[440.49722222  33.72222222]\n  [449.73722222  33.72222222]\n  [458.97722222  33.72222222]]\n\n [[458.97722222 403.32222222]\n  [449.73722222 403.32222222]\n  [440.49722222 403.32222222]]]\n[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]\n[5 6 7]\n[ 5  8 11 14 17]\n</pre> <p>ndarray\u7684\u6570\u636e\u7c7b\u578b</p> In\u00a0[34]: Copied! <pre>arr1 = np.array([1, 2, 3], dtype=np.float64) #\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u4e3afloat64\narr2 = np.array([1, 2, 3], dtype=np.int32) #\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u4e3aint32\n\nprint(arr1.dtype)\nprint(arr2.dtype)\n\narr = np.array([1, 2, 3, 4, 5])\nprint(arr.dtype) #\u8f93\u51fa\u5f53\u524d\u6570\u636e\u7c7b\u578b\nfloat_arr = arr.astype(np.float64) #\u5c06\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3afloat64\nprint(float_arr)\nprint(float_arr.dtype)\n</pre> arr1 = np.array([1, 2, 3], dtype=np.float64) #\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u4e3afloat64 arr2 = np.array([1, 2, 3], dtype=np.int32) #\u6307\u5b9a\u6570\u636e\u7c7b\u578b\u4e3aint32  print(arr1.dtype) print(arr2.dtype)  arr = np.array([1, 2, 3, 4, 5]) print(arr.dtype) #\u8f93\u51fa\u5f53\u524d\u6570\u636e\u7c7b\u578b float_arr = arr.astype(np.float64) #\u5c06\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3afloat64 print(float_arr) print(float_arr.dtype) <pre>float64\nint32\nint64\n[1. 2. 3. 4. 5.]\nfloat64\n</pre> <p>\u5982\u679c\u628a\u6d6e\u70b9\u6570\u8f6c\u6362\u4e3a\u6574\u6570\u5219\u5c0f\u6570\u70b9\u540e\u7684\u90e8\u5206\u88ab\u6d88\u9664</p> <p>\u5bf9\u5e94\u5143\u7d20\u9010\u4e2a\u8fdb\u884c\u8fd0\u7b97</p> In\u00a0[35]: Copied! <pre>arr = np.array([[1, 2, 3], [4, 5, 6]])\nprint(arr)\nprint(arr * arr) #\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58\nprint(arr - arr) #\u5bf9\u5e94\u5143\u7d20\u76f8\u51cf\nprint(1 / arr) #\u5bf9\u5e94\u5143\u7d20\u76f8\u9664\nprint(arr ** 2) #\u5bf9\u5e94\u5143\u7d20\u5e73\u65b9\narr2 = np.array([[0, 4, 1], [7, 2, 12]])\nprint(arr2)\nprint(arr2 &gt; arr) #\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\n</pre> arr = np.array([[1, 2, 3], [4, 5, 6]]) print(arr) print(arr * arr) #\u5bf9\u5e94\u5143\u7d20\u76f8\u4e58 print(arr - arr) #\u5bf9\u5e94\u5143\u7d20\u76f8\u51cf print(1 / arr) #\u5bf9\u5e94\u5143\u7d20\u76f8\u9664 print(arr ** 2) #\u5bf9\u5e94\u5143\u7d20\u5e73\u65b9 arr2 = np.array([[0, 4, 1], [7, 2, 12]]) print(arr2) print(arr2 &gt; arr) #\u5bf9\u5e94\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 <pre>[[1 2 3]\n [4 5 6]]\n[[ 1  4  9]\n [16 25 36]]\n[[0 0 0]\n [0 0 0]]\n[[1.         0.5        0.33333333]\n [0.25       0.2        0.16666667]]\n[[ 1  4  9]\n [16 25 36]]\n[[ 0  4  1]\n [ 7  2 12]]\n[[False  True False]\n [ True False  True]]\n</pre> In\u00a0[36]: Copied! <pre>arr = np.arange(10)\nprint(arr)\nprint(arr[5]) #\u7d22\u5f15\u7b2c6\u4e2a\u5143\u7d20\nprint(arr[5:8]) #\u5207\u7247\u7b2c6\u52308\u4e2a\u5143\u7d20\narr[5:8] = 12 #\u5c06\u7b2c6\u52308\u4e2a\u5143\u7d20\u8d4b\u503c\u4e3a12\nprint(arr)\narr_slice = arr[5:8] #\u5c06\u5207\u7247\u8d4b\u503c\u7ed9\u4e00\u4e2a\u65b0\u53d8\u91cf\nprint(arr_slice)\narr_slice[1] = 12345 #\u4fee\u6539\u5207\u7247\u4e2d\u7684\u5143\u7d20\nprint(arr) #\u539f\u6570\u7ec4\u4e5f\u88ab\u4fee\u6539\u4e86\uff0c\u56e0\u4e3a\u5207\u7247\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe\narr_slice[:] = 64 #\u5c06\u5207\u7247\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8d4b\u503c\u4e3a64\nprint(arr) #\u539f\u6570\u7ec4\u4e5f\u88ab\u4fee\u6539\u4e86\n</pre> arr = np.arange(10) print(arr) print(arr[5]) #\u7d22\u5f15\u7b2c6\u4e2a\u5143\u7d20 print(arr[5:8]) #\u5207\u7247\u7b2c6\u52308\u4e2a\u5143\u7d20 arr[5:8] = 12 #\u5c06\u7b2c6\u52308\u4e2a\u5143\u7d20\u8d4b\u503c\u4e3a12 print(arr) arr_slice = arr[5:8] #\u5c06\u5207\u7247\u8d4b\u503c\u7ed9\u4e00\u4e2a\u65b0\u53d8\u91cf print(arr_slice) arr_slice[1] = 12345 #\u4fee\u6539\u5207\u7247\u4e2d\u7684\u5143\u7d20 print(arr) #\u539f\u6570\u7ec4\u4e5f\u88ab\u4fee\u6539\u4e86\uff0c\u56e0\u4e3a\u5207\u7247\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe arr_slice[:] = 64 #\u5c06\u5207\u7247\u4e2d\u7684\u6240\u6709\u5143\u7d20\u8d4b\u503c\u4e3a64 print(arr) #\u539f\u6570\u7ec4\u4e5f\u88ab\u4fee\u6539\u4e86 <pre>[0 1 2 3 4 5 6 7 8 9]\n5\n[5 6 7]\n[ 0  1  2  3  4 12 12 12  8  9]\n[12 12 12]\n[    0     1     2     3     4    12 12345    12     8     9]\n[ 0  1  2  3  4 64 64 64  8  9]\n</pre> <p>\u5982\u679c\u4f20\u5165\u4e86\u4e00\u4e2a\u6570\u503c\u7ed9\u6570\u7ec4\u7684\u5207\u7247\uff0c\u6570\u503c\u88ab\u4f20\u9012\u7ed9\u4e86\u6574\u4e2a\u5207\u7247\uff0c\u533a\u522b\u4e8ePython\u7684\u5185\u5efa\u5217\u8868\uff0c\u6570\u7ec4\u7684\u5207\u7247\u662f\u539f\u6570\u7ec4\u7684\u89c6\u56fe</p> <p>\u5982\u679c\u60f3\u8981\u62f7\u8d1d\uff1a</p> In\u00a0[37]: Copied! <pre>#\u4f7f\u7528copy\u65b9\u6cd5\u521b\u5efa\u5207\u7247\u7684\u526f\u672c\narr_slice = arr[5:8].copy()\narr_slice[1] = 12345\nprint(arr) #\u539f\u6570\u7ec4\u6ca1\u6709\u88ab\u4fee\u6539\n</pre> #\u4f7f\u7528copy\u65b9\u6cd5\u521b\u5efa\u5207\u7247\u7684\u526f\u672c arr_slice = arr[5:8].copy() arr_slice[1] = 12345 print(arr) #\u539f\u6570\u7ec4\u6ca1\u6709\u88ab\u4fee\u6539 <pre>[ 0  1  2  3  4 64 64 64  8  9]\n</pre> In\u00a0[38]: Copied! <pre>names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\ndata = np.random.randn(7, 4) #\u751f\u6210\u4e00\u4e2a7\u884c4\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4\nprint(names)\nprint(data)\nprint(names == 'Bob') #\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u7b49\u4e8e'Bob'\nprint(data[names == 'Bob']) #\u4f7f\u7528\u5e03\u5c14\u503c\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\uff0c\u8fd4\u56de\u5bf9\u5e94\u884c\nprint(data[names == 'Bob', 2:]) #\u8fd4\u56de\u5bf9\u5e94\u884c\u7684\u7b2c3\u5217\u53ca\u4e4b\u540e\u7684\u5217\nprint(data[names == 'Bob', 3]) #\u8fd4\u56de\u5bf9\u5e94\u884c\u7684\u7b2c4\u5217\nprint(data[names != 'Bob']) #\u8fd4\u56de\u4e0d\u7b49\u4e8e'Bob'\u7684\u884c\ncond = names == 'Bob' #\u5c06\u5e03\u5c14\u503c\u6570\u7ec4\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf\nprint(data[~cond]) #\u4f7f\u7528~\u64cd\u4f5c\u7b26\u53d6\u53cd\uff0c\u8fd4\u56de\u4e0d\u7b49\u4e8e'Bob'\u7684\u884c\nmask = (names == 'Bob') | (names == 'Will') #\u4f7f\u7528|\u64cd\u4f5c\u7b26\u8fdb\u884c\u6216\u8fd0\u7b97\nprint(mask)\nprint(data[mask]) #\u8fd4\u56de\u7b49\u4e8e'Bob'\u6216'Will'\u7684\u884c\nprint(data[data &lt; 0]) #\u8fd4\u56de\u6240\u6709\u5c0f\u4e8e0\u7684\u5143\u7d20\n</pre> names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) data = np.random.randn(7, 4) #\u751f\u6210\u4e00\u4e2a7\u884c4\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4 print(names) print(data) print(names == 'Bob') #\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u7b49\u4e8e'Bob' print(data[names == 'Bob']) #\u4f7f\u7528\u5e03\u5c14\u503c\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\uff0c\u8fd4\u56de\u5bf9\u5e94\u884c print(data[names == 'Bob', 2:]) #\u8fd4\u56de\u5bf9\u5e94\u884c\u7684\u7b2c3\u5217\u53ca\u4e4b\u540e\u7684\u5217 print(data[names == 'Bob', 3]) #\u8fd4\u56de\u5bf9\u5e94\u884c\u7684\u7b2c4\u5217 print(data[names != 'Bob']) #\u8fd4\u56de\u4e0d\u7b49\u4e8e'Bob'\u7684\u884c cond = names == 'Bob' #\u5c06\u5e03\u5c14\u503c\u6570\u7ec4\u8d4b\u503c\u7ed9\u4e00\u4e2a\u53d8\u91cf print(data[~cond]) #\u4f7f\u7528~\u64cd\u4f5c\u7b26\u53d6\u53cd\uff0c\u8fd4\u56de\u4e0d\u7b49\u4e8e'Bob'\u7684\u884c mask = (names == 'Bob') | (names == 'Will') #\u4f7f\u7528|\u64cd\u4f5c\u7b26\u8fdb\u884c\u6216\u8fd0\u7b97 print(mask) print(data[mask]) #\u8fd4\u56de\u7b49\u4e8e'Bob'\u6216'Will'\u7684\u884c print(data[data &lt; 0]) #\u8fd4\u56de\u6240\u6709\u5c0f\u4e8e0\u7684\u5143\u7d20 <pre>['Bob' 'Joe' 'Will' 'Bob' 'Will' 'Joe' 'Joe']\n[[ 1.98035889 -0.14063372 -0.5404145  -0.13409905]\n [ 1.11540914 -0.30698031 -0.77362348 -0.01646606]\n [ 0.53920263 -1.23783719  0.5808682  -0.39477602]\n [-0.78932005  1.82488473  0.39211308 -1.83054916]\n [-0.43050898  1.114546    1.07013958 -1.15989066]\n [-0.21114431 -1.83782182  0.36218474 -0.51076513]\n [-1.37259636 -0.86586082  0.14125782  0.84858485]]\n[ True False False  True False False False]\n[[ 1.98035889 -0.14063372 -0.5404145  -0.13409905]\n [-0.78932005  1.82488473  0.39211308 -1.83054916]]\n[[-0.5404145  -0.13409905]\n [ 0.39211308 -1.83054916]]\n[-0.13409905 -1.83054916]\n[[ 1.11540914 -0.30698031 -0.77362348 -0.01646606]\n [ 0.53920263 -1.23783719  0.5808682  -0.39477602]\n [-0.43050898  1.114546    1.07013958 -1.15989066]\n [-0.21114431 -1.83782182  0.36218474 -0.51076513]\n [-1.37259636 -0.86586082  0.14125782  0.84858485]]\n[[ 1.11540914 -0.30698031 -0.77362348 -0.01646606]\n [ 0.53920263 -1.23783719  0.5808682  -0.39477602]\n [-0.43050898  1.114546    1.07013958 -1.15989066]\n [-0.21114431 -1.83782182  0.36218474 -0.51076513]\n [-1.37259636 -0.86586082  0.14125782  0.84858485]]\n[ True False  True  True  True False False]\n[[ 1.98035889 -0.14063372 -0.5404145  -0.13409905]\n [ 0.53920263 -1.23783719  0.5808682  -0.39477602]\n [-0.78932005  1.82488473  0.39211308 -1.83054916]\n [-0.43050898  1.114546    1.07013958 -1.15989066]]\n[-0.14063372 -0.5404145  -0.13409905 -0.30698031 -0.77362348 -0.01646606\n -1.23783719 -0.39477602 -0.78932005 -1.83054916 -0.43050898 -1.15989066\n -0.21114431 -1.83782182 -0.51076513 -1.37259636 -0.86586082]\n</pre> In\u00a0[39]: Copied! <pre>arr = np.empty((8, 4)) #\u751f\u6210\u4e00\u4e2a8\u884c4\u5217\u7684\u7a7a\u6570\u7ec4\nfor i in range(8):\n\tarr[i] = i #\u5c06\u6bcf\u884c\u8d4b\u503c\u4e3a\u884c\u53f7\nprint(arr)\narr2 = arr[[4, 3, 0, 6]] #\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\uff0c\u8fd4\u56de\u6307\u5b9a\u884c\nprint(arr2)\narr3 = arr[[-3, -5, -7]] #\u4f7f\u7528\u8d1f\u6570\u7d22\u5f15\uff0c\u8fd4\u56de\u5012\u6570\u7b2c3\u3001\u7b2c5\u3001\u7b2c7\u884c\nprint(arr3)\narr4 = np.arange(32).reshape((8, 4)) #\u751f\u6210\u4e00\u4e2a8\u884c4\u5217\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u4e3a0\u523031\nprint(arr4)\nprint(arr4[[1, 5, 7, 2], [0, 3, 1, 2]]) #\u8fd4\u56de(1,0)\u3001(5,3)\u3001(7,1)\u3001(2,2)\u4f4d\u7f6e\u7684\u5143\u7d20\nprint(arr4[[1, 5, 7, 2]][:, [0, 3, 1, 2]]) #\u5148\u9009\u53d6\u884c\uff0c\u518d\u9009\u53d6\u5217\n</pre> arr = np.empty((8, 4)) #\u751f\u6210\u4e00\u4e2a8\u884c4\u5217\u7684\u7a7a\u6570\u7ec4 for i in range(8): \tarr[i] = i #\u5c06\u6bcf\u884c\u8d4b\u503c\u4e3a\u884c\u53f7 print(arr) arr2 = arr[[4, 3, 0, 6]] #\u4f7f\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u7d22\u5f15\uff0c\u8fd4\u56de\u6307\u5b9a\u884c print(arr2) arr3 = arr[[-3, -5, -7]] #\u4f7f\u7528\u8d1f\u6570\u7d22\u5f15\uff0c\u8fd4\u56de\u5012\u6570\u7b2c3\u3001\u7b2c5\u3001\u7b2c7\u884c print(arr3) arr4 = np.arange(32).reshape((8, 4)) #\u751f\u6210\u4e00\u4e2a8\u884c4\u5217\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u4e3a0\u523031 print(arr4) print(arr4[[1, 5, 7, 2], [0, 3, 1, 2]]) #\u8fd4\u56de(1,0)\u3001(5,3)\u3001(7,1)\u3001(2,2)\u4f4d\u7f6e\u7684\u5143\u7d20 print(arr4[[1, 5, 7, 2]][:, [0, 3, 1, 2]]) #\u5148\u9009\u53d6\u884c\uff0c\u518d\u9009\u53d6\u5217 <pre>[[0. 0. 0. 0.]\n [1. 1. 1. 1.]\n [2. 2. 2. 2.]\n [3. 3. 3. 3.]\n [4. 4. 4. 4.]\n [5. 5. 5. 5.]\n [6. 6. 6. 6.]\n [7. 7. 7. 7.]]\n[[4. 4. 4. 4.]\n [3. 3. 3. 3.]\n [0. 0. 0. 0.]\n [6. 6. 6. 6.]]\n[[5. 5. 5. 5.]\n [3. 3. 3. 3.]\n [1. 1. 1. 1.]]\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]\n [12 13 14 15]\n [16 17 18 19]\n [20 21 22 23]\n [24 25 26 27]\n [28 29 30 31]]\n[ 4 23 29 10]\n[[ 4  7  5  6]\n [20 23 21 22]\n [28 31 29 30]\n [ 8 11  9 10]]\n</pre> In\u00a0[40]: Copied! <pre>arr = np.arange(15).reshape((3, 5)) #\u751f\u6210\u4e00\u4e2a3\u884c5\u5217\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u4e3a0\u523014\nprint(arr)\nprint(arr.T) #\u8f6c\u7f6e\u6570\u7ec4\narr2 = np.random.randn(6, 3) #\u751f\u6210\u4e00\u4e2a6\u884c3\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4\nprint(arr2)\nprint(np.dot(arr2.T, arr2)) #\u8ba1\u7b97arr2\u7684\u8f6c\u7f6e\u4e0earr2\u7684\u77e9\u9635\u4e58\u79ef  dot\u51fd\u6570\u7528\u4e8e\u77e9\u9635\u4e58\u6cd5\n\narr = np.arange(16).reshape((2, 2, 4)) #\u751f\u6210\u4e00\u4e2a2\u5c422\u884c4\u5217\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u4e3a0\u523015\nprint(arr)\nprint(arr.transpose((1, 0, 2))) #\u6362\u8f74\u64cd\u4f5c\uff0c\u5c06\u7b2c0\u8f74\u548c\u7b2c1\u8f74\u4ea4\u6362\nprint(arr.swapaxes(1, 2)) #\u6362\u8f74\u64cd\u4f5c\uff0c\u5c06\u7b2c1\u8f74\u548c\u7b2c2\u8f74\u4ea4\u6362(\u8fd4\u56de\u7684\u662f\u6570\u636e\u7684\u89c6\u56fe\uff0c\u6ca1\u6709\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236)\n</pre> arr = np.arange(15).reshape((3, 5)) #\u751f\u6210\u4e00\u4e2a3\u884c5\u5217\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u4e3a0\u523014 print(arr) print(arr.T) #\u8f6c\u7f6e\u6570\u7ec4 arr2 = np.random.randn(6, 3) #\u751f\u6210\u4e00\u4e2a6\u884c3\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4 print(arr2) print(np.dot(arr2.T, arr2)) #\u8ba1\u7b97arr2\u7684\u8f6c\u7f6e\u4e0earr2\u7684\u77e9\u9635\u4e58\u79ef  dot\u51fd\u6570\u7528\u4e8e\u77e9\u9635\u4e58\u6cd5  arr = np.arange(16).reshape((2, 2, 4)) #\u751f\u6210\u4e00\u4e2a2\u5c422\u884c4\u5217\u7684\u6570\u7ec4\uff0c\u5143\u7d20\u4e3a0\u523015 print(arr) print(arr.transpose((1, 0, 2))) #\u6362\u8f74\u64cd\u4f5c\uff0c\u5c06\u7b2c0\u8f74\u548c\u7b2c1\u8f74\u4ea4\u6362 print(arr.swapaxes(1, 2)) #\u6362\u8f74\u64cd\u4f5c\uff0c\u5c06\u7b2c1\u8f74\u548c\u7b2c2\u8f74\u4ea4\u6362(\u8fd4\u56de\u7684\u662f\u6570\u636e\u7684\u89c6\u56fe\uff0c\u6ca1\u6709\u5bf9\u6570\u636e\u8fdb\u884c\u590d\u5236) <pre>[[ 0  1  2  3  4]\n [ 5  6  7  8  9]\n [10 11 12 13 14]]\n[[ 0  5 10]\n [ 1  6 11]\n [ 2  7 12]\n [ 3  8 13]\n [ 4  9 14]]\n[[ 0.85564288 -0.04252568 -0.20778933]\n [ 0.54632906  1.16012903 -1.4003428 ]\n [-0.53398872  0.54562641 -1.31735199]\n [ 0.26953311 -0.57490285  0.50903106]\n [ 0.48322556 -0.70564274  0.98810074]\n [-0.13515452  0.7247361  -0.27933006]]\n[[ 1.64016592 -0.28782427  0.41303866]\n [-0.28782427  2.99910336 -3.52685409]\n [ 0.41303866 -3.52685409  5.0530336 ]]\n[[[ 0  1  2  3]\n  [ 4  5  6  7]]\n\n [[ 8  9 10 11]\n  [12 13 14 15]]]\n[[[ 0  1  2  3]\n  [ 8  9 10 11]]\n\n [[ 4  5  6  7]\n  [12 13 14 15]]]\n[[[ 0  4]\n  [ 1  5]\n  [ 2  6]\n  [ 3  7]]\n\n [[ 8 12]\n  [ 9 13]\n  [10 14]\n  [11 15]]]\n</pre> In\u00a0[41]: Copied! <pre>arr = np.arange(10)\nprint(np.sqrt(arr)) #\u8ba1\u7b97\u5e73\u65b9\u6839\nprint(np.exp(arr)) #\u8ba1\u7b97e\u7684\u6307\u6570\u6b21\u5e42\n\nx = np.random.randn(8)\ny = np.random.randn(8)\nprint(x)\nprint(y)\nprint(np.maximum(x, y)) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u8f83\u5927\u503c\u7ec4\u6210\u7684\u65b0\u6570\u7ec4\n\narr = np.random.randn(7) * 5\nprint(arr)\nremainder, whole_part = np.modf(arr) #\u5c06\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u5206\u5f00\nprint(remainder) #\u5c0f\u6570\u90e8\u5206\nprint(whole_part) #\u6574\u6570\u90e8\u5206\nprint(arr) #\u539f\u6570\u7ec4\u6ca1\u6709\u88ab\u4fee\u6539\n</pre> arr = np.arange(10) print(np.sqrt(arr)) #\u8ba1\u7b97\u5e73\u65b9\u6839 print(np.exp(arr)) #\u8ba1\u7b97e\u7684\u6307\u6570\u6b21\u5e42  x = np.random.randn(8) y = np.random.randn(8) print(x) print(y) print(np.maximum(x, y)) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u8f83\u5927\u503c\u7ec4\u6210\u7684\u65b0\u6570\u7ec4  arr = np.random.randn(7) * 5 print(arr) remainder, whole_part = np.modf(arr) #\u5c06\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u5206\u5f00 print(remainder) #\u5c0f\u6570\u90e8\u5206 print(whole_part) #\u6574\u6570\u90e8\u5206 print(arr) #\u539f\u6570\u7ec4\u6ca1\u6709\u88ab\u4fee\u6539 <pre>[0.         1.         1.41421356 1.73205081 2.         2.23606798\n 2.44948974 2.64575131 2.82842712 3.        ]\n[1.00000000e+00 2.71828183e+00 7.38905610e+00 2.00855369e+01\n 5.45981500e+01 1.48413159e+02 4.03428793e+02 1.09663316e+03\n 2.98095799e+03 8.10308393e+03]\n[-0.23709495 -0.38832568  0.07463109 -1.55137234  0.15763095 -0.41989319\n  0.85626961 -0.91794876]\n[ 0.7114246  -1.13200916 -0.22686387 -0.64071955  0.25046985  0.81132538\n  0.60929907  1.14051438]\n[ 0.7114246  -0.38832568  0.07463109 -0.64071955  0.25046985  0.81132538\n  0.85626961  1.14051438]\n[-6.68713146  3.99247098  5.60016076  7.01587543  7.07052105  7.1678285\n  1.59165592]\n[-0.68713146  0.99247098  0.60016076  0.01587543  0.07052105  0.1678285\n  0.59165592]\n[-6.  3.  5.  7.  7.  7.  1.]\n[-6.68713146  3.99247098  5.60016076  7.01587543  7.07052105  7.1678285\n  1.59165592]\n</pre> <p>\u4e00\u4e9b\u53ef\u7528\u7684\u901a\u7528\u51fd\u6570\uff1a</p> In\u00a0[42]: Copied! <pre>np.abs(arr) #\u8ba1\u7b97\u7edd\u5bf9\u503c\nnp.fabs(arr) #\u8ba1\u7b97\u7edd\u5bf9\u503c\nnp.sqrt(arr) #\u8ba1\u7b97\u5e73\u65b9\u6839\nnp.square(arr) #\u8ba1\u7b97\u5e73\u65b9\nnp.exp(arr) #\u8ba1\u7b97e\u7684\u6307\u6570\u6b21\u5e42\nnp.log(arr) #\u8ba1\u7b97\u81ea\u7136\u5bf9\u6570\nnp.log10(arr) #\u8ba1\u7b97\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570\nnp.log2(arr) #\u8ba1\u7b97\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570\nnp.log1p(arr) #\u8ba1\u7b97log(1 + x)\nnp.sign(arr) #\u8ba1\u7b97\u7b26\u53f7\u51fd\u6570\uff0c\u8fd4\u56de-1, 0, 1\nnp.ceil(arr) #\u5411\u4e0a\u53d6\u6574\nnp.floor(arr) #\u5411\u4e0b\u53d6\u6574\nnp.rint(arr) #\u56db\u820d\u4e94\u5165\u53d6\u6574\nnp.modf(arr) #\u5c06\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u5206\u5f00\uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4\nnp.isnan(arr) #\u5224\u65ad\u662f\u5426\u4e3aNaN\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.isfinite(arr) #\u5224\u65ad\u662f\u5426\u4e3a\u6709\u9650\u6570\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.isinf(arr) #\u5224\u65ad\u662f\u5426\u4e3a\u65e0\u7a77\u5927\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.cos(arr) #\u8ba1\u7b97\u4f59\u5f26\nnp.nan_to_num(arr) #\u5c06NaN\u66ff\u6362\u4e3a0\uff0c\u65e0\u7a77\u5927\u66ff\u6362\u4e3a\u6700\u5927\u6709\u9650\u6570\uff0c\u65e0\u7a77\u5c0f\u66ff\u6362\u4e3a\u6700\u5c0f\u6709\u9650\u6570\nnp.logical_not(arr) #\u9010\u5143\u7d20\u53d6\u53cd\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\n</pre> np.abs(arr) #\u8ba1\u7b97\u7edd\u5bf9\u503c np.fabs(arr) #\u8ba1\u7b97\u7edd\u5bf9\u503c np.sqrt(arr) #\u8ba1\u7b97\u5e73\u65b9\u6839 np.square(arr) #\u8ba1\u7b97\u5e73\u65b9 np.exp(arr) #\u8ba1\u7b97e\u7684\u6307\u6570\u6b21\u5e42 np.log(arr) #\u8ba1\u7b97\u81ea\u7136\u5bf9\u6570 np.log10(arr) #\u8ba1\u7b97\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570 np.log2(arr) #\u8ba1\u7b97\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570 np.log1p(arr) #\u8ba1\u7b97log(1 + x) np.sign(arr) #\u8ba1\u7b97\u7b26\u53f7\u51fd\u6570\uff0c\u8fd4\u56de-1, 0, 1 np.ceil(arr) #\u5411\u4e0a\u53d6\u6574 np.floor(arr) #\u5411\u4e0b\u53d6\u6574 np.rint(arr) #\u56db\u820d\u4e94\u5165\u53d6\u6574 np.modf(arr) #\u5c06\u5c0f\u6570\u90e8\u5206\u548c\u6574\u6570\u90e8\u5206\u5206\u5f00\uff0c\u8fd4\u56de\u4e24\u4e2a\u6570\u7ec4 np.isnan(arr) #\u5224\u65ad\u662f\u5426\u4e3aNaN\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.isfinite(arr) #\u5224\u65ad\u662f\u5426\u4e3a\u6709\u9650\u6570\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.isinf(arr) #\u5224\u65ad\u662f\u5426\u4e3a\u65e0\u7a77\u5927\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.cos(arr) #\u8ba1\u7b97\u4f59\u5f26 np.nan_to_num(arr) #\u5c06NaN\u66ff\u6362\u4e3a0\uff0c\u65e0\u7a77\u5927\u66ff\u6362\u4e3a\u6700\u5927\u6709\u9650\u6570\uff0c\u65e0\u7a77\u5c0f\u66ff\u6362\u4e3a\u6700\u5c0f\u6709\u9650\u6570 np.logical_not(arr) #\u9010\u5143\u7d20\u53d6\u53cd\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 <pre>/tmp/ipykernel_2297/208123816.py:3: RuntimeWarning: invalid value encountered in sqrt\n  np.sqrt(arr) #\u8ba1\u7b97\u5e73\u65b9\u6839\n/tmp/ipykernel_2297/208123816.py:6: RuntimeWarning: invalid value encountered in log\n  np.log(arr) #\u8ba1\u7b97\u81ea\u7136\u5bf9\u6570\n/tmp/ipykernel_2297/208123816.py:7: RuntimeWarning: invalid value encountered in log10\n  np.log10(arr) #\u8ba1\u7b97\u4ee510\u4e3a\u5e95\u7684\u5bf9\u6570\n/tmp/ipykernel_2297/208123816.py:8: RuntimeWarning: invalid value encountered in log2\n  np.log2(arr) #\u8ba1\u7b97\u4ee52\u4e3a\u5e95\u7684\u5bf9\u6570\n/tmp/ipykernel_2297/208123816.py:9: RuntimeWarning: invalid value encountered in log1p\n  np.log1p(arr) #\u8ba1\u7b97log(1 + x)\n</pre> Out[42]: <pre>array([False, False, False, False, False, False, False])</pre> <p>\u4e8c\u5143\u901a\u7528\u51fd\u6570\uff1b</p> In\u00a0[43]: Copied! <pre>x = np.array([1, 5, 9, 3.5, 6])\ny = np.array([2, 6, 1, 4.5, 3])\nnp.add(x, y) #\u9010\u5143\u7d20\u76f8\u52a0\nnp.subtract(x, y) #\u9010\u5143\u7d20\u76f8\u51cf\nnp.multiply(x, y) #\u9010\u5143\u7d20\u76f8\u4e58\nnp.divide(x, y) #\u9010\u5143\u7d20\u76f8\u9664\nnp.floor_divide(x, y) #\u9010\u5143\u7d20\u5411\u4e0b\u53d6\u6574\u9664\nnp.power(x, y) #\u9010\u5143\u7d20\u5e42\u8fd0\u7b97\nnp.mod(x, y) #\u9010\u5143\u7d20\u53d6\u6a21\nnp.fmod(x, y) #\u9010\u5143\u7d20\u53d6\u6a21\nnp.copysign(x, y) #\u5c06y\u7684\u7b26\u53f7\u8d4b\u7ed9x\uff0c\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\nnp.greater(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.greater_equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.less(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.less_equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.not_equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.logical_and(x, y) #\u9010\u5143\u7d20\u903b\u8f91\u4e0e\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.logical_or(x, y) #\u9010\u5143\u7d20\u903b\u8f91\u6216\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\nnp.logical_xor(x, y) #\u9010\u5143\u7d20\u903b\u8f91\u5f02\u6216\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\n</pre> x = np.array([1, 5, 9, 3.5, 6]) y = np.array([2, 6, 1, 4.5, 3]) np.add(x, y) #\u9010\u5143\u7d20\u76f8\u52a0 np.subtract(x, y) #\u9010\u5143\u7d20\u76f8\u51cf np.multiply(x, y) #\u9010\u5143\u7d20\u76f8\u4e58 np.divide(x, y) #\u9010\u5143\u7d20\u76f8\u9664 np.floor_divide(x, y) #\u9010\u5143\u7d20\u5411\u4e0b\u53d6\u6574\u9664 np.power(x, y) #\u9010\u5143\u7d20\u5e42\u8fd0\u7b97 np.mod(x, y) #\u9010\u5143\u7d20\u53d6\u6a21 np.fmod(x, y) #\u9010\u5143\u7d20\u53d6\u6a21 np.copysign(x, y) #\u5c06y\u7684\u7b26\u53f7\u8d4b\u7ed9x\uff0c\u8fd4\u56de\u65b0\u7684\u6570\u7ec4 np.greater(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.greater_equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.less(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.less_equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.not_equal(x, y) #\u9010\u5143\u7d20\u6bd4\u8f83\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.logical_and(x, y) #\u9010\u5143\u7d20\u903b\u8f91\u4e0e\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.logical_or(x, y) #\u9010\u5143\u7d20\u903b\u8f91\u6216\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 np.logical_xor(x, y) #\u9010\u5143\u7d20\u903b\u8f91\u5f02\u6216\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 Out[43]: <pre>array([False, False, False, False, False])</pre> In\u00a0[44]: Copied! <pre>points = np.arange(-5, 5, 0.01) #\u751f\u6210\u4e00\u4e2a\u5305\u542b-5\u52305\uff0c\u6b65\u957f\u4e3a0.01\u7684\u6570\u7ec4\n\nxs, ys = np.meshgrid(points, points) #\u751f\u6210\u7f51\u683c\u70b9\u5750\u6807\u77e9\u9635\nprint(xs)\nprint(ys)\n\nz = np.sqrt(xs ** 2 + ys ** 2) #\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb\nprint(z)\n\nimport matplotlib.pyplot as plt\n\nplt.imshow(z, cmap=plt.cm.gray); plt.colorbar() #\u663e\u793a\u56fe\u50cf\nplt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\") #\u6dfb\u52a0\u6807\u9898\nplt.show()\n</pre> points = np.arange(-5, 5, 0.01) #\u751f\u6210\u4e00\u4e2a\u5305\u542b-5\u52305\uff0c\u6b65\u957f\u4e3a0.01\u7684\u6570\u7ec4  xs, ys = np.meshgrid(points, points) #\u751f\u6210\u7f51\u683c\u70b9\u5750\u6807\u77e9\u9635 print(xs) print(ys)  z = np.sqrt(xs ** 2 + ys ** 2) #\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u7684\u8ddd\u79bb print(z)  import matplotlib.pyplot as plt  plt.imshow(z, cmap=plt.cm.gray); plt.colorbar() #\u663e\u793a\u56fe\u50cf plt.title(\"Image plot of $\\sqrt{x^2 + y^2}$ for a grid of values\") #\u6dfb\u52a0\u6807\u9898 plt.show() <pre>[[-5.   -4.99 -4.98 ...  4.97  4.98  4.99]\n [-5.   -4.99 -4.98 ...  4.97  4.98  4.99]\n [-5.   -4.99 -4.98 ...  4.97  4.98  4.99]\n ...\n [-5.   -4.99 -4.98 ...  4.97  4.98  4.99]\n [-5.   -4.99 -4.98 ...  4.97  4.98  4.99]\n [-5.   -4.99 -4.98 ...  4.97  4.98  4.99]]\n[[-5.   -5.   -5.   ... -5.   -5.   -5.  ]\n [-4.99 -4.99 -4.99 ... -4.99 -4.99 -4.99]\n [-4.98 -4.98 -4.98 ... -4.98 -4.98 -4.98]\n ...\n [ 4.97  4.97  4.97 ...  4.97  4.97  4.97]\n [ 4.98  4.98  4.98 ...  4.98  4.98  4.98]\n [ 4.99  4.99  4.99 ...  4.99  4.99  4.99]]\n[[7.07106781 7.06400028 7.05693985 ... 7.04988652 7.05693985 7.06400028]\n [7.06400028 7.05692568 7.04985815 ... 7.04279774 7.04985815 7.05692568]\n [7.05693985 7.04985815 7.04278354 ... 7.03571603 7.04278354 7.04985815]\n ...\n [7.04988652 7.04279774 7.03571603 ... 7.0286414  7.03571603 7.04279774]\n [7.05693985 7.04985815 7.04278354 ... 7.03571603 7.04278354 7.04985815]\n [7.06400028 7.05692568 7.04985815 ... 7.04279774 7.04985815 7.05692568]]\n</pre> In\u00a0[45]: Copied! <pre>xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])\nyarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])\ncond = np.array([True, False, True, True, False])\nresult = np.where(cond, xarr, yarr) #\u6839\u636e\u6761\u4ef6\u9009\u62e9xarr\u6216yarr\u7684\u5143\u7d20\nprint(result)\n\narr = np.random.randn(4, 4) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4\nprint(arr)\nprint(arr &gt; 0) #\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u5927\u4e8e0\nprint(np.where(arr &gt; 0, 2, -2)) #\u6839\u636e\u6761\u4ef6\u9009\u62e92\u6216-2\nprint(np.where(arr &gt; 0, 2, arr)) #\u6839\u636e\u6761\u4ef6\u9009\u62e92\u6216\u539f\u6570\u7ec4\u7684\u5143\u7d20\n</pre> xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5]) yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5]) cond = np.array([True, False, True, True, False]) result = np.where(cond, xarr, yarr) #\u6839\u636e\u6761\u4ef6\u9009\u62e9xarr\u6216yarr\u7684\u5143\u7d20 print(result)  arr = np.random.randn(4, 4) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4 print(arr) print(arr &gt; 0) #\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\uff0c\u8868\u793a\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u5927\u4e8e0 print(np.where(arr &gt; 0, 2, -2)) #\u6839\u636e\u6761\u4ef6\u9009\u62e92\u6216-2 print(np.where(arr &gt; 0, 2, arr)) #\u6839\u636e\u6761\u4ef6\u9009\u62e92\u6216\u539f\u6570\u7ec4\u7684\u5143\u7d20 <pre>[1.1 2.2 1.3 1.4 2.5]\n[[-1.05810338  0.40840437  0.65085905 -1.52221584]\n [-1.41211195 -1.43216308  0.31890844 -0.48538408]\n [-1.08059948 -2.01702599 -0.95373316  0.84718508]\n [ 1.19930587 -0.38397758 -1.126295   -0.93178648]]\n[[False  True  True False]\n [False False  True False]\n [False False False  True]\n [ True False False False]]\n[[-2  2  2 -2]\n [-2 -2  2 -2]\n [-2 -2 -2  2]\n [ 2 -2 -2 -2]]\n[[-1.05810338  2.          2.         -1.52221584]\n [-1.41211195 -1.43216308  2.         -0.48538408]\n [-1.08059948 -2.01702599 -0.95373316  2.        ]\n [ 2.         -0.38397758 -1.126295   -0.93178648]]\n</pre> In\u00a0[46]: Copied! <pre>arr = np.random.randn(5, 4) #\u751f\u6210\u4e00\u4e2a5\u884c4\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4\nprint(arr)\nprint(arr.mean()) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u5e73\u5747\u503c\nprint(np.mean(arr)) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u5e73\u5747\u503c\nprint(arr.sum()) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u548c\nprint(np.sum(arr)) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u548c\nprint(arr.mean(axis=0)) #\u8ba1\u7b97\u6bcf\u5217\u7684\u5e73\u5747\u503c\nprint(arr.sum(axis=1)) #\u8ba1\u7b97\u6bcf\u884c\u7684\u548c\n\narr = np.array([0, 1, 2, 3, 4, 5, 6, 7])\nprint(arr.cumsum()) #\u8ba1\u7b97\u7d2f\u79ef\u548c\uff0c\u4e0d\u4f1a\u805a\u5408\uff0c\u4f1a\u4ea7\u751f\u4e2d\u95f4\u7ed3\u679c\nprint(arr.cumprod()) #\u8ba1\u7b97\u7d2f\u79ef\u79ef\narr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\nprint(arr)\nprint(arr.cumsum(axis=0)) #\u8ba1\u7b97\u6bcf\u5217\u7684\u7d2f\u79ef\u548c\nprint(arr.cumprod(axis=1)) #\u8ba1\u7b97\u6bcf\u884c\u7684\u7d2f\u79ef\u79ef\n</pre> arr = np.random.randn(5, 4) #\u751f\u6210\u4e00\u4e2a5\u884c4\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4 print(arr) print(arr.mean()) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u5e73\u5747\u503c print(np.mean(arr)) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u5e73\u5747\u503c print(arr.sum()) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u548c print(np.sum(arr)) #\u8ba1\u7b97\u6240\u6709\u5143\u7d20\u7684\u548c print(arr.mean(axis=0)) #\u8ba1\u7b97\u6bcf\u5217\u7684\u5e73\u5747\u503c print(arr.sum(axis=1)) #\u8ba1\u7b97\u6bcf\u884c\u7684\u548c  arr = np.array([0, 1, 2, 3, 4, 5, 6, 7]) print(arr.cumsum()) #\u8ba1\u7b97\u7d2f\u79ef\u548c\uff0c\u4e0d\u4f1a\u805a\u5408\uff0c\u4f1a\u4ea7\u751f\u4e2d\u95f4\u7ed3\u679c print(arr.cumprod()) #\u8ba1\u7b97\u7d2f\u79ef\u79ef arr = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) print(arr) print(arr.cumsum(axis=0)) #\u8ba1\u7b97\u6bcf\u5217\u7684\u7d2f\u79ef\u548c print(arr.cumprod(axis=1)) #\u8ba1\u7b97\u6bcf\u884c\u7684\u7d2f\u79ef\u79ef <pre>[[-4.56196045e-01 -1.03258401e+00 -1.02859810e+00  9.39423207e-01]\n [-1.58930551e-01 -1.52660799e+00 -3.79433794e-01 -1.44788821e-02]\n [ 6.05484532e-02 -6.64180771e-01  8.22934619e-01 -5.82553474e-01]\n [ 1.77842639e+00  6.92280340e-01  1.36219508e+00 -7.95597059e-04]\n [ 5.82077114e-01 -8.25182157e-01 -9.18408324e-01 -1.04176122e+00]]\n-0.11959128568847315\n-0.11959128568847315\n-2.391825713769463\n-2.391825713769463\n[ 0.36118507 -0.67125492 -0.0282621  -0.14003319]\n[-1.57795495 -2.07945122 -0.36325117  3.83210621 -2.20327458]\n[ 0  1  3  6 10 15 21 28]\n[0 0 0 0 0 0 0 0]\n[[0 1 2]\n [3 4 5]\n [6 7 8]]\n[[ 0  1  2]\n [ 3  5  7]\n [ 9 12 15]]\n[[  0   0   0]\n [  3  12  60]\n [  6  42 336]]\n</pre> In\u00a0[47]: Copied! <pre>arr = np.random.randn(100) #\u751f\u6210\u4e00\u4e2a\u5305\u542b100\u4e2a\u968f\u673a\u6570\u7684\u6570\u7ec4\nprint((arr &gt; 0).sum()) #\u8ba1\u7b97\u5927\u4e8e0\u7684\u5143\u7d20\u4e2a\u6570\nprint((arr &lt; 0).sum()) #\u8ba1\u7b97\u5c0f\u4e8e0\u7684\u5143\u7d20\u4e2a\u6570\n\nbools = np.array([False, False, True, False])\nprint(bools.any()) #\u5224\u65ad\u662f\u5426\u6709\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u4e3aTrue\nprint(bools.all()) #\u5224\u65ad\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u4e3aTrue\n</pre> arr = np.random.randn(100) #\u751f\u6210\u4e00\u4e2a\u5305\u542b100\u4e2a\u968f\u673a\u6570\u7684\u6570\u7ec4 print((arr &gt; 0).sum()) #\u8ba1\u7b97\u5927\u4e8e0\u7684\u5143\u7d20\u4e2a\u6570 print((arr &lt; 0).sum()) #\u8ba1\u7b97\u5c0f\u4e8e0\u7684\u5143\u7d20\u4e2a\u6570  bools = np.array([False, False, True, False]) print(bools.any()) #\u5224\u65ad\u662f\u5426\u6709\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u4e3aTrue print(bools.all()) #\u5224\u65ad\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u4e3aTrue <pre>51\n49\nTrue\nFalse\n</pre> In\u00a0[48]: Copied! <pre>arr = np.random.randn(6)\nprint(arr)\narr.sort() #\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\nprint(arr)\n\narr = np.random.randn(5, 3) #\u751f\u6210\u4e00\u4e2a5\u884c3\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4\nprint(arr)\narr.sort(1) #\u5bf9\u6bcf\u884c\u8fdb\u884c\u6392\u5e8f\nprint(arr)\narr.sort(0) #\u5bf9\u6bcf\u5217\u8fdb\u884c\u6392\u5e8f\nprint(arr)\n\nlarge_arr = np.random.randn(1000) #\u751f\u6210\u4e00\u4e2a\u5305\u542b1000\u4e2a\u968f\u673a\u6570\u7684\u6570\u7ec4\nlarge_arr.sort() #\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\nprint(large_arr[int(0.05 * len(large_arr))]) #\u83b7\u53d6\u7b2c5\u767e\u5206\u4f4d\u6570\u7684\u503c\n</pre> arr = np.random.randn(6) print(arr) arr.sort() #\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f print(arr)  arr = np.random.randn(5, 3) #\u751f\u6210\u4e00\u4e2a5\u884c3\u5217\u7684\u968f\u673a\u6570\u6570\u7ec4 print(arr) arr.sort(1) #\u5bf9\u6bcf\u884c\u8fdb\u884c\u6392\u5e8f print(arr) arr.sort(0) #\u5bf9\u6bcf\u5217\u8fdb\u884c\u6392\u5e8f print(arr)  large_arr = np.random.randn(1000) #\u751f\u6210\u4e00\u4e2a\u5305\u542b1000\u4e2a\u968f\u673a\u6570\u7684\u6570\u7ec4 large_arr.sort() #\u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f print(large_arr[int(0.05 * len(large_arr))]) #\u83b7\u53d6\u7b2c5\u767e\u5206\u4f4d\u6570\u7684\u503c <pre>[-1.74389245 -1.81873424 -0.29307827  0.70749271 -1.04451242  0.84115949]\n[-1.81873424 -1.74389245 -1.04451242 -0.29307827  0.70749271  0.84115949]\n[[-0.13705867 -0.40960564 -0.75919113]\n [-0.67901445 -0.49249258 -0.3500471 ]\n [ 1.57511107  0.5882187  -1.1146488 ]\n [-0.26101429 -0.39168183 -0.89654198]\n [-0.10381368 -0.4742314  -0.82086332]]\n[[-0.75919113 -0.40960564 -0.13705867]\n [-0.67901445 -0.49249258 -0.3500471 ]\n [-1.1146488   0.5882187   1.57511107]\n [-0.89654198 -0.39168183 -0.26101429]\n [-0.82086332 -0.4742314  -0.10381368]]\n[[-1.1146488  -0.49249258 -0.3500471 ]\n [-0.89654198 -0.4742314  -0.26101429]\n [-0.82086332 -0.40960564 -0.13705867]\n [-0.75919113 -0.39168183 -0.10381368]\n [-0.67901445  0.5882187   1.57511107]]\n-1.7011391243169098\n</pre> In\u00a0[49]: Copied! <pre>names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])\nprint(np.unique(names)) #\u8fd4\u56de\u552f\u4e00\u503c\u7ec4\u6210\u7684\u65b0\u6570\u7ec4\nints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4])\nprint(np.unique(ints)) #\u8fd4\u56de\u552f\u4e00\u503c\u7ec4\u6210\u7684\u65b0\u6570\u7ec4\nprint(sorted(set(names))) #\u4f7f\u7528set\u51fd\u6570\u83b7\u53d6\u552f\u4e00\u503c\uff0c\u518d\u6392\u5e8f\n\nvalues = np.array([6, 0, 0, 3, 2, 5, 6])\nprint(np.in1d(values, [2, 3, 6])) #\u5224\u65advalues\u4e2d\u7684\u5143\u7d20\u662f\u5426\u5728[2,3,6]\u4e2d\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4\n</pre> names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe']) print(np.unique(names)) #\u8fd4\u56de\u552f\u4e00\u503c\u7ec4\u6210\u7684\u65b0\u6570\u7ec4 ints = np.array([3, 3, 3, 2, 2, 1, 1, 4, 4]) print(np.unique(ints)) #\u8fd4\u56de\u552f\u4e00\u503c\u7ec4\u6210\u7684\u65b0\u6570\u7ec4 print(sorted(set(names))) #\u4f7f\u7528set\u51fd\u6570\u83b7\u53d6\u552f\u4e00\u503c\uff0c\u518d\u6392\u5e8f  values = np.array([6, 0, 0, 3, 2, 5, 6]) print(np.in1d(values, [2, 3, 6])) #\u5224\u65advalues\u4e2d\u7684\u5143\u7d20\u662f\u5426\u5728[2,3,6]\u4e2d\uff0c\u8fd4\u56de\u5e03\u5c14\u503c\u6570\u7ec4 <pre>['Bob' 'Joe' 'Will']\n[1 2 3 4]\n['Bob', 'Joe', 'Will']\n[ True False False  True  True False  True]\n</pre> In\u00a0[50]: Copied! <pre>arr = np.arange(10)\nnp.save('some_array', arr) #\u5c06\u6570\u7ec4\u4fdd\u5b58\u5230\u6587\u4ef6some_array.npy\u4e2d\narr2 = np.load('some_array.npy') #\u4ece\u6587\u4ef6some_array.npy\u4e2d\u52a0\u8f7d\u6570\u7ec4\nprint(arr2)\n\narr = np.random.randn(6)\nprint(arr)\nnp.savez('array_archive.npz', a=arr, b=arr) #\u5c06\u591a\u4e2a\u6570\u7ec4\u4fdd\u5b58\u5230\u4e00\u4e2a\u538b\u7f29\u6587\u4ef6\u4e2d\narch = np.load('array_archive.npz') #\u4ece\u538b\u7f29\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u7ec4\nprint(arch['a']) #\u8bbf\u95ee\u4fdd\u5b58\u7684\u6570\u7ec4\nprint(arch['b']) #\u8bbf\u95ee\u4fdd\u5b58\u7684\u6570\u7ec4\n</pre> arr = np.arange(10) np.save('some_array', arr) #\u5c06\u6570\u7ec4\u4fdd\u5b58\u5230\u6587\u4ef6some_array.npy\u4e2d arr2 = np.load('some_array.npy') #\u4ece\u6587\u4ef6some_array.npy\u4e2d\u52a0\u8f7d\u6570\u7ec4 print(arr2)  arr = np.random.randn(6) print(arr) np.savez('array_archive.npz', a=arr, b=arr) #\u5c06\u591a\u4e2a\u6570\u7ec4\u4fdd\u5b58\u5230\u4e00\u4e2a\u538b\u7f29\u6587\u4ef6\u4e2d arch = np.load('array_archive.npz') #\u4ece\u538b\u7f29\u6587\u4ef6\u4e2d\u52a0\u8f7d\u6570\u7ec4 print(arch['a']) #\u8bbf\u95ee\u4fdd\u5b58\u7684\u6570\u7ec4 print(arch['b']) #\u8bbf\u95ee\u4fdd\u5b58\u7684\u6570\u7ec4 <pre>[0 1 2 3 4 5 6 7 8 9]\n[ 2.32802073  0.98967808 -1.31244413 -1.01637524  0.32825724  0.61922737]\n[ 2.32802073  0.98967808 -1.31244413 -1.01637524  0.32825724  0.61922737]\n[ 2.32802073  0.98967808 -1.31244413 -1.01637524  0.32825724  0.61922737]\n</pre> In\u00a0[51]: Copied! <pre>x = np.array([[1, 2, 3], [4, 5, 6]])\ny = np.array([[6, 23], [-1, 7], [8, 9]])\nprint(x)\nprint(y)\nprint(x.dot(y)) #\u77e9\u9635\u4e58\u6cd5\nprint(np.dot(x, y)) #\u77e9\u9635\u4e58\u6cd5\nprint(x @ y) #\u77e9\u9635\u4e58\u6cd5\n\nfrom numpy.linalg import inv, qr\n\nX = np.random.randn(5, 5)\nmat = X.T.dot(X) #\u8ba1\u7b97X\u7684\u8f6c\u7f6e\u4e0eX\u7684\u77e9\u9635\u4e58\u79ef\nprint(mat)\nprint(inv(mat)) #\u8ba1\u7b97\u77e9\u9635\u7684\u9006\nprint(mat.dot(inv(mat))) #\u9a8c\u8bc1\u77e9\u9635\u4e0e\u5176\u9006\u7684\u4e58\u79ef\u4e3a\u5355\u4f4d\u77e9\u9635\nq, r = qr(mat) #\u8fdb\u884cQR\u5206\u89e3\nprint(q)\nprint(r)\n</pre> x = np.array([[1, 2, 3], [4, 5, 6]]) y = np.array([[6, 23], [-1, 7], [8, 9]]) print(x) print(y) print(x.dot(y)) #\u77e9\u9635\u4e58\u6cd5 print(np.dot(x, y)) #\u77e9\u9635\u4e58\u6cd5 print(x @ y) #\u77e9\u9635\u4e58\u6cd5  from numpy.linalg import inv, qr  X = np.random.randn(5, 5) mat = X.T.dot(X) #\u8ba1\u7b97X\u7684\u8f6c\u7f6e\u4e0eX\u7684\u77e9\u9635\u4e58\u79ef print(mat) print(inv(mat)) #\u8ba1\u7b97\u77e9\u9635\u7684\u9006 print(mat.dot(inv(mat))) #\u9a8c\u8bc1\u77e9\u9635\u4e0e\u5176\u9006\u7684\u4e58\u79ef\u4e3a\u5355\u4f4d\u77e9\u9635 q, r = qr(mat) #\u8fdb\u884cQR\u5206\u89e3 print(q) print(r) <pre>[[1 2 3]\n [4 5 6]]\n[[ 6 23]\n [-1  7]\n [ 8  9]]\n[[ 28  64]\n [ 67 181]]\n[[ 28  64]\n [ 67 181]]\n[[ 28  64]\n [ 67 181]]\n[[ 3.62410648  2.22212408 -0.78346438 -1.08716504  0.20845132]\n [ 2.22212408  4.64366783  0.3063736  -2.02083479  0.70122984]\n [-0.78346438  0.3063736   2.01527431 -1.53216889  0.97774037]\n [-1.08716504 -2.02083479 -1.53216889  8.00519938  0.04706392]\n [ 0.20845132  0.70122984  0.97774037  0.04706392  2.17087504]]\n[[ 0.52578779 -0.21348907  0.38189146  0.09151966 -0.15551067]\n [-0.21348907  0.35188657 -0.07080487  0.04665133 -0.06228737]\n [ 0.38189146 -0.07080487  1.08941445  0.24549712 -0.50978238]\n [ 0.09151966  0.04665133  0.24549712  0.19692729 -0.13869583]\n [-0.15551067 -0.06228737 -0.50978238 -0.13869583  0.7283038 ]]\n[[ 1.00000000e+00 -1.56125113e-17  1.52655666e-16  1.73472348e-17\n   0.00000000e+00]\n [-1.80411242e-16  1.00000000e+00 -5.55111512e-17 -4.16333634e-17\n  -1.11022302e-16]\n [-1.38777878e-16 -6.93889390e-18  1.00000000e+00 -2.77555756e-17\n   1.11022302e-16]\n [ 6.85215773e-17  2.34187669e-17  1.04083409e-16  1.00000000e+00\n  -5.55111512e-17]\n [-1.11022302e-16 -2.77555756e-17 -2.22044605e-16 -1.11022302e-16\n   1.00000000e+00]]\n[[-0.81218031  0.47307556 -0.21573924 -0.20284707 -0.16991852]\n [-0.49798907 -0.74157594  0.42478879 -0.13036322 -0.06805821]\n [ 0.17557827 -0.34963627 -0.61563866 -0.39705448 -0.55701304]\n [ 0.2436391   0.28387627  0.52750692 -0.7475457  -0.15154582]\n [-0.04671498 -0.15307963 -0.34020076 -0.47474379  0.79578019]]\n[[-4.46219446 -4.58858101  0.41861064  3.56849309 -0.43678067]\n [ 0.         -3.18053014 -1.88706867  3.78527472 -1.08221187]\n [ 0.          0.         -2.0823704   4.52616545 -1.06273812]\n [ 0.          0.          0.         -4.91427039 -1.58770639]\n [ 0.          0.          0.          0.          1.09264868]]\n</pre> <p>\u5e38\u7528numpy.linalg\u51fd\u6570\uff1a</p> In\u00a0[52]: Copied! <pre>import numpy.linalg as la \nnp.diag(X) #\u63d0\u53d6\u5bf9\u89d2\u7ebf\u5143\u7d20\uff0c\u8fd4\u56de\u4e00\u7ef4\u6570\u7ec4\nnp.diag(np.diag(X)) #\u5c06\u4e00\u7ef4\u6570\u7ec4\u8f6c\u6362\u4e3a\u5bf9\u89d2\u77e9\u9635\nnp.dot(X, X) #\u77e9\u9635\u70b9\u4e58\nnp.trace(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u8ff9\uff0c\u5373\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e4b\u548c\nla.det(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u884c\u5217\u5f0f\nla.eig(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf\nla.svd(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u5947\u5f02\u503c\u5206\u89e3\nla.solve(X, np.eye(5)) #\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u7b49\u4ef7\u4e8einv(X)\nla.lstsq(X, np.eye(5)) #\u8ba1\u7b97\u6700\u5c0f\u4e8c\u4e58\u89e3\n</pre> import numpy.linalg as la  np.diag(X) #\u63d0\u53d6\u5bf9\u89d2\u7ebf\u5143\u7d20\uff0c\u8fd4\u56de\u4e00\u7ef4\u6570\u7ec4 np.diag(np.diag(X)) #\u5c06\u4e00\u7ef4\u6570\u7ec4\u8f6c\u6362\u4e3a\u5bf9\u89d2\u77e9\u9635 np.dot(X, X) #\u77e9\u9635\u70b9\u4e58 np.trace(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u8ff9\uff0c\u5373\u5bf9\u89d2\u7ebf\u5143\u7d20\u4e4b\u548c la.det(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u884c\u5217\u5f0f la.eig(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u7279\u5f81\u503c\u548c\u7279\u5f81\u5411\u91cf la.svd(X) #\u8ba1\u7b97\u77e9\u9635\u7684\u5947\u5f02\u503c\u5206\u89e3 la.solve(X, np.eye(5)) #\u89e3\u7ebf\u6027\u65b9\u7a0b\u7ec4\uff0c\u7b49\u4ef7\u4e8einv(X) la.lstsq(X, np.eye(5)) #\u8ba1\u7b97\u6700\u5c0f\u4e8c\u4e58\u89e3 <pre>/tmp/ipykernel_2297/1135300614.py:10: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\nTo use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n  la.lstsq(X, np.eye(5)) #\u8ba1\u7b97\u6700\u5c0f\u4e8c\u4e58\u89e3\n</pre> Out[52]: <pre>(array([[ 0.16345489, -0.30935633, -0.00363317,  0.31533128,  0.55129115],\n        [-0.34979383,  0.33956777, -0.01878933, -0.32452163,  0.09250545],\n        [-0.14847072,  0.09710836, -0.68684146,  0.63956691,  0.42088459],\n        [-0.37063602, -0.10520303, -0.05440195,  0.18101641,  0.11296919],\n        [ 0.15863349, -0.51531551, -0.08843549, -0.59288156, -0.27974946]]),\n array([], dtype=float64),\n 5,\n array([3.13453315, 2.28891048, 1.78281616, 1.27127728, 0.77468344]))</pre> In\u00a0[53]: Copied! <pre>samples = np.random.normal(size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\nprint(samples)\nfrom numpy.random import randn\nprint(randn(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\n\nprint(np.random.seed(1234)) #\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u751f\u6210\u7684\u968f\u673a\u6570\u76f8\u540c\nprint(np.random.RandomState(1234).randn(10)) #\u751f\u6210\u4e00\u4e2a\u5341\u5143\u7d20\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\n</pre> samples = np.random.normal(size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4 print(samples) from numpy.random import randn print(randn(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4  print(np.random.seed(1234)) #\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u751f\u6210\u7684\u968f\u673a\u6570\u76f8\u540c print(np.random.RandomState(1234).randn(10)) #\u751f\u6210\u4e00\u4e2a\u5341\u5143\u7d20\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4 <pre>[[-1.32394447  1.27104725  1.71144687  0.19060071]\n [-0.67707467  0.6650217  -0.78651107  0.85539345]\n [ 0.74056602  1.01436411 -1.2105531   0.85342553]\n [-0.26891104  0.83437324  0.29345525  0.63362404]]\n[[-0.00809221 -0.29394491  1.40442768  0.19662991]\n [-0.5356608   1.01466235 -0.13719143  0.56030612]\n [-0.86751792  0.44276931 -0.49980499 -0.76927861]\n [ 1.49953772 -1.05878091  0.79703443  0.37213582]]\nNone\n[ 0.47143516 -1.19097569  1.43270697 -0.3126519  -0.72058873  0.88716294\n  0.85958841 -0.6365235   0.01569637 -2.24268495]\n</pre> <p>numpy.random\u7684\u90e8\u5206\u51fd\u6570\uff1a</p> In\u00a0[54]: Copied! <pre>np.random.seed(1234) #\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50\nnp.random.permutation(10) #\u751f\u6210\u4e00\u4e2a0\u52309\u7684\u968f\u673a\u6392\u5217\nnp.random.shuffle(X) #\u5c06\u6570\u7ec4\u5143\u7d20\u968f\u673a\u6253\u4e71\u987a\u5e8f\nnp.random.rand(3, 2) #\u751f\u6210\u4e00\u4e2a3\u884c2\u5217\u7684\u5747\u5300\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\nnp.random.randint(0, 10, (3, 3)) #\u751f\u6210\u4e00\u4e2a3\u884c3\u5217\u76840\u52309\u7684\u968f\u673a\u6574\u6570\u6570\u7ec4\nnp.random.randn(4, 4) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\nnp.random.binomial(10, 0.5, size=10) #\u751f\u6210\u4e00\u4e2a\u5305\u542b10\u4e2a\u5143\u7d20\u7684\u4e8c\u9879\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3an=10\uff0cp=0.5\nnp.random.normal(size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\nnp.random.beta(a=2.0, b=5.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684Beta\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3aa=2.0\uff0cb=5.0\nnp.random.gamma(shape=2.0, scale=2.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684Gamma\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3ashape=2.0\uff0cscale=2.0\nnp.random.poisson(lam=3.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684Poisson\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3alam=3.0\nnp.random.exponential(scale=1.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6307\u6570\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3ascale=1.0\nnp.random.uniform(low=0.0, high=1.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u5747\u5300\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3alow=0.0\uff0chigh=1.0\nnp.random.chisquare(df=2.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u5361\u65b9\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3adf=2.0\n</pre> np.random.seed(1234) #\u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50 np.random.permutation(10) #\u751f\u6210\u4e00\u4e2a0\u52309\u7684\u968f\u673a\u6392\u5217 np.random.shuffle(X) #\u5c06\u6570\u7ec4\u5143\u7d20\u968f\u673a\u6253\u4e71\u987a\u5e8f np.random.rand(3, 2) #\u751f\u6210\u4e00\u4e2a3\u884c2\u5217\u7684\u5747\u5300\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4 np.random.randint(0, 10, (3, 3)) #\u751f\u6210\u4e00\u4e2a3\u884c3\u5217\u76840\u52309\u7684\u968f\u673a\u6574\u6570\u6570\u7ec4 np.random.randn(4, 4) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4 np.random.binomial(10, 0.5, size=10) #\u751f\u6210\u4e00\u4e2a\u5305\u542b10\u4e2a\u5143\u7d20\u7684\u4e8c\u9879\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3an=10\uff0cp=0.5 np.random.normal(size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6807\u51c6\u6b63\u6001\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4 np.random.beta(a=2.0, b=5.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684Beta\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3aa=2.0\uff0cb=5.0 np.random.gamma(shape=2.0, scale=2.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684Gamma\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3ashape=2.0\uff0cscale=2.0 np.random.poisson(lam=3.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684Poisson\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3alam=3.0 np.random.exponential(scale=1.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u6307\u6570\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3ascale=1.0 np.random.uniform(low=0.0, high=1.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u5747\u5300\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3alow=0.0\uff0chigh=1.0 np.random.chisquare(df=2.0, size=(4, 4)) #\u751f\u6210\u4e00\u4e2a4\u884c4\u5217\u7684\u5361\u65b9\u5206\u5e03\u968f\u673a\u6570\u6570\u7ec4\uff0c\u53c2\u6570\u4e3adf=2.0 Out[54]: <pre>array([[2.30154707, 5.54676118, 1.58241709, 0.36113555],\n       [1.34182708, 2.41398791, 1.0896079 , 0.39096286],\n       [3.04502764, 1.56686379, 3.04254334, 1.80056202],\n       [0.23121157, 0.02151064, 0.02662588, 1.20278634]])</pre> In\u00a0[55]: Copied! <pre>import gc\n\ndel mask, mat, names, points, q, r, randn, remainder, result, samples, values, whole_part, x, xarr, xs, y, yarr, ys, z\ngc.collect()\n</pre> import gc  del mask, mat, names, points, q, r, randn, remainder, result, samples, values, whole_part, x, xarr, xs, y, yarr, ys, z gc.collect() Out[55]: <pre>8499</pre> In\u00a0[56]: Copied! <pre>#\u7528random\u6a21\u5757\u5b9e\u73b0\u968f\u673a\u6f2b\u6b65\n\nimport random\n\nposition = 0\nsteps = 1000\nwalk = [position]\nfor i in range(steps):\n\tstep = 1 if random.randint(0, 1) else -1 #\u968f\u673a\u9009\u62e9\u524d\u8fdb\u4e00\u6b65\u6216\u540e\u9000\u4e00\u6b65\n\tposition += step\n\twalk.append(position)\n\nimport matplotlib.pyplot as plt\n\nplt.plot(walk[:100]) #\u7ed8\u5236\u524d100\u6b65\u7684\u968f\u673a\u6f2b\u6b65\u8def\u5f84\nplt.title(\"Random Walk (first 100 steps)\") #\u6dfb\u52a0\u6807\u9898\nplt.show()\n\n#\u7528numpy\u5b9e\u73b0\u968f\u673a\u6f2b\u6b65\n\nnsteps = 1000\ndraws = np.random.randint(0, 2, size=nsteps) #\u751f\u6210\u4e00\u4e2a\u5305\u542b1000\u4e2a0\u62161\u7684\u968f\u673a\u6574\u6570\u6570\u7ec4\nsteps = np.where(draws &gt; 0, 1, -1) #\u5c060\u66ff\u6362\u4e3a-1\uff0c1\u66ff\u6362\u4e3a1\nwalk = steps.cumsum() #\u8ba1\u7b97\u7d2f\u79ef\u548c\uff0c\u5f97\u5230\u968f\u673a\u6f2b\u6b65\u8def\u5f84\n\nprint((np.abs(walk) &gt;= 10).argmax()) #\u8ba1\u7b97\u9996\u6b21\u5230\u8fbe10\u6216-10\u7684\u4f4d\u7f6e\nplt.plot(walk[:100]) #\u7ed8\u5236\u524d100\u6b65\u7684\u968f\u673a\u6f2b\u6b65\u8def\u5f84\nplt.title(\"Random Walk (first 100 steps)\") #\u6dfb\u52a0\u6807\u9898\nplt.show()\n</pre> #\u7528random\u6a21\u5757\u5b9e\u73b0\u968f\u673a\u6f2b\u6b65  import random  position = 0 steps = 1000 walk = [position] for i in range(steps): \tstep = 1 if random.randint(0, 1) else -1 #\u968f\u673a\u9009\u62e9\u524d\u8fdb\u4e00\u6b65\u6216\u540e\u9000\u4e00\u6b65 \tposition += step \twalk.append(position)  import matplotlib.pyplot as plt  plt.plot(walk[:100]) #\u7ed8\u5236\u524d100\u6b65\u7684\u968f\u673a\u6f2b\u6b65\u8def\u5f84 plt.title(\"Random Walk (first 100 steps)\") #\u6dfb\u52a0\u6807\u9898 plt.show()  #\u7528numpy\u5b9e\u73b0\u968f\u673a\u6f2b\u6b65  nsteps = 1000 draws = np.random.randint(0, 2, size=nsteps) #\u751f\u6210\u4e00\u4e2a\u5305\u542b1000\u4e2a0\u62161\u7684\u968f\u673a\u6574\u6570\u6570\u7ec4 steps = np.where(draws &gt; 0, 1, -1) #\u5c060\u66ff\u6362\u4e3a-1\uff0c1\u66ff\u6362\u4e3a1 walk = steps.cumsum() #\u8ba1\u7b97\u7d2f\u79ef\u548c\uff0c\u5f97\u5230\u968f\u673a\u6f2b\u6b65\u8def\u5f84  print((np.abs(walk) &gt;= 10).argmax()) #\u8ba1\u7b97\u9996\u6b21\u5230\u8fbe10\u6216-10\u7684\u4f4d\u7f6e plt.plot(walk[:100]) #\u7ed8\u5236\u524d100\u6b65\u7684\u968f\u673a\u6f2b\u6b65\u8def\u5f84 plt.title(\"Random Walk (first 100 steps)\") #\u6dfb\u52a0\u6807\u9898 plt.show()  <pre>73\n</pre> In\u00a0[57]: Copied! <pre>nwalks = 5000\nnsteps = 1000\ndraws = np.random.randint(0, 2, size=(nwalks, nsteps)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b5000\u884c1000\u5217\u76840\u62161\u7684\u968f\u673a\u6574\u6570\u6570\u7ec4\nsteps = np.where(draws &gt; 0, 1, -1) #\u5c060\u66ff\u6362\u4e3a-1\uff0c1\u66ff\u6362\u4e3a1\nwalks = steps.cumsum(1) #\u8ba1\u7b97\u6bcf\u884c\u7684\u7d2f\u79ef\u548c\uff0c\u5f97\u52305000\u6761\u968f\u673a\u6f2b\u6b65\u8def\u5f84\n\nhits10 = (np.abs(walks) &gt;= 10).any(1) #\u5224\u65ad\u6bcf\u6761\u8def\u5f84\u662f\u5426\u5230\u8fbe10\u6216-10\nprint((np.abs(walks[hits10]) &gt;= 10).argmax(1)) #\u8ba1\u7b97\u6bcf\u6761\u8def\u5f84\u9996\u6b21\u5230\u8fbe10\u6216-10\u7684\u4f4d\u7f6e\nprint(hits10.sum()) #\u8ba1\u7b97\u6709\u591a\u5c11\u6761\u8def\u5f84\u5230\u8fbe10\u6216-10\n\nimport matplotlib.pyplot as plt\n\nplt.plot(walks[0]) #\u7ed8\u5236\u7b2c\u4e00\u6761\u968f\u673a\u6f2b\u6b65\u8def\u5f84\nplt.title(\"Random Walk (first walk)\") #\u6dfb\u52a0\u6807\u9898\nplt.show()\n</pre> nwalks = 5000 nsteps = 1000 draws = np.random.randint(0, 2, size=(nwalks, nsteps)) #\u751f\u6210\u4e00\u4e2a\u5305\u542b5000\u884c1000\u5217\u76840\u62161\u7684\u968f\u673a\u6574\u6570\u6570\u7ec4 steps = np.where(draws &gt; 0, 1, -1) #\u5c060\u66ff\u6362\u4e3a-1\uff0c1\u66ff\u6362\u4e3a1 walks = steps.cumsum(1) #\u8ba1\u7b97\u6bcf\u884c\u7684\u7d2f\u79ef\u548c\uff0c\u5f97\u52305000\u6761\u968f\u673a\u6f2b\u6b65\u8def\u5f84  hits10 = (np.abs(walks) &gt;= 10).any(1) #\u5224\u65ad\u6bcf\u6761\u8def\u5f84\u662f\u5426\u5230\u8fbe10\u6216-10 print((np.abs(walks[hits10]) &gt;= 10).argmax(1)) #\u8ba1\u7b97\u6bcf\u6761\u8def\u5f84\u9996\u6b21\u5230\u8fbe10\u6216-10\u7684\u4f4d\u7f6e print(hits10.sum()) #\u8ba1\u7b97\u6709\u591a\u5c11\u6761\u8def\u5f84\u5230\u8fbe10\u6216-10  import matplotlib.pyplot as plt  plt.plot(walks[0]) #\u7ed8\u5236\u7b2c\u4e00\u6761\u968f\u673a\u6f2b\u6b65\u8def\u5f84 plt.title(\"Random Walk (first walk)\") #\u6dfb\u52a0\u6807\u9898 plt.show() <pre>[123  67  49 ...  75  47  91]\n5000\n</pre>"},{"location":"md/numpy1/#numpy-ndarray","title":"NumPy ndarray\u00b6","text":""},{"location":"md/numpy1/#numpy","title":"Numpy \u6570\u7ec4\u7b97\u672f\u00b6","text":""},{"location":"md/numpy1/","title":"\u57fa\u7840\u7d22\u5f15\u4e0e\u5207\u7247\u00b6","text":""},{"location":"md/numpy1/","title":"\u5e03\u5c14\u7d22\u5f15\u00b6","text":""},{"location":"md/numpy1/","title":"\u795e\u5947\u7d22\u5f15\uff1a\u7528\u6574\u6570\u6570\u7ec4\u8fdb\u884c\u6570\u636e\u7d22\u5f15\u00b6","text":""},{"location":"md/numpy1/","title":"\u6570\u636e\u8f6c\u7f6e\u548c\u6362\u8f74\u00b6","text":""},{"location":"md/numpy1/#ufunc","title":"ufunc\uff1a\u901a\u7528\u51fd\u6570\uff1a\u5feb\u901f\u7684\u9010\u5143\u7d20\u6570\u7ec4\u51fd\u6570\u00b6","text":"<p>\u5728ndarray\u6570\u636e\u4e2d\u8fdb\u884c\u9010\u5143\u7d20\u64cd\u4f5c\u7684\u51fd\u6570\uff0c\u4e00\u4e9b\u51fd\u6570\u63a5\u6536\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u6570\u503c\uff0c\u4ea7\u751f\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u91cf\u6570\u503c\uff0c\u800c\u901a\u7528\u51fd\u6570\u5c31\u662f\u5bf9\u8fd9\u4e9b\u51fd\u6570\u7684\u5411\u91cf\u5316\u5c01\u88c5</p>"},{"location":"md/numpy1/","title":"\u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u9762\u5411\u6570\u7ec4\u7f16\u7a0b\u00b6","text":""},{"location":"md/numpy1/","title":"\u5c06\u6761\u4ef6\u903b\u8f91\u4f5c\u4e3a\u6570\u7ec4\u64cd\u4f5c\u00b6","text":""},{"location":"md/numpy1/","title":"\u6570\u5b66\u4e0e\u7edf\u8ba1\u65b9\u6cd5\u00b6","text":""},{"location":"md/numpy1/","title":"\u5e03\u5c14\u503c\u6570\u7ec4\u7684\u65b9\u6cd5\u00b6","text":""},{"location":"md/numpy1/","title":"\u6392\u5e8f\u00b6","text":""},{"location":"md/numpy1/","title":"\u552f\u4e00\u503c\u4e0e\u5176\u4ed6\u96c6\u5408\u903b\u8f91\u00b6","text":""},{"location":"md/numpy1/","title":"\u4f7f\u7528\u6570\u7ec4\u8fdb\u884c\u6587\u4ef6\u8f93\u5165\u548c\u8f93\u51fa\u00b6","text":""},{"location":"md/numpy1/","title":"\u7ebf\u6027\u4ee3\u6570\u00b6","text":""},{"location":"md/numpy1/","title":"\u4f2a\u968f\u673a\u6570\u751f\u6210\u00b6","text":""},{"location":"md/numpy1/","title":"\u793a\u4f8b\uff1a\u968f\u673a\u6f2b\u6b65\u00b6","text":""},{"location":"md/numpy1/","title":"\u4e00\u6b21\u6027\u6a21\u62df\u591a\u6b21\u968f\u673a\u6f2b\u6b65\u00b6","text":""},{"location":"md/pandas1/","title":"pandas","text":"In\u00a0[276]: Copied! <pre>import pandas as pd\nimport numpy as np\n</pre> import pandas as pd import numpy as np In\u00a0[277]: Copied! <pre>obj = pd.Series([4, 7, -5, 3])\nprint(obj) #\u5de6\u8fb9\u662f\u7d22\u5f15\uff0c\u53f3\u8fb9\u662f\u503c\nprint(obj.values) #\u503c\nprint(obj.index) #\u7d22\u5f15\n\nobj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c'])\nprint(obj2)\nprint(obj2.index)\n\nprint(obj2['a']) #\u901a\u8fc7\u7d22\u5f15\u53d6\u503c\nobj2['d'] = 6 #\u901a\u8fc7\u7d22\u5f15\u8d4b\u503c\nprint(obj2[['c', 'a', 'd']]) #\u901a\u8fc7\u7d22\u5f15\u5217\u8868\u53d6\u503c\n</pre> obj = pd.Series([4, 7, -5, 3]) print(obj) #\u5de6\u8fb9\u662f\u7d22\u5f15\uff0c\u53f3\u8fb9\u662f\u503c print(obj.values) #\u503c print(obj.index) #\u7d22\u5f15  obj2 = pd.Series([4, 7, -5, 3], index=['d', 'b', 'a', 'c']) print(obj2) print(obj2.index)  print(obj2['a']) #\u901a\u8fc7\u7d22\u5f15\u53d6\u503c obj2['d'] = 6 #\u901a\u8fc7\u7d22\u5f15\u8d4b\u503c print(obj2[['c', 'a', 'd']]) #\u901a\u8fc7\u7d22\u5f15\u5217\u8868\u53d6\u503c <pre>0    4\n1    7\n2   -5\n3    3\ndtype: int64\n[ 4  7 -5  3]\nRangeIndex(start=0, stop=4, step=1)\nd    4\nb    7\na   -5\nc    3\ndtype: int64\nIndex(['d', 'b', 'a', 'c'], dtype='object')\n-5\nc    3\na   -5\nd    6\ndtype: int64\n</pre> In\u00a0[278]: Copied! <pre>print(obj2[obj2 &gt; 0]) #\u5e03\u5c14\u578b\u7d22\u5f15\nprint(obj2 * 2) #\u7b97\u672f\u8fd0\u7b97\nprint(np.exp(obj2)) #numpy\u51fd\u6570\n\nprint('b' in obj2) #\u68c0\u67e5\u7d22\u5f15\u662f\u5426\u5b58\u5728\n\nsdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000} #\u5b57\u5178\u521b\u5efaSeries\nobj3 = pd.Series(sdata)\nprint(obj3)\n</pre> print(obj2[obj2 &gt; 0]) #\u5e03\u5c14\u578b\u7d22\u5f15 print(obj2 * 2) #\u7b97\u672f\u8fd0\u7b97 print(np.exp(obj2)) #numpy\u51fd\u6570  print('b' in obj2) #\u68c0\u67e5\u7d22\u5f15\u662f\u5426\u5b58\u5728  sdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000} #\u5b57\u5178\u521b\u5efaSeries obj3 = pd.Series(sdata) print(obj3) <pre>d    6\nb    7\nc    3\ndtype: int64\nd    12\nb    14\na   -10\nc     6\ndtype: int64\nd     403.428793\nb    1096.633158\na       0.006738\nc      20.085537\ndtype: float64\nTrue\nOhio      35000\nTexas     71000\nOregon    16000\nUtah       5000\ndtype: int64\n</pre> In\u00a0[279]: Copied! <pre>states = ['California', 'Ohio', 'Oregon', 'Texas'] #\u6307\u5b9a\u7d22\u5f15\u521b\u5efaSeries\nobj4 = pd.Series(sdata, index=states)\nprint(obj4) #\u7f3a\u5931\u503c\u4e3aNaN\nprint(pd.isnull(obj4)) #\u68c0\u67e5\u7f3a\u5931\u503c\nprint(pd.notnull(obj4)) #\u68c0\u67e5\u975e\u7f3a\u5931\u503c\nprint(obj3 + obj4) #\u7b97\u672f\u8fd0\u7b97\uff0c\u7d22\u5f15\u5bf9\u9f50\n\nobj4.name = 'population' #\u8bbe\u7f6ename\u5c5e\u6027\nobj4.index.name = 'state' #\u8bbe\u7f6eindex\u7684name\u5c5e\u6027\nprint(obj4)\n</pre> states = ['California', 'Ohio', 'Oregon', 'Texas'] #\u6307\u5b9a\u7d22\u5f15\u521b\u5efaSeries obj4 = pd.Series(sdata, index=states) print(obj4) #\u7f3a\u5931\u503c\u4e3aNaN print(pd.isnull(obj4)) #\u68c0\u67e5\u7f3a\u5931\u503c print(pd.notnull(obj4)) #\u68c0\u67e5\u975e\u7f3a\u5931\u503c print(obj3 + obj4) #\u7b97\u672f\u8fd0\u7b97\uff0c\u7d22\u5f15\u5bf9\u9f50  obj4.name = 'population' #\u8bbe\u7f6ename\u5c5e\u6027 obj4.index.name = 'state' #\u8bbe\u7f6eindex\u7684name\u5c5e\u6027 print(obj4) <pre>California        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\ndtype: float64\nCalifornia     True\nOhio          False\nOregon        False\nTexas         False\ndtype: bool\nCalifornia    False\nOhio           True\nOregon         True\nTexas          True\ndtype: bool\nCalifornia         NaN\nOhio           70000.0\nOregon         32000.0\nTexas         142000.0\nUtah               NaN\ndtype: float64\nstate\nCalifornia        NaN\nOhio          35000.0\nOregon        16000.0\nTexas         71000.0\nName: population, dtype: float64\n</pre> In\u00a0[280]: Copied! <pre>obj.index = ['Bob', 'Steve', 'Jeff', 'Ryan'] #\u4fee\u6539\u7d22\u5f15\nprint(obj)\n</pre>  obj.index = ['Bob', 'Steve', 'Jeff', 'Ryan'] #\u4fee\u6539\u7d22\u5f15 print(obj) <pre>Bob      4\nSteve    7\nJeff    -5\nRyan     3\ndtype: int64\n</pre> In\u00a0[281]: Copied! <pre>data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'],\n\t\t'year': [2000, 2001, 2002, 2001, 2002, 2003],\n\t\t'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]}\nframe = pd.DataFrame(data) #\u5b57\u5178\u521b\u5efaDataFrame\nprint(frame)\nprint(frame.head()) #\u524d\u4e94\u884c\nprint(frame.tail(3)) #\u540e3\u884c\n</pre> data = {'state': ['Ohio', 'Ohio', 'Ohio', 'Nevada', 'Nevada', 'Nevada'], \t\t'year': [2000, 2001, 2002, 2001, 2002, 2003], \t\t'pop': [1.5, 1.7, 3.6, 2.4, 2.9, 3.2]} frame = pd.DataFrame(data) #\u5b57\u5178\u521b\u5efaDataFrame print(frame) print(frame.head()) #\u524d\u4e94\u884c print(frame.tail(3)) #\u540e3\u884c <pre>    state  year  pop\n0    Ohio  2000  1.5\n1    Ohio  2001  1.7\n2    Ohio  2002  3.6\n3  Nevada  2001  2.4\n4  Nevada  2002  2.9\n5  Nevada  2003  3.2\n    state  year  pop\n0    Ohio  2000  1.5\n1    Ohio  2001  1.7\n2    Ohio  2002  3.6\n3  Nevada  2001  2.4\n4  Nevada  2002  2.9\n    state  year  pop\n3  Nevada  2001  2.4\n4  Nevada  2002  2.9\n5  Nevada  2003  3.2\n</pre> In\u00a0[282]: Copied! <pre>print(pd.DataFrame(data, columns=['year', 'state', 'pop'])) #\u6307\u5b9a\u5217\u987a\u5e8f\nframe2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'], index=['one', 'two', 'three', 'four', 'five', 'six']) #\u6307\u5b9a\u5217\u987a\u5e8f\u548c\u7d22\u5f15\nprint(frame2)\n\nprint(frame.columns) #\u5217\u540d\n</pre> print(pd.DataFrame(data, columns=['year', 'state', 'pop'])) #\u6307\u5b9a\u5217\u987a\u5e8f frame2 = pd.DataFrame(data, columns=['year', 'state', 'pop', 'debt'], index=['one', 'two', 'three', 'four', 'five', 'six']) #\u6307\u5b9a\u5217\u987a\u5e8f\u548c\u7d22\u5f15 print(frame2)  print(frame.columns) #\u5217\u540d <pre>   year   state  pop\n0  2000    Ohio  1.5\n1  2001    Ohio  1.7\n2  2002    Ohio  3.6\n3  2001  Nevada  2.4\n4  2002  Nevada  2.9\n5  2003  Nevada  3.2\n       year   state  pop debt\none    2000    Ohio  1.5  NaN\ntwo    2001    Ohio  1.7  NaN\nthree  2002    Ohio  3.6  NaN\nfour   2001  Nevada  2.4  NaN\nfive   2002  Nevada  2.9  NaN\nsix    2003  Nevada  3.2  NaN\nIndex(['state', 'year', 'pop'], dtype='object')\n</pre> In\u00a0[283]: Copied! <pre>print(frame2['state']) #\u53d6\u5217\nprint(frame2.year) #\u53d6\u5217\n\nprint(frame2.loc['three']) #\u6309\u6807\u7b7e\u53d6\u884c\n</pre> print(frame2['state']) #\u53d6\u5217 print(frame2.year) #\u53d6\u5217  print(frame2.loc['three']) #\u6309\u6807\u7b7e\u53d6\u884c <pre>one        Ohio\ntwo        Ohio\nthree      Ohio\nfour     Nevada\nfive     Nevada\nsix      Nevada\nName: state, dtype: object\none      2000\ntwo      2001\nthree    2002\nfour     2001\nfive     2002\nsix      2003\nName: year, dtype: int64\nyear     2002\nstate    Ohio\npop       3.6\ndebt      NaN\nName: three, dtype: object\n</pre> In\u00a0[284]: Copied! <pre>frame2['debt'] = 16.5 #\u8d4b\u503c\nprint(frame2)\nframe2['debt'] = np.arange(6.)\nprint(frame2)\n</pre> frame2['debt'] = 16.5 #\u8d4b\u503c print(frame2) frame2['debt'] = np.arange(6.) print(frame2) <pre>       year   state  pop  debt\none    2000    Ohio  1.5  16.5\ntwo    2001    Ohio  1.7  16.5\nthree  2002    Ohio  3.6  16.5\nfour   2001  Nevada  2.4  16.5\nfive   2002  Nevada  2.9  16.5\nsix    2003  Nevada  3.2  16.5\n       year   state  pop  debt\none    2000    Ohio  1.5   0.0\ntwo    2001    Ohio  1.7   1.0\nthree  2002    Ohio  3.6   2.0\nfour   2001  Nevada  2.4   3.0\nfive   2002  Nevada  2.9   4.0\nsix    2003  Nevada  3.2   5.0\n</pre> In\u00a0[285]: Copied! <pre>val = pd.Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five'])\nframe2['debt'] = val #\u6309\u7d22\u5f15\u8d4b\u503c\nprint(frame2)\n\nframe2['eastern'] = frame2.state == 'Ohio' #\u5e03\u5c14\u578b\u5217\nprint(frame2)\ndel frame2['eastern'] #\u5220\u9664\u5217\nprint(frame2.columns) #\u5217\u540d\n</pre> val = pd.Series([-1.2, -1.5, -1.7], index=['two', 'four', 'five']) frame2['debt'] = val #\u6309\u7d22\u5f15\u8d4b\u503c print(frame2)  frame2['eastern'] = frame2.state == 'Ohio' #\u5e03\u5c14\u578b\u5217 print(frame2) del frame2['eastern'] #\u5220\u9664\u5217 print(frame2.columns) #\u5217\u540d <pre>       year   state  pop  debt\none    2000    Ohio  1.5   NaN\ntwo    2001    Ohio  1.7  -1.2\nthree  2002    Ohio  3.6   NaN\nfour   2001  Nevada  2.4  -1.5\nfive   2002  Nevada  2.9  -1.7\nsix    2003  Nevada  3.2   NaN\n       year   state  pop  debt  eastern\none    2000    Ohio  1.5   NaN     True\ntwo    2001    Ohio  1.7  -1.2     True\nthree  2002    Ohio  3.6   NaN     True\nfour   2001  Nevada  2.4  -1.5    False\nfive   2002  Nevada  2.9  -1.7    False\nsix    2003  Nevada  3.2   NaN    False\nIndex(['year', 'state', 'pop', 'debt'], dtype='object')\n</pre> In\u00a0[286]: Copied! <pre>pop = {'Nevada': {2001: 2.4, 2002: 2.9},\n\t   'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}}\nframe3 = pd.DataFrame(pop) #\u5d4c\u5957\u5b57\u5178\u521b\u5efaDataFrame\nprint(frame3)\nprint(frame3.T) #\u8f6c\u7f6e\n\npdata = {'Ohio': frame3['Ohio'][:-1], 'Nevada': frame3['Nevada'][:2]} #\u901a\u8fc7\u5217\u521b\u5efaDataFrame\nprint(pd.DataFrame(pdata))\n\nframe3.index.name = 'year' #\u8bbe\u7f6eindex\u7684name\u5c5e\u6027\nframe3.columns.name = 'state' #\u8bbe\u7f6ecolumns\u7684name\u5c5e\u6027\nprint(frame3)\n\nprint(frame3.values) #\u4e8c\u7ef4ndarray\nprint(frame3.values.dtype) #\u503c\u7684\u7c7b\u578b\nprint(frame2.values) #\u4e8c\u7ef4ndarray\uff0c\u7c7b\u578b\u4e0d\u540c\u4f1a\u8f6c\u6362\u6210object\nprint(frame2.values.dtype) #\u503c\u7684\u7c7b\u578b\n</pre> pop = {'Nevada': {2001: 2.4, 2002: 2.9}, \t   'Ohio': {2000: 1.5, 2001: 1.7, 2002: 3.6}} frame3 = pd.DataFrame(pop) #\u5d4c\u5957\u5b57\u5178\u521b\u5efaDataFrame print(frame3) print(frame3.T) #\u8f6c\u7f6e  pdata = {'Ohio': frame3['Ohio'][:-1], 'Nevada': frame3['Nevada'][:2]} #\u901a\u8fc7\u5217\u521b\u5efaDataFrame print(pd.DataFrame(pdata))  frame3.index.name = 'year' #\u8bbe\u7f6eindex\u7684name\u5c5e\u6027 frame3.columns.name = 'state' #\u8bbe\u7f6ecolumns\u7684name\u5c5e\u6027 print(frame3)  print(frame3.values) #\u4e8c\u7ef4ndarray print(frame3.values.dtype) #\u503c\u7684\u7c7b\u578b print(frame2.values) #\u4e8c\u7ef4ndarray\uff0c\u7c7b\u578b\u4e0d\u540c\u4f1a\u8f6c\u6362\u6210object print(frame2.values.dtype) #\u503c\u7684\u7c7b\u578b <pre>      Nevada  Ohio\n2001     2.4   1.7\n2002     2.9   3.6\n2000     NaN   1.5\n        2001  2002  2000\nNevada   2.4   2.9   NaN\nOhio     1.7   3.6   1.5\n      Ohio  Nevada\n2001   1.7     2.4\n2002   3.6     2.9\nstate  Nevada  Ohio\nyear               \n2001      2.4   1.7\n2002      2.9   3.6\n2000      NaN   1.5\n[[2.4 1.7]\n [2.9 3.6]\n [nan 1.5]]\nfloat64\n[[2000 'Ohio' 1.5 nan]\n [2001 'Ohio' 1.7 -1.2]\n [2002 'Ohio' 3.6 nan]\n [2001 'Nevada' 2.4 -1.5]\n [2002 'Nevada' 2.9 -1.7]\n [2003 'Nevada' 3.2 nan]]\nobject\n</pre> <p>DataFrame\u6784\u9020\u51fd\u6570\u7684\u6709\u6548\u8f93\u5165\u53ef\u4ee5\u6709\uff1a</p> <ul> <li>2D ndarray\uff1a\u6570\u636e\u7684\u77e9\u9635\uff0c\u884c\u548c\u5217\u7684\u6807\u7b7e\u662f\u53ef\u9009\u53c2\u6570</li> <li>\u6570\u7ec4\u3001\u5217\u8868\u548c\u5143\u7ec4\u6784\u6210\u7684\u5b57\u5178\uff1a\u6bcf\u4e2a\u5e8f\u5217\u6210\u4e3aDataFrame\u7684\u4e00\u5217\uff0c\u6240\u6709\u5e8f\u5217\u5fc5\u987b\u957f\u5ea6\u76f8\u7b49</li> <li>NumPy\u7ed3\u6784\u5316/\u8bb0\u5f55\u5316\u6570\u7ec4\uff1a\u4e0e\u6570\u7ec4\u6784\u6210\u7684\u5b57\u5178\u4e00\u81f4</li> <li>Series\u6784\u6210\u7684\u5b57\u5178\uff1a\u6bcf\u4e2a\u503c\u6210\u4e3a\u4e00\u5217\uff0c\u6bcf\u4e2aSeries\u7684\u7d22\u5f15\u8054\u5408\u8d77\u6765 \u5f62\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15\uff0c\u4e5f\u53ef\u4ee5\u663e\u5f0f\u5730\u4f20\u9012\u5e8f\u5217</li> <li>\u5b57\u5178\u6784\u6210\u7684\u5b57\u5178\uff1a\u6bcf\u4e2a\u5185\u90e8\u5b57\u5178\u6210\u4e3a\u4e00\u5217\uff0c\u952e\u8054\u5408\u8d77\u6765\u5f62\u6210\u7ed3\u679c\u7684\u884c\u7d22\u5f15</li> <li>\u5b57\u5178\u6216Series\u6784\u6210\u7684\u5217\u8868\uff1a\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u5f62\u6210DataFrame\u7684\u4e00\u884c\uff0c\u5b57\u5178\u952e\u6216Series\u7d22\u5f15\u8054\u5408\u8d77\u6765\u5f62\u6210DataFrame\u7684\u5217\u6807\u7b7e</li> <li>\u5217\u8868\u6216\u5143\u7ec4\u6784\u6210\u7684\u5217\u8868\uff1a\u4e0e\u4e8c\u7ef4\u6570\u7ec4\u7684\u60c5\u51b5\u4e00\u81f4</li> <li>\u5176\u4ed6DataFrame\uff1a\u5982\u679c\u4e0d\u663e\u793a\u4f20\u9012\u7d22\u5f15\uff0c\u5219\u4f1a\u4f7f\u7528\u539fDatraFrame\u7684\u7d22\u5f15</li> <li>NumPy MaskedArray\uff1a\u548c\u4e8c\u7ef4\u6570\u7ec4\u7684\u60c5\u51b5\u7c7b\u4f3c\u4f46\u9690\u85cf\u5236\u4f1a\u5728\u7ed3\u679c\u4e2d\u6210\u4e3a\u7f3a\u5931\u503c</li> </ul> In\u00a0[287]: Copied! <pre>obj = pd.Series(range(3), index=['a', 'b', 'c'])\nindex = obj.index\nprint(obj)\nprint(index)\nprint(index[1:]) #\u7d22\u5f15\u5207\u7247\nprint(index[1]) #\u5355\u4e2a\u7d22\u5f15\n# index[1] = 'd' #\u7d22\u5f15\u4e0d\u53ef\u4fee\u6539\uff0c\u4e0d\u53d8\u6027\u66f4\u5b89\u5168\nlables = pd.Index(np.arange(3)) #\u521b\u5efaIndex\u5bf9\u8c61\nprint(lables)\nobj2 = pd.Series([1.5, -2.5, 0], index=lables)\nprint(obj2)\nprint(obj2.index is lables) #obj2\u7684\u7d22\u5f15\u5c31\u662flables\n</pre> obj = pd.Series(range(3), index=['a', 'b', 'c']) index = obj.index print(obj) print(index) print(index[1:]) #\u7d22\u5f15\u5207\u7247 print(index[1]) #\u5355\u4e2a\u7d22\u5f15 # index[1] = 'd' #\u7d22\u5f15\u4e0d\u53ef\u4fee\u6539\uff0c\u4e0d\u53d8\u6027\u66f4\u5b89\u5168 lables = pd.Index(np.arange(3)) #\u521b\u5efaIndex\u5bf9\u8c61 print(lables) obj2 = pd.Series([1.5, -2.5, 0], index=lables) print(obj2) print(obj2.index is lables) #obj2\u7684\u7d22\u5f15\u5c31\u662flables <pre>a    0\nb    1\nc    2\ndtype: int64\nIndex(['a', 'b', 'c'], dtype='object')\nIndex(['b', 'c'], dtype='object')\nb\nIndex([0, 1, 2], dtype='int64')\n0    1.5\n1   -2.5\n2    0.0\ndtype: float64\nTrue\n</pre> In\u00a0[288]: Copied! <pre>#\u9664\u4e86\u7c7b\u4f3c\u6570\u7ec4\uff0c\u7d22\u5f15\u5bf9\u8c61\u4e5f\u50cf\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u96c6\u5408\nprint(frame3)\nprint('Ohio' in frame3.columns) #\u68c0\u67e5\u5217\u540d\u662f\u5426\u5b58\u5728\nprint(2003 in frame3.index) #\u68c0\u67e5\u884c\u7d22\u5f15\u662f\u5426\u5b58\u5728\ndup_lables = pd.Index(['foo', 'foo', 'bar', 'bar']) #\u91cd\u590d\u7d22\u5f15\nprint(dup_lables)\n</pre> #\u9664\u4e86\u7c7b\u4f3c\u6570\u7ec4\uff0c\u7d22\u5f15\u5bf9\u8c61\u4e5f\u50cf\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u96c6\u5408 print(frame3) print('Ohio' in frame3.columns) #\u68c0\u67e5\u5217\u540d\u662f\u5426\u5b58\u5728 print(2003 in frame3.index) #\u68c0\u67e5\u884c\u7d22\u5f15\u662f\u5426\u5b58\u5728 dup_lables = pd.Index(['foo', 'foo', 'bar', 'bar']) #\u91cd\u590d\u7d22\u5f15 print(dup_lables) <pre>state  Nevada  Ohio\nyear               \n2001      2.4   1.7\n2002      2.9   3.6\n2000      NaN   1.5\nTrue\nFalse\nIndex(['foo', 'foo', 'bar', 'bar'], dtype='object')\n</pre> In\u00a0[289]: Copied! <pre>del obj, obj2, obj3, obj4, frame, frame2, frame3, data, sdata, states, pop, pdata, val, index, lables, dup_lables\n</pre> del obj, obj2, obj3, obj4, frame, frame2, frame3, data, sdata, states, pop, pdata, val, index, lables, dup_lables <p>\u5728Series\u4e2d\u7684reindex()\u51fd\u6570\uff1a</p> In\u00a0[290]: Copied! <pre>obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c'])\nprint(obj)\nobj2 = obj.reindex(['a', 'b', 'c', 'd', 'e']) #\u91cd\u65b0\u7d22\u5f15\uff0c\u7f3a\u5931\u503c\u4e3aNaN\nprint(obj2)\nobj3 = obj.reindex(['a', 'b', 'c', 'd', 'e'], fill_value=0) #\u91cd\u65b0\u7d22\u5f15\uff0c\u7f3a\u5931\u503c\u586b\u51450\nprint(obj3)\nobj4 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4])\nprint(obj4)\nobj4 = obj4.reindex(range(6), method='ffill') #\u91cd\u65b0\u7d22\u5f15\uff0c\u524d\u5411\u586b\u5145\nprint(obj4)\n</pre> obj = pd.Series([4.5, 7.2, -5.3, 3.6], index=['d', 'b', 'a', 'c']) print(obj) obj2 = obj.reindex(['a', 'b', 'c', 'd', 'e']) #\u91cd\u65b0\u7d22\u5f15\uff0c\u7f3a\u5931\u503c\u4e3aNaN print(obj2) obj3 = obj.reindex(['a', 'b', 'c', 'd', 'e'], fill_value=0) #\u91cd\u65b0\u7d22\u5f15\uff0c\u7f3a\u5931\u503c\u586b\u51450 print(obj3) obj4 = pd.Series(['blue', 'purple', 'yellow'], index=[0, 2, 4]) print(obj4) obj4 = obj4.reindex(range(6), method='ffill') #\u91cd\u65b0\u7d22\u5f15\uff0c\u524d\u5411\u586b\u5145 print(obj4) <pre>d    4.5\nb    7.2\na   -5.3\nc    3.6\ndtype: float64\na   -5.3\nb    7.2\nc    3.6\nd    4.5\ne    NaN\ndtype: float64\na   -5.3\nb    7.2\nc    3.6\nd    4.5\ne    0.0\ndtype: float64\n0      blue\n2    purple\n4    yellow\ndtype: object\n0      blue\n1      blue\n2    purple\n3    purple\n4    yellow\n5    yellow\ndtype: object\n</pre> <p>\u5728DataFrame\u4e2d\uff1a</p> In\u00a0[291]: Copied! <pre>frame = pd.DataFrame(np.arange(9).reshape((3, 3)), index=['a', 'c', 'd'], columns=['Ohio', 'Texas', 'California'])\nprint(frame)\nframe2 = frame.reindex(['a', 'b', 'c', 'd']) #\u91cd\u65b0\u7d22\u5f15\u884c\uff0c\u7f3a\u5931\u503c\u4e3aNaN\nprint(frame2)\nstates = ['Texas', 'Utah', 'California']\nframe3 = frame.reindex(columns=states) #\u91cd\u65b0\u7d22\u5f15\u5217\uff0c\u7f3a\u5931\u503c\u4e3aNaN\nprint(frame3)\n</pre> frame = pd.DataFrame(np.arange(9).reshape((3, 3)), index=['a', 'c', 'd'], columns=['Ohio', 'Texas', 'California']) print(frame) frame2 = frame.reindex(['a', 'b', 'c', 'd']) #\u91cd\u65b0\u7d22\u5f15\u884c\uff0c\u7f3a\u5931\u503c\u4e3aNaN print(frame2) states = ['Texas', 'Utah', 'California'] frame3 = frame.reindex(columns=states) #\u91cd\u65b0\u7d22\u5f15\u5217\uff0c\u7f3a\u5931\u503c\u4e3aNaN print(frame3) <pre>   Ohio  Texas  California\na     0      1           2\nc     3      4           5\nd     6      7           8\n   Ohio  Texas  California\na   0.0    1.0         2.0\nb   NaN    NaN         NaN\nc   3.0    4.0         5.0\nd   6.0    7.0         8.0\n   Texas  Utah  California\na      1   NaN           2\nc      4   NaN           5\nd      7   NaN           8\n</pre> <p>reindex\u65b9\u6cd5\u7684\u53c2\u6570\uff1a</p> <ul> <li>index\uff1a\u65b0\u5efa\u4f5c\u4e3a\u7d22\u5f15\u7684\u5e8f\u5217\uff0c\u53ef\u4ee5\u662f\u7d22\u5f15\u5b9e\u4f8b\u6216\u4efb\u610f\u5176\u4ed6\u5e8f\u5217\u578bpython\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u4f7f\u7528\u65f6\u65e0\u9700\u590d\u5236</li> <li>method\uff1a\u63d2\u503c\u65b9\u5f0f\uff1a'ffill'\u4e3a\u524d\u5411\u586b\u5145\uff0c'bfill'\u662f\u540e\u5411\u586b\u5145</li> <li>fill_value\uff1a\u901a\u8fc7\u91cd\u65b0\u7d22\u5f15\u5f15\u5165\u7f3a\u5931\u6570\u636e\u65f6\u4f7f\u7528\u7684\u66ff\u4ee3\u503c</li> <li>limit\uff1a\u5f53\u524d\u5411\u6216\u540e\u5411\u586b\u5145\u65f6\uff0c\u6240\u9700\u586b\u5145\u7684\u6700\u5927\u5c3a\u5bf8\u95f4\u9699\uff08\u4ee5\u5143\u7d20\u6570\u91cf\uff09</li> <li>tolerance\uff1a\u5f53\u524d\u5411\u6216\u540e\u5411\u586b\u5145\u65f6\uff0c\u6240\u9700\u586b\u5145\u7684\u4e0d\u7cbe\u786e\u5339\u914d\u4e0b\u7684\u6700\u5927\u5c3a\u5bf8\u95f4\u9699\uff08\u4ee5\u7edd\u5bf9\u6570\u5b57\u8ddd\u79bb\uff09</li> <li>level\uff1a\u5339\u914dMultiIndex\u7ea7\u522b\u7684\u7b80\u5355\u7d22\u5f15\uff0c\u5426\u5219\u9009\u62e9\u5b50\u96c6</li> <li>copy\uff1a\u5982\u679c\u4e3aTrue\uff0c\u5373\u4f7f\u65b0\u7d22\u5f15\u7b49\u4e8e\u65e7\u7d22\u5f15\uff0c\u4e5f\u603b\u662f\u590d\u5236\u5e95\u5c42\u6570\u636e\uff0c\u5982\u679c\u65f6False\uff0c\u5219\u5728\u7d22\u5f15\u76f8\u540c\u65f6\u4e0d\u8981\u590d\u5236\u6570\u636e</li> </ul> In\u00a0[292]: Copied! <pre>obj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e'])\nprint(obj)\nnew_obj = obj.drop('c') #\u5220\u9664\u6307\u5b9a\u7d22\u5f15\nprint(new_obj)\nobj.drop(['d', 'c']) #\u5220\u9664\u591a\u4e2a\u7d22\u5f15\n\ndata = pd.DataFrame(np.arange(16).reshape((4, 4)),\n\t\t\t\t\tindex=['Ohio', 'Colorado', 'Utah', 'New York'],\n\t\t\t\t\tcolumns=['one', 'two', 'three', 'four'])\nprint(data)\ndata2 = data.drop(['Colorado', 'Ohio']) #\u5220\u9664\u6307\u5b9a\u884c\nprint(data2)\nprint(data.drop('two', axis=1)) #\u5220\u9664\u6307\u5b9a\u5217\nprint(data.drop(['two', 'four'], axis='columns')) #\u5220\u9664\u591a\u5217\n</pre> obj = pd.Series(np.arange(5.), index=['a', 'b', 'c', 'd', 'e']) print(obj) new_obj = obj.drop('c') #\u5220\u9664\u6307\u5b9a\u7d22\u5f15 print(new_obj) obj.drop(['d', 'c']) #\u5220\u9664\u591a\u4e2a\u7d22\u5f15  data = pd.DataFrame(np.arange(16).reshape((4, 4)), \t\t\t\t\tindex=['Ohio', 'Colorado', 'Utah', 'New York'], \t\t\t\t\tcolumns=['one', 'two', 'three', 'four']) print(data) data2 = data.drop(['Colorado', 'Ohio']) #\u5220\u9664\u6307\u5b9a\u884c print(data2) print(data.drop('two', axis=1)) #\u5220\u9664\u6307\u5b9a\u5217 print(data.drop(['two', 'four'], axis='columns')) #\u5220\u9664\u591a\u5217 <pre>a    0.0\nb    1.0\nc    2.0\nd    3.0\ne    4.0\ndtype: float64\na    0.0\nb    1.0\nd    3.0\ne    4.0\ndtype: float64\n          one  two  three  four\nOhio        0    1      2     3\nColorado    4    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n          one  two  three  four\nUtah        8    9     10    11\nNew York   12   13     14    15\n          one  three  four\nOhio        0      2     3\nColorado    4      6     7\nUtah        8     10    11\nNew York   12     14    15\n          one  three\nOhio        0      2\nColorado    4      6\nUtah        8     10\nNew York   12     14\n</pre> In\u00a0[293]: Copied! <pre>obj.drop('c', inplace=True) #\u76f4\u63a5\u5728obj\u4e0a\u5220\u9664\uff0c\u4e0d\u8fd4\u56de\u65b0\u5bf9\u8c61\nprint(obj)\n</pre> obj.drop('c', inplace=True) #\u76f4\u63a5\u5728obj\u4e0a\u5220\u9664\uff0c\u4e0d\u8fd4\u56de\u65b0\u5bf9\u8c61 print(obj) <pre>a    0.0\nb    1.0\nd    3.0\ne    4.0\ndtype: float64\n</pre> In\u00a0[294]: Copied! <pre>obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd'])\nprint(obj)\nprint(obj['b']) #\u901a\u8fc7\u7d22\u5f15\u53d6\u503c\nprint(obj[1]) #\u901a\u8fc7\u4f4d\u7f6e\u53d6\u503c\nprint(obj[2:4]) #\u5207\u7247\u53d6\u503c\nprint(obj[['b', 'a', 'd']]) #\u901a\u8fc7\u7d22\u5f15\u5217\u8868\u53d6\u503c\nprint(obj[[1, 3]]) #\u901a\u8fc7\u4f4d\u7f6e\u5217\u8868\u53d6\u503c\nprint(obj[obj &lt; 2]) #\u5e03\u5c14\u578b\u7d22\u5f15\u53d6\u503c\nobj[obj &lt; 2] = 0 #\u5e03\u5c14\u578b\u7d22\u5f15\u8d4b\u503c\nprint(obj)\n</pre> obj = pd.Series(np.arange(4.), index=['a', 'b', 'c', 'd']) print(obj) print(obj['b']) #\u901a\u8fc7\u7d22\u5f15\u53d6\u503c print(obj[1]) #\u901a\u8fc7\u4f4d\u7f6e\u53d6\u503c print(obj[2:4]) #\u5207\u7247\u53d6\u503c print(obj[['b', 'a', 'd']]) #\u901a\u8fc7\u7d22\u5f15\u5217\u8868\u53d6\u503c print(obj[[1, 3]]) #\u901a\u8fc7\u4f4d\u7f6e\u5217\u8868\u53d6\u503c print(obj[obj &lt; 2]) #\u5e03\u5c14\u578b\u7d22\u5f15\u53d6\u503c obj[obj &lt; 2] = 0 #\u5e03\u5c14\u578b\u7d22\u5f15\u8d4b\u503c print(obj) <pre>a    0.0\nb    1.0\nc    2.0\nd    3.0\ndtype: float64\n1.0\n1.0\nc    2.0\nd    3.0\ndtype: float64\nb    1.0\na    0.0\nd    3.0\ndtype: float64\nb    1.0\nd    3.0\ndtype: float64\na    0.0\nb    1.0\ndtype: float64\na    0.0\nb    0.0\nc    2.0\nd    3.0\ndtype: float64\n</pre> <pre>/tmp/ipykernel_6887/2710548481.py:4: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  print(obj[1]) #\u901a\u8fc7\u4f4d\u7f6e\u53d6\u503c\n/tmp/ipykernel_6887/2710548481.py:7: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  print(obj[[1, 3]]) #\u901a\u8fc7\u4f4d\u7f6e\u5217\u8868\u53d6\u503c\n</pre> In\u00a0[295]: Copied! <pre>data = pd.DataFrame(np.arange(16).reshape((4, 4)),\n\t\t\t\t\tindex=['Ohio', 'Colorado', 'Utah', 'New York'],\n\t\t\t\t\tcolumns=['one', 'two', 'three', 'four'])\nprint(data)\nprint(data['two']) #\u53d6\u5217\nprint(data[['three', 'one']]) #\u53d6\u591a\u5217\nprint(data[:2]) #\u5207\u7247\u53d6\u884c\n</pre> data = pd.DataFrame(np.arange(16).reshape((4, 4)), \t\t\t\t\tindex=['Ohio', 'Colorado', 'Utah', 'New York'], \t\t\t\t\tcolumns=['one', 'two', 'three', 'four']) print(data) print(data['two']) #\u53d6\u5217 print(data[['three', 'one']]) #\u53d6\u591a\u5217 print(data[:2]) #\u5207\u7247\u53d6\u884c <pre>          one  two  three  four\nOhio        0    1      2     3\nColorado    4    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\nOhio         1\nColorado     5\nUtah         9\nNew York    13\nName: two, dtype: int64\n          three  one\nOhio          2    0\nColorado      6    4\nUtah         10    8\nNew York     14   12\n          one  two  three  four\nOhio        0    1      2     3\nColorado    4    5      6     7\n</pre> In\u00a0[296]: Copied! <pre>print(data[data['three'] &gt; 5]) #\u5e03\u5c14\u578b\u7d22\u5f15\u53d6\u884c\nprint(data &lt; 5) #\u4ea7\u751f\u5e03\u5c14\u578bDataFrame\ndata[data &lt; 5] = 0 #\u901a\u8fc7\u5e03\u5c14\u578bDataFrame\u8d4b\u503c\nprint(data)\n</pre> print(data[data['three'] &gt; 5]) #\u5e03\u5c14\u578b\u7d22\u5f15\u53d6\u884c print(data &lt; 5) #\u4ea7\u751f\u5e03\u5c14\u578bDataFrame data[data &lt; 5] = 0 #\u901a\u8fc7\u5e03\u5c14\u578bDataFrame\u8d4b\u503c print(data) <pre>          one  two  three  four\nColorado    4    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n            one    two  three   four\nOhio       True   True   True   True\nColorado   True  False  False  False\nUtah      False  False  False  False\nNew York  False  False  False  False\n          one  two  three  four\nOhio        0    0      0     0\nColorado    0    5      6     7\nUtah        8    9     10    11\nNew York   12   13     14    15\n</pre> <p>\u4f7f\u7528loc\u548ciloc\u9009\u62e9\u6570\u636e</p> In\u00a0[297]: Copied! <pre>print(data.loc['Colorado', ['two', 'three']])\nprint(data.iloc[2, [3, 0, 1]])\nprint(data.iloc[2])\n</pre> print(data.loc['Colorado', ['two', 'three']]) print(data.iloc[2, [3, 0, 1]]) print(data.iloc[2]) <pre>two      5\nthree    6\nName: Colorado, dtype: int64\nfour    11\none      8\ntwo      9\nName: Utah, dtype: int64\none       8\ntwo       9\nthree    10\nfour     11\nName: Utah, dtype: int64\n</pre> <p>\u4e24\u4e2a\u4e0d\u540c\u7684\u7d22\u5f15\u5316\u5bf9\u8c61\u8fdb\u884c\u7b97\u672f\u65f6\u7ed3\u679c\u5bf9\u9f50\u6570\u636e\u4f1a\u4ea7\u751f\u7f3a\u5931\u503c</p> <p>\u4f7f\u7528\u7279\u6b8a\u503c\u586b\u5145\uff1a</p> In\u00a0[298]: Copied! <pre>df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list('abcd'))\ndf2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list('abcde'))\ndf2.loc[1, 'b'] = np.nan\nprint(df1)\nprint(df2)\n</pre> df1 = pd.DataFrame(np.arange(12.).reshape((3, 4)), columns=list('abcd')) df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list('abcde')) df2.loc[1, 'b'] = np.nan print(df1) print(df2) <pre>     a    b     c     d\n0  0.0  1.0   2.0   3.0\n1  4.0  5.0   6.0   7.0\n2  8.0  9.0  10.0  11.0\n      a     b     c     d     e\n0   0.0   1.0   2.0   3.0   4.0\n1   5.0   NaN   7.0   8.0   9.0\n2  10.0  11.0  12.0  13.0  14.0\n3  15.0  16.0  17.0  18.0  19.0\n</pre> <p>\u76f4\u63a5\u76f8\u52a0\uff1a</p> In\u00a0[299]: Copied! <pre>print(df1 + df2)\n</pre> print(df1 + df2) <pre>      a     b     c     d   e\n0   0.0   2.0   4.0   6.0 NaN\n1   9.0   NaN  13.0  15.0 NaN\n2  18.0  20.0  22.0  24.0 NaN\n3   NaN   NaN   NaN   NaN NaN\n</pre> <p>\u7528add\u65b9\u6cd5\uff1a</p> In\u00a0[300]: Copied! <pre>print(df1.add(df2, fill_value=0))\n</pre> print(df1.add(df2, fill_value=0)) <pre>      a     b     c     d     e\n0   0.0   2.0   4.0   6.0   4.0\n1   9.0   5.0  13.0  15.0   9.0\n2  18.0  20.0  22.0  24.0  14.0\n3  15.0  16.0  17.0  18.0  19.0\n</pre> In\u00a0[301]: Copied! <pre>print(1/df1)\nprint(df1.rdiv(1))\n</pre> print(1/df1) print(df1.rdiv(1)) <pre>       a         b         c         d\n0    inf  1.000000  0.500000  0.333333\n1  0.250  0.200000  0.166667  0.142857\n2  0.125  0.111111  0.100000  0.090909\n       a         b         c         d\n0    inf  1.000000  0.500000  0.333333\n1  0.250  0.200000  0.166667  0.142857\n2  0.125  0.111111  0.100000  0.090909\n</pre> <p>reindex\u4e5f\u6709\u7c7b\u4f3c\u7684\uff1a</p> In\u00a0[302]: Copied! <pre>print(df1.reindex(columns=df2.columns, fill_value=0))\n</pre> print(df1.reindex(columns=df2.columns, fill_value=0)) <pre>     a    b     c     d  e\n0  0.0  1.0   2.0   3.0  0\n1  4.0  5.0   6.0   7.0  0\n2  8.0  9.0  10.0  11.0  0\n</pre> <p>\u7b97\u672f\u65b9\u6cd5\u6709\uff1a</p> <ul> <li>add, radd\uff1a\u52a0\u6cd5</li> <li>sub, rsub\uff1a\u51cf\u6cd5</li> <li>div, rdiv\uff1a\u9664\u6cd5</li> <li>floordiv, rfloordiv\uff1a\u6574\u9664</li> <li>mul, rmul\uff1a\u4e58\u6cd5</li> <li>pow, rpow\uff1a\u5e42\u6b21\u65b9</li> </ul> <p>\u5e7f\u64ad\u673a\u5236\uff1a</p> In\u00a0[303]: Copied! <pre>arr = np.arange(12.).reshape((3, 4))\nprint(arr)\nprint(arr[0])\nprint(arr - arr[0]) #\u8fdb\u884c\u51cf\u6cd5\u65f6\u5728\u6bcf\u4e00\u884c\u90fd\u8fdb\u884c\u4e86\u64cd\u4f5c\n</pre> arr = np.arange(12.).reshape((3, 4)) print(arr) print(arr[0]) print(arr - arr[0]) #\u8fdb\u884c\u51cf\u6cd5\u65f6\u5728\u6bcf\u4e00\u884c\u90fd\u8fdb\u884c\u4e86\u64cd\u4f5c <pre>[[ 0.  1.  2.  3.]\n [ 4.  5.  6.  7.]\n [ 8.  9. 10. 11.]]\n[0. 1. 2. 3.]\n[[0. 0. 0. 0.]\n [4. 4. 4. 4.]\n [8. 8. 8. 8.]]\n</pre> <p>\u5728DataFrame\u548cSeries\u95f4\u8fdb\u884c\u64cd\u4f5c\uff1a</p> In\u00a0[304]: Copied! <pre>frame = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'), index=['Utah', 'Ohio', 'Texa', 'Oregon'])\nseries = frame.iloc[0]\nprint(frame)\nprint(series)\nprint(frame-series) #\u5c06Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d\u5e76\u5e7f\u64ad\u5230\u5404\u884c\n</pre> frame = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'), index=['Utah', 'Ohio', 'Texa', 'Oregon']) series = frame.iloc[0] print(frame) print(series) print(frame-series) #\u5c06Series\u7684\u7d22\u5f15\u548cDataFrame\u7684\u5217\u8fdb\u884c\u5339\u914d\u5e76\u5e7f\u64ad\u5230\u5404\u884c <pre>          b     d     e\nUtah    0.0   1.0   2.0\nOhio    3.0   4.0   5.0\nTexa    6.0   7.0   8.0\nOregon  9.0  10.0  11.0\nb    0.0\nd    1.0\ne    2.0\nName: Utah, dtype: float64\n          b    d    e\nUtah    0.0  0.0  0.0\nOhio    3.0  3.0  3.0\nTexa    6.0  6.0  6.0\nOregon  9.0  9.0  9.0\n</pre> <p>\u5728\u5217\u4e0a\u5e7f\u64ad\uff1a</p> In\u00a0[305]: Copied! <pre>series2 = frame['d']\nprint(frame)\nprint(series2)\nprint(frame.sub(series2, axis='index'))\n</pre> series2 = frame['d'] print(frame) print(series2) print(frame.sub(series2, axis='index')) <pre>          b     d     e\nUtah    0.0   1.0   2.0\nOhio    3.0   4.0   5.0\nTexa    6.0   7.0   8.0\nOregon  9.0  10.0  11.0\nUtah       1.0\nOhio       4.0\nTexa       7.0\nOregon    10.0\nName: d, dtype: float64\n          b    d    e\nUtah   -1.0  0.0  1.0\nOhio   -1.0  0.0  1.0\nTexa   -1.0  0.0  1.0\nOregon -1.0  0.0  1.0\n</pre> In\u00a0[306]: Copied! <pre>frame = pd.DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texa', 'Oregon'])\nprint(frame)\nprint(np.abs(frame)) #numpy\u7684\u7edd\u5bf9\u503c\u51fd\u6570\nf = lambda x: x.max() - x.min() #\u81ea\u5b9a\u4e49\u51fd\u6570\nprint(frame.apply(f)) #\u6309\u5217\u5e94\u7528\u51fd\u6570\nprint(frame.apply(f, axis='columns')) #\u6309\u884c\u5e94\u7528\u51fd\u6570\n</pre> frame = pd.DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texa', 'Oregon']) print(frame) print(np.abs(frame)) #numpy\u7684\u7edd\u5bf9\u503c\u51fd\u6570 f = lambda x: x.max() - x.min() #\u81ea\u5b9a\u4e49\u51fd\u6570 print(frame.apply(f)) #\u6309\u5217\u5e94\u7528\u51fd\u6570 print(frame.apply(f, axis='columns')) #\u6309\u884c\u5e94\u7528\u51fd\u6570 <pre>               b         d         e\nUtah   -0.171523 -0.750481  1.880434\nOhio   -1.053568 -0.826458 -1.497577\nTexa    0.988448  0.703451  0.974423\nOregon -0.242716 -0.754870  1.500686\n               b         d         e\nUtah    0.171523  0.750481  1.880434\nOhio    1.053568  0.826458  1.497577\nTexa    0.988448  0.703451  0.974423\nOregon  0.242716  0.754870  1.500686\nb    2.042016\nd    1.529909\ne    3.378011\ndtype: float64\nUtah      2.630915\nOhio      0.671119\nTexa      0.284998\nOregon    2.255555\ndtype: float64\n</pre> In\u00a0[307]: Copied! <pre>object = pd.Series(range(4), index=['d', 'a', 'b', 'c'])\nprint(object)\nprint(object.sort_index()) #\u6309\u7d22\u5f15\u6392\u5e8f\n\nframe = pd.DataFrame(np.arange(8).reshape((2, 4)), index=['three', 'one'], columns=['d', 'a', 'b', 'c'])\nprint(frame)\nprint(frame.sort_index()) #\u6309\u884c\u7d22\u5f15\u6392\u5e8f\nprint(frame.sort_index(axis=1)) #\u6309\u5217\u7d22\u5f15\u6392\u5e8f\nprint(frame.sort_index(axis=1, ascending=False)) #\u6309\u5217\u7d22\u5f15\u964d\u5e8f\u6392\u5e8f\n</pre> object = pd.Series(range(4), index=['d', 'a', 'b', 'c']) print(object) print(object.sort_index()) #\u6309\u7d22\u5f15\u6392\u5e8f  frame = pd.DataFrame(np.arange(8).reshape((2, 4)), index=['three', 'one'], columns=['d', 'a', 'b', 'c']) print(frame) print(frame.sort_index()) #\u6309\u884c\u7d22\u5f15\u6392\u5e8f print(frame.sort_index(axis=1)) #\u6309\u5217\u7d22\u5f15\u6392\u5e8f print(frame.sort_index(axis=1, ascending=False)) #\u6309\u5217\u7d22\u5f15\u964d\u5e8f\u6392\u5e8f <pre>d    0\na    1\nb    2\nc    3\ndtype: int64\na    1\nb    2\nc    3\nd    0\ndtype: int64\n       d  a  b  c\nthree  0  1  2  3\none    4  5  6  7\n       d  a  b  c\none    4  5  6  7\nthree  0  1  2  3\n       a  b  c  d\nthree  1  2  3  0\none    5  6  7  4\n       d  c  b  a\nthree  0  3  2  1\none    4  7  6  5\n</pre> In\u00a0[308]: Copied! <pre>obj = pd.Series([4, 7, -3, 2])\nprint(obj)\nprint(obj.sort_values()) #\u6309\u503c\u6392\u5e8f\n\nobj = pd.Series([4, np.nan, 7, np.nan, -3, 2])\nprint(obj)\nprint(obj.sort_values()) #\u6309\u503c\u6392\u5e8f\uff0cNaN\u653e\u5728\u6700\u540e\n</pre> obj = pd.Series([4, 7, -3, 2]) print(obj) print(obj.sort_values()) #\u6309\u503c\u6392\u5e8f  obj = pd.Series([4, np.nan, 7, np.nan, -3, 2]) print(obj) print(obj.sort_values()) #\u6309\u503c\u6392\u5e8f\uff0cNaN\u653e\u5728\u6700\u540e <pre>0    4\n1    7\n2   -3\n3    2\ndtype: int64\n2   -3\n3    2\n0    4\n1    7\ndtype: int64\n0    4.0\n1    NaN\n2    7.0\n3    NaN\n4   -3.0\n5    2.0\ndtype: float64\n4   -3.0\n5    2.0\n0    4.0\n2    7.0\n1    NaN\n3    NaN\ndtype: float64\n</pre> In\u00a0[309]: Copied! <pre>frame = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]})\nprint(frame)\nprint(frame.sort_values(by='b')) #\u6309\u5355\u5217\u6392\u5e8f\nprint(frame.sort_values(by=['a', 'b'])) #\u6309\u591a\u5217\u6392\u5e8f\uff0c\u5148\u6309a\u5217\uff0c\u518d\u6309b\u5217\n\nobj = pd.Series([7, -5, 7, 4, 2, 0, 4])\nprint(obj)\nprint(obj.rank()) #\u9ed8\u8ba4\u5e73\u5747\u6392\u540d\nprint(obj.rank(method='first')) #\u6309\u51fa\u73b0\u987a\u5e8f\u6392\u540d\nprint(obj.rank(ascending=False, method='max')) #\u964d\u5e8f\uff0c\u6700\u5927\u6392\u540d\n</pre> frame = pd.DataFrame({'b': [4, 7, -3, 2], 'a': [0, 1, 0, 1]}) print(frame) print(frame.sort_values(by='b')) #\u6309\u5355\u5217\u6392\u5e8f print(frame.sort_values(by=['a', 'b'])) #\u6309\u591a\u5217\u6392\u5e8f\uff0c\u5148\u6309a\u5217\uff0c\u518d\u6309b\u5217  obj = pd.Series([7, -5, 7, 4, 2, 0, 4]) print(obj) print(obj.rank()) #\u9ed8\u8ba4\u5e73\u5747\u6392\u540d print(obj.rank(method='first')) #\u6309\u51fa\u73b0\u987a\u5e8f\u6392\u540d print(obj.rank(ascending=False, method='max')) #\u964d\u5e8f\uff0c\u6700\u5927\u6392\u540d <pre>   b  a\n0  4  0\n1  7  1\n2 -3  0\n3  2  1\n   b  a\n2 -3  0\n3  2  1\n0  4  0\n1  7  1\n   b  a\n2 -3  0\n0  4  0\n3  2  1\n1  7  1\n0    7\n1   -5\n2    7\n3    4\n4    2\n5    0\n6    4\ndtype: int64\n0    6.5\n1    1.0\n2    6.5\n3    4.5\n4    3.0\n5    2.0\n6    4.5\ndtype: float64\n0    6.0\n1    1.0\n2    7.0\n3    4.0\n4    3.0\n5    2.0\n6    5.0\ndtype: float64\n0    2.0\n1    7.0\n2    2.0\n3    4.0\n4    5.0\n5    6.0\n6    4.0\ndtype: float64\n</pre> In\u00a0[310]: Copied! <pre>frame = pd.DataFrame({'b': [4.3, 7, -3, 2], 'a': [0, 1, 0, 1], 'c': [-2, 5, 8, -2.5]})\nprint(frame)\nprint(frame.rank(axis='columns')) #\u6309\u884c\u6392\u540d\nprint(frame.rank(axis='index', method='max')) #\u6309\u5217\u6392\u540d\n</pre> frame = pd.DataFrame({'b': [4.3, 7, -3, 2], 'a': [0, 1, 0, 1], 'c': [-2, 5, 8, -2.5]}) print(frame) print(frame.rank(axis='columns')) #\u6309\u884c\u6392\u540d print(frame.rank(axis='index', method='max')) #\u6309\u5217\u6392\u540d <pre>     b  a    c\n0  4.3  0 -2.0\n1  7.0  1  5.0\n2 -3.0  0  8.0\n3  2.0  1 -2.5\n     b    a    c\n0  3.0  2.0  1.0\n1  3.0  1.0  2.0\n2  1.0  2.0  3.0\n3  3.0  2.0  1.0\n     b    a    c\n0  3.0  2.0  2.0\n1  4.0  4.0  3.0\n2  1.0  2.0  4.0\n3  2.0  4.0  1.0\n</pre> In\u00a0[311]: Copied! <pre>obj = pd.Series(range(5), index=['a', 'a', 'b', 'b', 'c'])\nprint(obj)\nprint(obj.index.is_unique) #\u7d22\u5f15\u662f\u5426\u552f\u4e00\nprint(obj['a']) #\u7d22\u5f15\u91cd\u590d\u65f6\u8fd4\u56deSeries\nprint(obj['c']) #\u7d22\u5f15\u552f\u4e00\u65f6\u8fd4\u56de\u6807\u91cf\n</pre> obj = pd.Series(range(5), index=['a', 'a', 'b', 'b', 'c']) print(obj) print(obj.index.is_unique) #\u7d22\u5f15\u662f\u5426\u552f\u4e00 print(obj['a']) #\u7d22\u5f15\u91cd\u590d\u65f6\u8fd4\u56deSeries print(obj['c']) #\u7d22\u5f15\u552f\u4e00\u65f6\u8fd4\u56de\u6807\u91cf <pre>a    0\na    1\nb    2\nb    3\nc    4\ndtype: int64\nFalse\na    0\na    1\ndtype: int64\n4\n</pre> In\u00a0[312]: Copied! <pre>df = pd.DataFrame(np.random.randn(4, 3), index=['a', 'a', 'b', 'b'])\nprint(df)\nprint(df.loc['b']) #\u7d22\u5f15\u91cd\u590d\u65f6\u8fd4\u56deDataFrame\nprint(df.loc['a']) #\u7d22\u5f15\u91cd\u590d\u65f6\u8fd4\u56deDataFrame\n</pre> df = pd.DataFrame(np.random.randn(4, 3), index=['a', 'a', 'b', 'b']) print(df) print(df.loc['b']) #\u7d22\u5f15\u91cd\u590d\u65f6\u8fd4\u56deDataFrame print(df.loc['a']) #\u7d22\u5f15\u91cd\u590d\u65f6\u8fd4\u56deDataFrame <pre>          0         1         2\na  1.574966 -0.564201 -0.731516\na  0.622392 -0.439082 -0.118496\nb -0.152188  0.583649 -1.964059\nb  0.277674  0.487701 -1.008114\n          0         1         2\nb -0.152188  0.583649 -1.964059\nb  0.277674  0.487701 -1.008114\n          0         1         2\na  1.574966 -0.564201 -0.731516\na  0.622392 -0.439082 -0.118496\n</pre> In\u00a0[313]: Copied! <pre>df = pd.DataFrame([[1.4, np.nan], [7.1, -4.5], [np.nan, np.nan], [0.75, -1.3]],\n\t\t\t\t  index=['a', 'b', 'c', 'd'],\n\t\t\t\t  columns=['one', 'two'])\nprint(df)\nprint(df.sum()) #\u6309\u5217\u8ba1\u7b97\u548c\uff0c\u9ed8\u8ba4axis=0\nprint(df.sum(axis=1)) #\u6309\u884c\u8ba1\u7b97\u548c\nprint(df.mean(axis=1, skipna=False)) #\u6309\u884c\u8ba1\u7b97\u5747\u503c\uff0cskipna=False\u65f6\u6709NaN\u5219\u7ed3\u679c\u4e3aNaN\n</pre> df = pd.DataFrame([[1.4, np.nan], [7.1, -4.5], [np.nan, np.nan], [0.75, -1.3]], \t\t\t\t  index=['a', 'b', 'c', 'd'], \t\t\t\t  columns=['one', 'two']) print(df) print(df.sum()) #\u6309\u5217\u8ba1\u7b97\u548c\uff0c\u9ed8\u8ba4axis=0 print(df.sum(axis=1)) #\u6309\u884c\u8ba1\u7b97\u548c print(df.mean(axis=1, skipna=False)) #\u6309\u884c\u8ba1\u7b97\u5747\u503c\uff0cskipna=False\u65f6\u6709NaN\u5219\u7ed3\u679c\u4e3aNaN <pre>    one  two\na  1.40  NaN\nb  7.10 -4.5\nc   NaN  NaN\nd  0.75 -1.3\none    9.25\ntwo   -5.80\ndtype: float64\na    1.40\nb    2.60\nc    0.00\nd   -0.55\ndtype: float64\na      NaN\nb    1.300\nc      NaN\nd   -0.275\ndtype: float64\n</pre> In\u00a0[314]: Copied! <pre>print(df.idxmax()) #\u6309\u5217\u8ba1\u7b97\u6700\u5927\u503c\u7684\u7d22\u5f15\nprint(df.cumsum()) #\u6309\u5217\u8ba1\u7b97\u7d2f\u8ba1\u548c\n</pre> print(df.idxmax()) #\u6309\u5217\u8ba1\u7b97\u6700\u5927\u503c\u7684\u7d22\u5f15 print(df.cumsum()) #\u6309\u5217\u8ba1\u7b97\u7d2f\u8ba1\u548c <pre>one    b\ntwo    d\ndtype: object\n    one  two\na  1.40  NaN\nb  8.50 -4.5\nc   NaN  NaN\nd  9.25 -5.8\n</pre> In\u00a0[315]: Copied! <pre>print(df.describe()) #\u8ba1\u7b97\u63cf\u8ff0\u6027\u7edf\u8ba1\nprint(df.T.describe()) #\u8f6c\u7f6e\u540e\u8ba1\u7b97\u63cf\u8ff0\u6027\u7edf\u8ba1\n</pre> print(df.describe()) #\u8ba1\u7b97\u63cf\u8ff0\u6027\u7edf\u8ba1 print(df.T.describe()) #\u8f6c\u7f6e\u540e\u8ba1\u7b97\u63cf\u8ff0\u6027\u7edf\u8ba1 <pre>            one       two\ncount  3.000000  2.000000\nmean   3.083333 -2.900000\nstd    3.493685  2.262742\nmin    0.750000 -4.500000\n25%    1.075000 -3.700000\n50%    1.400000 -2.900000\n75%    4.250000 -2.100000\nmax    7.100000 -1.300000\n         a         b    c         d\ncount  1.0  2.000000  0.0  2.000000\nmean   1.4  1.300000  NaN -0.275000\nstd    NaN  8.202439  NaN  1.449569\nmin    1.4 -4.500000  NaN -1.300000\n25%    1.4 -1.600000  NaN -0.787500\n50%    1.4  1.300000  NaN -0.275000\n75%    1.4  4.200000  NaN  0.237500\nmax    1.4  7.100000  NaN  0.750000\n</pre> In\u00a0[316]: Copied! <pre>obj = pd.Series(['a', 'a', 'b', 'c'] * 4)\nprint(obj)\nprint(obj.describe()) #\u8ba1\u7b97\u63cf\u8ff0\u6027\u7edf\u8ba1\uff0c\u975e\u6570\u503c\u578b\u6570\u636e\n</pre> obj = pd.Series(['a', 'a', 'b', 'c'] * 4) print(obj) print(obj.describe()) #\u8ba1\u7b97\u63cf\u8ff0\u6027\u7edf\u8ba1\uff0c\u975e\u6570\u503c\u578b\u6570\u636e <pre>0     a\n1     a\n2     b\n3     c\n4     a\n5     a\n6     b\n7     c\n8     a\n9     a\n10    b\n11    c\n12    a\n13    a\n14    b\n15    c\ndtype: object\ncount     16\nunique     3\ntop        a\nfreq       8\ndtype: object\n</pre> In\u00a0[317]: Copied! <pre>frame = pd.DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texa', 'Oregon'])\nprint(frame)\nprint(frame.corr()) #\u8ba1\u7b97\u5217\u95f4\u76f8\u5173\u7cfb\u6570\nprint(frame.cov()) #\u8ba1\u7b97\u5217\u95f4\u534f\u65b9\u5dee\n</pre> frame = pd.DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texa', 'Oregon']) print(frame) print(frame.corr()) #\u8ba1\u7b97\u5217\u95f4\u76f8\u5173\u7cfb\u6570 print(frame.cov()) #\u8ba1\u7b97\u5217\u95f4\u534f\u65b9\u5dee <pre>               b         d         e\nUtah    0.569030  1.224514  1.992728\nOhio   -0.865025 -0.103354  1.195028\nTexa   -0.058713 -0.786837  0.709671\nOregon -1.099544 -1.762042  0.203053\n          b         d         e\nb  1.000000  0.781481  0.758563\nd  0.781481  1.000000  0.998783\ne  0.758563  0.998783  1.000000\n          b         d         e\nb  0.585265  0.750254  0.442014\nd  0.750254  1.574809  0.954671\ne  0.442014  0.954671  0.580145\n</pre> In\u00a0[318]: Copied! <pre>obj = pd.Series(['c', 'a', 'd', 'a', 'a', 'b', 'b', 'c', 'c', 'c'])\nuniques = obj.unique() #\u552f\u4e00\u503c\nprint(uniques)\nprint(obj.value_counts()) #\u8ba1\u6570\nprint(pd.value_counts(obj.values, sort=False)) #\u8ba1\u6570\uff0csort=False\u65f6\u4e0d\u6392\u5e8f\n</pre> obj = pd.Series(['c', 'a', 'd', 'a', 'a', 'b', 'b', 'c', 'c', 'c']) uniques = obj.unique() #\u552f\u4e00\u503c print(uniques) print(obj.value_counts()) #\u8ba1\u6570 print(pd.value_counts(obj.values, sort=False)) #\u8ba1\u6570\uff0csort=False\u65f6\u4e0d\u6392\u5e8f <pre>['c' 'a' 'd' 'b']\nc    4\na    3\nb    2\nd    1\nName: count, dtype: int64\nc    4\na    3\nd    1\nb    2\nName: count, dtype: int64\n</pre> <pre>/tmp/ipykernel_6887/2678439928.py:5: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n  print(pd.value_counts(obj.values, sort=False)) #\u8ba1\u6570\uff0csort=False\u65f6\u4e0d\u6392\u5e8f\n</pre> In\u00a0[319]: Copied! <pre>mask = obj.isin(['b', 'c']) #\u6210\u5458\u5c5e\u6027\nprint(mask)\nprint(obj[mask]) #\u901a\u8fc7\u6210\u5458\u5c5e\u6027\u53d6\u503c\n</pre> mask = obj.isin(['b', 'c']) #\u6210\u5458\u5c5e\u6027 print(mask) print(obj[mask]) #\u901a\u8fc7\u6210\u5458\u5c5e\u6027\u53d6\u503c <pre>0     True\n1    False\n2    False\n3    False\n4    False\n5     True\n6     True\n7     True\n8     True\n9     True\ndtype: bool\n0    c\n5    b\n6    b\n7    c\n8    c\n9    c\ndtype: object\n</pre> In\u00a0[320]: Copied! <pre>to_match = pd.Series(['c', 'a', 'b', 'b', 'c', 'a'])\nunique_vals = pd.Series(['c', 'b', 'a'])\nprint(pd.Index(unique_vals).get_indexer(to_match)) #\u8fd4\u56deto_match\u4e2d\u6bcf\u4e2a\u503c\u5728unique_vals\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5219\u4e3a-1\n\ndata = pd.DataFrame({'Qu1': [1, 3, 4, 3, 4],\n\t\t\t\t\t 'Qu2': [2, 3, 1, 2, 3],\n\t\t\t\t\t 'Qu3': [1, 5, 2, 4, 4]})\nprint(data)\nresult = data.apply(pd.value_counts).fillna(0) #\u8ba1\u7b97\u6bcf\u5217\u4e2d\u5404\u503c\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7f3a\u5931\u503c\u586b\u51450\nprint(result)\n</pre> to_match = pd.Series(['c', 'a', 'b', 'b', 'c', 'a']) unique_vals = pd.Series(['c', 'b', 'a']) print(pd.Index(unique_vals).get_indexer(to_match)) #\u8fd4\u56deto_match\u4e2d\u6bcf\u4e2a\u503c\u5728unique_vals\u4e2d\u7684\u4f4d\u7f6e\uff0c\u6ca1\u6709\u5219\u4e3a-1  data = pd.DataFrame({'Qu1': [1, 3, 4, 3, 4], \t\t\t\t\t 'Qu2': [2, 3, 1, 2, 3], \t\t\t\t\t 'Qu3': [1, 5, 2, 4, 4]}) print(data) result = data.apply(pd.value_counts).fillna(0) #\u8ba1\u7b97\u6bcf\u5217\u4e2d\u5404\u503c\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7f3a\u5931\u503c\u586b\u51450 print(result) <pre>[0 2 1 1 0 2]\n   Qu1  Qu2  Qu3\n0    1    2    1\n1    3    3    5\n2    4    1    2\n3    3    2    4\n4    4    3    4\n   Qu1  Qu2  Qu3\n1  1.0  1.0  1.0\n2  0.0  2.0  1.0\n3  2.0  2.0  0.0\n4  2.0  0.0  2.0\n5  0.0  0.0  1.0\n</pre> <pre>/tmp/ipykernel_6887/3531663070.py:9: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n  result = data.apply(pd.value_counts).fillna(0) #\u8ba1\u7b97\u6bcf\u5217\u4e2d\u5404\u503c\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u7f3a\u5931\u503c\u586b\u51450\n</pre>"},{"location":"md/pandas1/","title":"\u6570\u636e\u7ed3\u6784\u00b6","text":""},{"location":"md/pandas1/#series","title":"Series\u00b6","text":""},{"location":"md/pandas1/#dataframe","title":"DataFrame\u00b6","text":""},{"location":"md/pandas1/","title":"\u7d22\u5f15\u5bf9\u8c61\u00b6","text":""},{"location":"md/pandas1/","title":"\u57fa\u672c\u529f\u80fd\u00b6","text":""},{"location":"md/pandas1/","title":"\u91cd\u5efa\u7d22\u5f15\u00b6","text":""},{"location":"md/pandas1/","title":"\u8f74\u5411\u4e0a\u5220\u9664\u6761\u76ee\u00b6","text":""},{"location":"md/pandas1/","title":"\u7d22\u5f15\u3001\u9009\u62e9\u548c\u4e0e\u8fc7\u6ee4\u00b6","text":""},{"location":"md/pandas1/","title":"\u7b97\u672f\u548c\u6570\u636e\u5bf9\u9f50\u00b6","text":""},{"location":"md/pandas1/","title":"\u51fd\u6570\u5e94\u7528\u4e0e\u6620\u5c04\u00b6","text":""},{"location":"md/pandas1/","title":"\u6392\u5e8f\u548c\u6392\u540d\u00b6","text":""},{"location":"md/pandas1/","title":"\u542b\u6709\u91cd\u590d\u6807\u7b7e\u7684\u8f74\u7d22\u5f15\u00b6","text":""},{"location":"md/pandas1/","title":"\u63cf\u8ff0\u6027\u7edf\u8ba1\u7684\u6982\u8ff0\u4e0e\u8ba1\u7b97\u00b6","text":""},{"location":"md/pandas1/","title":"\u76f8\u5173\u6027\u4e0e\u534f\u65b9\u5dee\u00b6","text":""},{"location":"md/pandas1/","title":"\u552f\u4e00\u503c\u3001\u8ba1\u6570\u548c\u6210\u5458\u5c5e\u6027\u00b6","text":""},{"location":"md/profile/","title":"\u5173\u4e8e\u6211","text":"ZUTOMATO - \u4e2a\u4eba\u4ecb\u7ecd ZUTOMATO <p>\u7b80\u5355\u7684\u4ecb\u7ecd\u55b5</p> \u4e2a\u4eba\u4fe1\u606f 1 \u4e13\u4e1a <p>\u6d59\u6c5f\u5927\u5b66\u6570\u5b66\u79d1\u5b66\u5b66\u9662  23\u7ea7\u7edf\u8ba1\u5b66\u672c\u79d1</p> 2 \u539f\u4e13\u4e1a <p>\u539f\u4e13\u4e1a\u5316\u5b66\uff0c\u73b0\u5fae\u8f85\u4fee\u4e5f\u4f1a\u5728\u8fd9\u91cc\u804a\u804a\u4e00\u4e9b\u5316\u5b66\u8bfe\u7684\u4f53\u9a8c</p> 3 \u6211\u662fTZM <p>\u6b22\u8fce\u627e\u6211\u7ea6\ud83c\udfd3</p> 4 \u97f3\u4e50 <p>\u6781\u7aef\u771f\u591c\u53a8\u4e50\u961f\u952e\u76d8\u624b</p> \u6211\u7684\u8054\u7cfb\u65b9\u5f0f QQ <p>2044581717</p> \u5fae\u4fe1 <p>q2044581717</p> \u7535\u8bdd <p>19883101612</p> \u90ae\u7bb1 <p>2044581717@qq.com</p> \u4e2a\u4eba\u8d26\u53f7 ZUTOMATO \u6211\u7684\u4e2a\u4ebaB\u7ad9\u8d26\u53f7 \u4e50\u961f\u8d26\u53f7 LilyPuffer \u6211\u7684\u4e50\u961fB\u7ad9\u8d26\u53f7 \u25cb\u795e                                  ID\uff1aGinger_Strings                                 UID\uff1a230727409                              \u5d29\u94c1                                  ID\uff1aZUTOMATO                                 UID\uff1a112136529                              zutomato <p>CC98</p> CC98\u4e3b\u9875 <p>\u00a9 ZUTOMATO 2025</p>"},{"location":"md/test/","title":"Test","text":"<p>asdawdasdwasdw</p>"},{"location":"md/turtle/","title":"turtle","text":""},{"location":"md/datasets/mta_perf/parse/","title":"Parse","text":"In\u00a0[\u00a0]: Copied! <pre>from pandas import DataFrame\nfrom lxml import objectify\n</pre> from pandas import DataFrame from lxml import objectify In\u00a0[\u00a0]: Copied! <pre>path = 'Performance_MNR.xml'\nparsed = objectify.parse(open(path))\nroot = parsed.getroot()\n</pre> path = 'Performance_MNR.xml' parsed = objectify.parse(open(path)) root = parsed.getroot() In\u00a0[\u00a0]: Copied! <pre>data = []\n</pre> data = [] In\u00a0[\u00a0]: Copied! <pre>for elt in root.INDICATOR:\n    el_data = {}\n    for child in elt.getchildren():\n        el_data[child.tag] = child.pyval\n    data.append(el_data)\n</pre> for elt in root.INDICATOR:     el_data = {}     for child in elt.getchildren():         el_data[child.tag] = child.pyval     data.append(el_data) In\u00a0[\u00a0]: Copied! <pre>perf = DataFrame(data)\n</pre> perf = DataFrame(data)"},{"location":"md/examples/ipython_bug/","title":"Ipython bug","text":"In\u00a0[\u00a0]: Copied! <pre>def works_fine():\n    a = 5\n    b = 6\n    assert(a + b == 11)\n</pre> def works_fine():     a = 5     b = 6     assert(a + b == 11) In\u00a0[\u00a0]: Copied! <pre>def throws_an_exception():\n    a = 5\n    b = 6\n    assert(a + b == 10)\n</pre> def throws_an_exception():     a = 5     b = 6     assert(a + b == 10) In\u00a0[\u00a0]: Copied! <pre>def calling_things():\n    works_fine()\n    throws_an_exception()\n</pre> def calling_things():     works_fine()     throws_an_exception() In\u00a0[\u00a0]: Copied! <pre>calling_things()\n</pre> calling_things()"},{"location":"md/music/demo/","title":"\u778e\u5199\u7684\u4e00\u4e9b\u4e1c\u897f","text":""},{"location":"md/music/demo/#k","title":"k","text":""},{"location":"md/music/demo/#j","title":"j","text":""},{"location":"md/music/demo/#f","title":"f","text":""},{"location":"md/music/demo/#d","title":"d","text":""},{"location":"md/music/demo/#b","title":"b","text":""},{"location":"md/music/%E6%B7%B7%E9%9F%B3/","title":"\u6df7\u97f3","text":"<p>\u5e2e\u670b\u53cb\u6df7\u7684\u4e00\u9996\u6b4c\uff0c\u624d\u521a\u5f00\u59cb\u5b66\u6df7\u97f3www</p> <p>\u5728\u539f\u7248\u7684\u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u6bb5\u95f4\u594f</p> <p> </p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/","title":"\u5b9e\u53d8\u51fd\u6570","text":""},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_2","title":"\u8bfe\u7a0b\u5bf9\u8c61","text":"<p>\u5927\u4e8c\u6625\u590f\u6570\u5b66\u4e0e\u5e94\u7528\u6570\u5b66\u5fc5\u4fee\u3001\u7edf\u8ba1\u5b66/\u4fe1\u606f\u4e0e\u8ba1\u7b97\u79d1\u5b66\u9009\u4fee</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_3","title":"\u4efb\u8bfe\u8001\u5e08","text":"<ul> <li> <p>\u674e\u79c9\u653f\uff1a\u636e\u8bf4\u4f5c\u4e1a\u6bd4\u8f83\u591a\uff0c\u5c0f\u6d4b\u4e3a\u7ebf\u4e0b\u7eb8\u8d28\uff0c\u9898\u76ee\u6bd4\u8f83\u57fa\u7840\uff0c\u80cc\u8bf5\u9ed8\u5199\u5c45\u591a\u3002</p> </li> <li> <p>\u8d3e\u539a\u7389\uff1a\u6211\u7684\u8001\u5e08\uff0c\u5c0f\u6d4b\u4e3a\u968f\u580215\u5206\u949f\u5de6\u53f3\uff0c8\u9053\u5de6\u53f3\u9009\u62e9\u9898\uff0c\u9898\u76ee\u4e0d\u7b97\u7279\u522b\u96be\uff0c\u6709\u5355\u9009/\u591a\u9009\uff0c\u4e14\u4e3a\u4e0d\u5b9a\u671f\u7a81\u51fb\u5c0f\u6d4b\uff1b\u4f1a\u7a81\u51fb\u6570\u5b57\u70b9\u540d\u4e14\u4e0d\u5141\u8bb8\u8bfe\u540e\u8865\u7b7e\u3002\u636e\u4ed6\u81ea\u79f0\u5e73\u65f6\u5206\u53d7\u671f\u672b\u8003\u5f71\u54cd\u5f88\u5927\uff0c\u5982\u679c\u671f\u672b\u8003\u5f97\u597d\u5e73\u65f6\u5206\u5c31\u4f1a\u62c9\u6ee1\uff0c\u5c31\u7b97\u5c0f\u6d4b\u548c\u70b9\u540d\u90fd\u6ca1\u5230\uff0c\u53cd\u4e4b\u671f\u672b\u8003\u8003\u5f97\u5f88\u5dee\u7684\u8bdd\u4e0d\u7ba1\u5e73\u65f6\u600e\u4e48\u6837\u4e5f\u4f1a\u6302\u3002</p> </li> </ul>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_4","title":"\u524d\u7f6e\u8bfe\u7a0b","text":"<p>\u6570\u5b66\u5206\u6790\u4e00\u4e8c\u4e09\u6216\u66f4\u9ad8\u7ea7\u7684\u6570\u5b66\u5206\u6790\u8bfe\u7a0b\uff08\u6570\u5206H\u548c\u5206\u6790\u5b66\uff09\uff0c\u5982\u679c\u5b66\u8fc7\u70b9\u96c6\u62d3\u6251\u4f1a\u5bf9\u5b9e\u53d8\u7684\u5b66\u4e60\u6709\u4e00\u5b9a\u7684\u5e2e\u52a9\uff0c\u4e0d\u8fc7\u975e\u5fc5\u987b\u3002</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_5","title":"\u8bfe\u7a0b\u7279\u70b9","text":"<p>\u5b9e\u53d8\u7684\u96be\u5ea6\u5373\u4f7f\u653e\u5728\u6570\u5b66\u4e13\u4e1a\u8bfe\u4e2d\u4e5f\u662f\u6bd4\u8f83\u5927\u7684\uff0c\u867d\u7136\u8001\u5e08\u8bb2\u8bfe\u5f88\u597d\uff0c\u7ed9\u5206\u4e5f\u5f88\u597d\uff0c\u4f46\u662f\u60f3\u8981\u771f\u6b63\u5b66\u5f97\u597d\u6211\u8ba4\u4e3a\u8fd8\u662f\u6709\u5f88\u5927\u96be\u5ea6\uff0c\u4e0d\u5efa\u8bae\u975e\u5fc5\u4fee\u7684\u4e13\u4e1a\u9009\u4fee\u4e0d\u8fc7\u5982\u679c\u7edf\u8ba1\u5b66\u4e13\u4e1a\u7684\u540c\u5b66\u60f3\u5b66\u597d\u6982\u7387\u8bba\u90a3\u4e48\u5341\u5206\u5efa\u8bae\u9009\u4fee\u8fd9\u95e8\u8bfe\u7a0b\u3002</p> <p>\u5173\u4e8e\u5b9e\u53d8\u51fd\u6570\uff0c\u5b9e\u53d8\u548c\u6570\u5206\u7684\u5173\u7cfb\u662f\u4e00\u5b9a\u8981\u63d0\u5230\u7684\u3002\u6211\u81ea\u5df1\u5bf9\u8fd9\u95e8\u8bfe\u7a0b\u7684\u7406\u89e3\u662f\uff0c\u5b9e\u53d8\u662f\u5bf9\u6570\u5206\u4e2d\u7684\u5185\u5bb9\u7684\u5b8c\u5584\u3002\u6570\u5206\u7814\u7a76\u7684\u662f\u6027\u8d28\u6781\u597d\u7684\u5bf9\u8c61\uff08\u8fde\u7eed/\u53ef\u5bfc\u51fd\u6570\u3001\u5b8c\u6574\u7684\u533a\u95f4\u7b49\uff09\uff0c\u800c\u5b9e\u53d8\u7814\u7a76\u7684\u8303\u56f4\u62d3\u5c55\u5230\u4e86\u6027\u8d28\u201c\u6ca1\u8fd9\u4e48\u597d\u201d\u7684\u5bf9\u8c61\uff08\u53ef\u6d4b\u51fd\u6570\u3001\u53ef\u6d4b\u96c6\u7b49\uff09\uff0c\u5f97\u51fa\u7684\u7ed3\u8bba\u5c31\u4f1a\u66f4\u4e00\u822c\uff0c\u4e5f\u4e0d\u80fd\u7528\u6570\u5206\u4e2d\u60ef\u7528\u7684\u601d\u7ef4\u6765\u601d\u8003\u5b9e\u53d8\u4e2d\u7684\u5f88\u591a\u95ee\u9898\u3002\u5f53\u7136\uff0c\u6570\u5206\u4e2d\u7684\u5f88\u591a\u65b9\u6cd5\u5728\u5b9e\u53d8\u5f53\u4e2d\u4e5f\u662f\u7ecf\u5e38\u4f7f\u7528\u7684\uff0c\u6bd5\u7adf\u540c\u4e3a\u5206\u6790\u7c7b\u8bfe\u7a0b\uff0c\u201c\u505a\u4f30\u8ba1\u201d\u8fd9\u6837\u7684\u4e8b\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002</p> <p>\u7edf\u8ba1\u5b66\u7684\u540c\u5b66\u662f\u5148\u5b66\u4e86\u6982\u7387\u8bba\u518d\u5b66\u8fd9\u95e8\u8bfe\u7684\uff0c\u53ef\u80fd\u5728\u6982\u7387\u8bba\u4e2d\u6709\u4e9b\u4e1c\u897f\u6ca1\u6709\u5f88\u6df1\u7684\u6d89\u53ca\uff0c\u53ef\u4ee5\u5728\u5b66\u4e60\u5b9e\u53d8\u7684\u65f6\u5019\u56de\u53bb\u770b\u4e00\u770b\uff0c\u4e5f\u53ef\u4ee5\u4ece\u6982\u7387\u8bba\u7684\u89d2\u5ea6\u5ba1\u89c6\u4e00\u4e0b\u5b9e\u53d8\u7684\u5185\u5bb9\u3002</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_6","title":"\u8bfe\u7a0b\u5185\u5bb9","text":"<p>\u6574\u4f53\u6765\u8bf4\uff0c\u5b9e\u53d8\u7684\u5185\u5bb9\u4e3b\u8981\u5206\u4e3a\u51e0\u4e2a\u90e8\u5206\uff1a</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#r","title":"\u211d\u4e2d\u7684\u62d3\u6251","text":"<p>\u8fd9\u91cc\u8003\u8bd5\u662f\u4e0d\u8003\u7684\uff0c\u4f46\u662f\u5b66\u597d\u7684\u8bdd\u5bf9\u540e\u9762\u7684\u5185\u5bb9\u6765\u8bf4\u5e2e\u52a9\u5f88\u5927\uff0c\u6bd5\u7adf\u662f\u6700\u57fa\u7840\u7684\u90e8\u5206\uff0c\u5c0f\u6d4b\u4e5f\u4f1a\u6d89\u53ca\u8fd9\u90e8\u5206\u5185\u5bb9\uff0c\u5b66\u8fc7\u70b9\u62d3\u7684\u540c\u5b66\u5bf9\u4ed8\u8d77\u6765\u4f1a\u5f88\u8f7b\u677e\u3002</p> <p>\u4e3b\u8981\u5185\u5bb9\u662f\u5f00\u96c6\u3001\u95ed\u96c6\u7684\u7b49\u5b9a\u4e49\u548c\u6027\u8d28\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u8fd8\u662f\u5f88\u591a\u7684\uff0c\u6700\u91cd\u8981\u7684\u6211\u8ba4\u4e3a\u662f\u5f00\u96c6\u7684\u7ed3\u6784\u5b9a\u7406\uff0c\u53ef\u4ee5\u628a\u5f00\u96c6\u5206\u89e3\u6210\u53ef\u6570\u4e2a\u5f00\u533a\u95f4\u6765\u7814\u7a76\u3002</p> <p>\u6b64\u5916\u8fd9\u91cc\u8fd8\u6784\u9020\u4e86\\(Cantor\\)\u96c6\u548c\\(Cantor\\)\u51fd\u6570\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e0b\u8fd9\u4e2a\u7ecf\u5178\u7684\u4f8b\u5b50\uff0c\u5728\u5b9e\u53d8\u51fd\u6570\u4e2d\u5f88\u591a\u53cd\u4f8b\u90fd\u8981\u7528\u8fd9\u4e2a\u6765\u6784\u9020\u3002</p> <p>\u8fde\u7eed\u51fd\u6570\u4e5f\u4f1a\u5728\u8fd9\u91cc\u8bb2\u5230\uff0c\u4f1a\u7528\u65b0\u7684\u65b9\u5f0f\u5b9a\u4e49\u8fde\u7eed\u51fd\u6570\u3002</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_7","title":"\u53ef\u6d4b\u96c6\u548c\u6d4b\u5ea6","text":"<p>\u4ece\u8fd9\u91cc\u5f00\u59cb\u5185\u5bb9\u5c31\u5f00\u59cb\u9010\u6e10\u53d8\u5f97\u62bd\u8c61\u4e86</p> <p>\u9996\u5148\u662f\u52d2\u8d1d\u683c\u5916\u6d4b\u5ea6\uff0c\u6700\u9700\u8981\u6ce8\u610f\u7684\u662f\u96c6\u5408\u7684\u6d4b\u5ea6\u4e3a\\(m\\)\u7684\u5145\u8981\u6761\u4ef6</p> <p>\u7136\u540e\u662f\u53ef\u6d4b\u96c6\u548c\u6d4b\u5ea6\u7684\u5b9a\u4e49\u548c\u6027\u8d28\uff0c\u9700\u8981\u6ce8\u610f\u53ef\u6d4b\u96c6\u548c\u5f00\u96c6\u3001\u95ed\u96c6\u7684\u5173\u7cfb\uff0c\u91cd\u70b9\u662f\u7528\u5f00\u96c6\u548c\u95ed\u96c6\u6765\u903c\u8fd1\u53ef\u6d4b\u96c6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\uff0c\u4e00\u4e2a\u53ef\u6d4b\u96c6\u201c\u5dee\u4e0d\u591a\u201d\u662f\u4e00\u4e2a\u5f00\u96c6\u6216\u8005\u95ed\u96c6\uff0c\u201c\u51e0\u4e4e\u5904\u5904\u201d\u662f\u4e00\u4e2a \\(G_\\delta\\) \u96c6\u6216 \\(F_\\sigma\\) \u96c6\u3002\u4f46\u8bf7\u6ce8\u610f\u8fd9\u91cc\u7684\u201c\u5dee\u4e0d\u591a\u201d\u7684\u610f\u601d\uff0c\u4e0d\u8981\u548c\u201c\u51e0\u4e4e\u5904\u5904\u201d\u7684\u610f\u601d\u641e\u6df7\uff0c\u540e\u9762\u7684 \\(Lusin\\) \u5b9a\u7406\u4e5f\u8868\u660e\uff0c\u4e00\u4e2a\u53ef\u6d4b\u51fd\u6570\u201c\u5dee\u4e0d\u591a\u201d\u662f\u4e00\u4e2a\u8fde\u7eed\u51fd\u6570\u3002</p> <p>\u6b64\u5916\u5c31\u662f\u8981\u6ce8\u610f\u5916\u6d4b\u5ea6\u7684\u6b21\u53ef\u52a0\u6027\uff0c\u6d4b\u5ea6\u7684\u53ef\u6570\u53ef\u52a0\u6027\u7b49\u6027\u8d28\u3002</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_8","title":"\u53ef\u6d4b\u51fd\u6570","text":"<p>\u8fd9\u4e00\u90e8\u5206\u8981\u6ce8\u610f\u7684\u5c31\u662f\u5404\u79cd\u6536\u655b\uff1a\u51e0\u4e4e\u5904\u5904\u6536\u655b\u3001\u8fd1\u4e00\u81f4\u6536\u655b\u3001\u4f9d\u6d4b\u5ea6\u6536\u655b\u8fd9\u4e09\u4e2a\u6982\u5ff5\uff0c\u4ee5\u53ca\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\\(Egorroff\\) \u5b9a\u7406\u3001\\(Riesz\\) \u5b9a\u7406\u3001\\(Lusin\\) \u5b9a\u7406\u7684\u7406\u89e3\u548c\u8bc1\u660e\u5341\u5206\u91cd\u8981\u3002</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_9","title":"\u52d2\u8d1d\u683c\u79ef\u5206\u53ca\u5176\u6781\u9650","text":"<p>\u8fd9\u91cc\u662f\u8fd9\u95e8\u8bfe\u7a0b\u6700\u91cd\u8981\u7684\u90e8\u5206\u6211\u628a\u540e\u9762\u7684\u201c\u5fae\u5206\u4e0e\u79ef\u5206\u201d\u548c \\(L^p\\) \u7a7a\u95f4\u4e5f\u653e\u5230\u4e86\u8fd9\u4e00\u90e8\u5206</p> <p>\u9996\u5148\u662f\u52d2\u8d1d\u683c\u79ef\u5206\u7684\u5b9a\u4e49\uff0c\u8fd9\u91cc\u7684\u5b9a\u4e49\u6211\u8ba4\u4e3a\u5f88\u6709\u5b9e\u53d8\u7684\u5473\u9053\uff0c\u5bf9\u4e8e\u4e00\u822c\u53ef\u6d4b\u51fd\u6570\u7684\u5b9a\u4e49\u6211\u4eec\u5206\u4e86\u5f88\u591a\u6b65\uff0c\u4ece\u975e\u8d1f\u7b80\u5355\u51fd\u6570\uff0c\u5230\u975e\u8d1f\u53ef\u6d4b\u51fd\u6570\uff0c\u518d\u5230\u4e00\u822c\u53ef\u6d4b\u51fd\u6570\uff0c\u91cd\u8981\u7684\u601d\u60f3\u662f\u7528\u7b80\u5355\u51fd\u6570\u6765\u903c\u8fd1\u53ef\u6d4b\u51fd\u6570\uff0c\u7531\u6d45\u5165\u6df1\u5730\u7814\u7a76\u3002</p> <p>\u5176\u5b9e\u7528\u7b80\u5355\u51fd\u6570\u6765\u9010\u6e10\u5b9a\u4e49\u53ef\u6d4b\u51fd\u6570\u7684\u79ef\u5206\u4e5f\u4e0d\u96be\u7406\u89e3\uff0c\u4ece\u6570\u5206\u4e2d\u9ece\u66fc\u79ef\u5206\u7684\u5b9a\u4e49\u6765\u7406\u89e3\uff0c\u9ece\u66fc\u79ef\u5206\u662f\u628a\u533a\u95f4\u5206\u5272\u6210\u5c0f\u533a\u95f4\u6c42\u77e9\u5f62\u9762\u79ef\u548c\uff0c\u662f\u7ad6\u7740\u5207\u5272\u7684\uff0c\u800c\u52d2\u8d1d\u683c\u79ef\u5206\u662f\u6a2a\u7740\u5207\u5272\u7684\uff0c\u5207\u5272\u7684\u662f\u51fd\u6570\u7684\u503c\u57df\uff0c\u518d\u6c42\u77e9\u5f62\u9762\u79ef\u548c\u3002</p> <p>\u8981\u8bf4\u5b9e\u53d8\u51fd\u6570\u6700\u91cd\u8981\u7684\uff0c\u4e00\u5b9a\u662f\u79ef\u5206\u6781\u9650\u5b9a\u7406\uff1a\\(Levi\\) \u5355\u8c03\u6536\u655b\u5b9a\u7406\u3001\\(Fatou\\) \u5f15\u7406\u3001\u63a7\u5236\u6536\u655b\u5b9a\u7406\u7684\u7406\u89e3\u3001\u5e94\u7528\u548c\u8bc1\u660e\u662f\u6700\u91cd\u8981\u7684\uff0c\u8981\u6ce8\u610f\u8fd9\u4e09\u4e2a\u5b9a\u7406\u7684\u6761\u4ef6\u6709\u4f55\u4e0d\u540c\uff0c\u662f\u5426\u8981\u6c42\u975e\u8d1f\uff0c\u975e\u8d1f\u662f\u975e\u5e38\u5173\u952e\u7684\u4e00\u4e2a\u6761\u4ef6\uff0c\u4f46\u6709\u65f6\u4e0d\u4f1a\u76f4\u63a5\u7ed9\u51fa\uff0c\u800c\u662f\u7ed9\u51fa\u4e00\u4e2a\u51fd\u6570\u88ab\u53e6\u4e00\u4e2a\u51fd\u6570\u7684\u7edd\u5bf9\u503c\u63a7\u5236\uff0c\u90a3\u4e48\u5c31\u50cf\u63a7\u5236\u6536\u655b\u5b9a\u7406\u7684\u8bc1\u660e\u4e2d\u7684\u90a3\u6837\u6211\u4eec\u53ef\u4ee5\u5c06\u4e24\u4e2a\u51fd\u6570\u4f5c\u548c\u3001\u4f5c\u5dee\u6765\u5f97\u5230\u975e\u8d1f\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4f7f\u7528\u524d\u4e24\u4e2a\u5b9a\u7406\u6765\u89e3\u51b3\u95ee\u9898\u4e86\u3002</p> <p>\u5728\u201c\u5fae\u5206\u4e0e\u79ef\u5206\u201d\u8fd9\u4e00\u7ae0\u4e2d\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd\u4e86\u4e09\u79cd\u51fd\u6570\u548c\u4e0d\u5b9a\u79ef\u5206\uff1a\u5355\u8c03\u51fd\u6570\u3001\u6709\u754c\u53d8\u5dee\u51fd\u6570\u548c\u7edd\u5bf9\u8fde\u7eed\u51fd\u6570\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\u8fd9\u51e0\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\u548c\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u6bd4\u5982\u8bf4 \\(Jordan\\) \u5206\u89e3\u3002</p> <p>\u81f3\u4e8e \\(L^p\\) \u7a7a\u95f4\uff0c\u53ef\u4ee5\u6ce8\u610f\u4e00\u4e0b\u90a3\u51e0\u4e2a\u4e0d\u7b49\u5f0f\u7684\u5e94\u7528\uff0c\u6b64\u5916\u5173\u6ce8\u4e00\u4e0b\u5377\u79ef\u76f8\u5173\u7684\u6027\u8d28\uff0825\u5e74\u8003\u4e86www\uff09\u3002</p>"},{"location":"md/note/math/%E5%AE%9E%E5%8F%98%E5%87%BD%E6%95%B0/#_10","title":"\u8003\u8bd5\u76f8\u5173","text":"<p>\u5b9e\u53d8\u7684\u8003\u8bd5\u4e3b\u8981\u4ee5\u8bfe\u672c\u4e60\u9898\u548c\u5b9a\u4e49\u5b9a\u7406\u53d9\u8ff0\u8bc1\u660e\u4e3a\u4e3b\uff0c\u60f3\u4e0d\u6302\u79d1\u5176\u5b9e\u8fd8\u662f\u4e0d\u7b97\u96be\u7684\uff0c\u4e3b\u8981\u662f\u8981\u628a\u8bfe\u672c\u7684\u5185\u5bb9\u719f\u6089\u900f\uff0c\u5c31\u80fd\u505a\u5bf9\u8003\u8bd5\u9898\u768480%\u751a\u81f3\u66f4\u591a\u3002</p>"},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/","title":"\u5e38\u5fae\u5206\u65b9\u7a0b","text":""},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/#_2","title":"\u8bfe\u7a0b\u5bf9\u8c61","text":"<p>\u5927\u4e8c\u79cb\u51ac\u6570\u5b66\u4e0e\u5e94\u7528\u6570\u5b66/\u4fe1\u606f\u4e0e\u8ba1\u7b97\u79d1\u5b66\u5fc5\u4fee\u3001\u7edf\u8ba1\u5b66\u9009\u4fee</p> <p>\u8bf7\u6ce8\u610f\u8fd9\u91cc\u662f3.5\u5206\u7684\u666e\u901a\u6570\u5b66\u9662\u4e13\u4e1a\u8bfe\uff0c\u4e0d\u662f\u5e38\u5fae\u5206\u65b9\u7a0b\uff08\u7532\uff09\uff0c\u4e5f\u4e0d\u662f1\u5b66\u5206\u62161.5\u5b66\u5206\u7684\u3002</p>"},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/#_3","title":"\u4efb\u8bfe\u8001\u5e08","text":"<p>\u6211\u4e0a\u7684\u662f\u6625\u590f\u5b66\u671f\u7684ODE\uff0c\u53ea\u6709\u9648\u7426\u8001\u5e08\u4e00\u4e2a\u73ed\uff0c\u662f\u65b0\u8001\u5e08\uff0c\u5c0f\u6d4b\u4e24\u6b21\uff0c\u96be\u5ea6\u4e0d\u7b97\u5927\u4f46\u662f\u7531\u4e8e\u662f\u65b0\u8001\u5e08\u53ef\u80fd\u9898\u91cf\u63a7\u5236\u5f97\u4e0d\u662f\u5f88\u5408\u9002\uff1b\u8003\u8bd5\u548c\u4f5c\u4e1a\u9898\u91cf\u6bd4\u8f83\u591a\uff0c\u8001\u5e08\u4f1a\u8bb2\u5927\u90e8\u5206\u7684\u5185\u5bb9\uff0c\u5305\u62ec \\(Laplace\\) \u53d8\u6362\uff0c\u5c0f\u6d4b\u4e5f\u4f1a\u8003\uff0c\u4f46\u662f\u671f\u672b\u8003\u70b9\u7f29\u6c34\u4e86\u5f88\u591a\u3002</p>"},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/#_4","title":"\u524d\u7f6e\u8bfe\u7a0b","text":"<p>\u6570\u5b66\u5206\u6790\u4e00\u4e8c\u3001\u9ad8\u7b49\u4ee3\u6570\u4e0e\u89e3\u6790\u51e0\u4f55\u4e00\u4e8c\uff08\u6216\u66f4\u9ad8\u7ea7\u7684\u8bfe\u7a0b\uff09</p>"},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/#_5","title":"\u8bfe\u7a0b\u7279\u70b9","text":"<p>ODE\u662f\u4e00\u95e8\u6280\u5de7\u6027\u6bd4\u8f83\u5f3a\u3001\u8ba1\u7b97\u91cf\u6bd4\u8f83\u5927\u7684\u8bfe\u7a0b\uff0c\u6211\u8ba4\u4e3a\u96be\u5ea6\u7b97\u6570\u5b66\u9662\u4e13\u4e1a\u8bfe\u91cc\u6700\u7b80\u5355\u7684\u4e4b\u4e00\u3002 \u9700\u8981\u8f83\u591a\u7684\u5206\u6790\u548c\u4ee3\u6570\u7684\u524d\u7f6e\u77e5\u8bc6\uff0c\u60f3\u8981\u5b66\u597d\u7684\u8bdd\u6570\u5206\u9ad8\u4ee3\u80af\u5b9a\u8981\u5b66\u597d\u3002</p>"},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/#_6","title":"\u8bfe\u7a0b\u5185\u5bb9","text":"<p>\u8fd9\u95e8\u8bfe\u5185\u5bb9\u5f88\u591a\uff0c\u8001\u5e08\u8bb2\u7684\u4e3b\u8981\u5206\u4e3a\u4e86\u4e09\u5757\u5185\u5bb9\uff1a - \u89e3ODE - \u5206\u6790ODE - \u7b80\u5355\u7684PDE</p> <p>3.5\u5b66\u5206\u4e00\u4e0b\u7684\u8bfe\u7a0b\u7684\u5185\u5bb9\u4e3b\u8981\u662f\u7b2c\u4e00\u90e8\u5206\uff0c\u800c\u8fd9\u95e8\u8bfe\u7684\u96be\u5ea6\u4e5f\u96c6\u4e2d\u5728\u7b2c\u4e8c\u90e8\u5206\uff0c\u7b2c\u4e09\u90e8\u5206\u671f\u672b\u548c\u5c0f\u6d4b\u90fd\u4e0d\u4f1a\u6d89\u53ca\u3002</p>"},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/#ode","title":"\u89e3ODE\uff1a\u8ba1\u7b97","text":"<p>\u8fd9\u91cc\u4e3b\u8981\u6d89\u53ca\u4e00\u9636\u65b9\u7a0b\u548c\u9ad8\u9636\u65b9\u7a0b\u7ec4\uff0c\u53c8\u7ec6\u5206\u6210\u4e86\u4e00\u9636\u7ebf\u6027\u65b9\u7a0b\u7ec4\u3001\u4e00\u9636\u975e\u7ebf\u6027\u65b9\u7a0b\u7ec4\u7b49\u3002</p> <p>\u91cd\u70b9\u662f\u5feb\u901f\u5224\u65ad\u65b9\u7a0b\u7c7b\u578b\u5e76\u4e14\u7262\u8bb0\u65b9\u6cd5\uff0c\u5728\u8003\u8bd5\u65f6\u5c3d\u91cf\u522b\u4e22\u8fd9\u4e00\u90e8\u5206\u7684\u5206\u3002</p> <p>\\(Laplace\\) \u53d8\u6362\u6cd5\u53ef\u80fd\u4e0d\u662f\u6240\u6709\u8001\u5e08\u90fd\u4f1a\u5c06\u8bb2\uff0c\u4f46\u6211\u8ba4\u4e3a\u5982\u679c\u638c\u63e1\u7684\u8bdd\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u53ef\u4ee5\u505a\u6551\u6025\u7528\u3002</p>"},{"location":"md/note/math/%E5%B8%B8%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/#ode_1","title":"\u5206\u6790ODE","text":"<p>\u8fd9\u91cc\u662f\u672c\u8bfe\u7a0b\u6bd4\u8f83\u62bd\u8c61\u7684\u90e8\u5206\uff0c\u4e3b\u8981\u5305\u62ec\u4e86\u89e3\u7684\u5b58\u5728\u552f\u4e00\u6027\u3001\u5ef6\u62d3\u6027\u3001\u8fde\u7eed\u4f9d\u8d56\u6027\u548c\u674e\u96c5\u666e\u8bfa\u592b\u7a33\u5b9a\u6027\uff0c\u8003\u8bd5\u7684\u4e3b\u8981\u96be\u5ea6\u96c6\u4e2d\u5728\u8fd9\u4e9b\u77e5\u8bc6\u70b9\uff0c\u9700\u8981\u591a\u770b\u8bc1\u660e\u3002  </p>"},{"location":"md/note/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/","title":"\u6570\u7406\u7edf\u8ba1","text":""},{"location":"md/note/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/#_2","title":"\u8bfe\u7a0b\u5bf9\u8c61","text":"<p>\u5927\u4e8c\u6625\u590f\u7edf\u8ba1\u5b66\u5fc5\u4fee\u3001\u5927\u4e09\u6625\u590f\u6570\u5b66\u4e0e\u5e94\u7528\u6570\u5b66/\u4fe1\u606f\u4e0e\u8ba1\u7b97\u79d1\u5b66\u9009\u4fee</p>"},{"location":"md/note/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/#_3","title":"\u4efb\u8bfe\u8001\u5e08","text":"<p>\u9ec4\u709c\uff1a\u5f20\u7acb\u65b0\u8001\u5e08\u4e0d\u4e0a\u6570\u7406\u7edf\u8ba1\u4ee5\u540e\u6570\u7406\u7edf\u8ba1\u5c31\u53ea\u6709\u4e00\u4e2a\u73ed\u4e86\uff0c\u8001\u5e08\u7684\u5c0f\u6d4b\u96be\u5ea6\u6bd4\u8f83\u5927\uff08\u4e3b\u8981\u662f\u65f6\u95f4\u6bd4\u8f83\u7d27\u800c\u4e14\u4e0d\u63d0\u524d\u901a\u77e5\uff09\uff0c\u867d\u7136\u539f\u5219\u4e0a\u4e0d\u63d0\u524d\u901a\u77e5\u4f46\u662f\u8fd9\u5b66\u671f\u5979\u63d0\u524d\u901a\u77e5\u4e86\u5f88\u591a\u6b21</p> <p>\u4e0a\u8001\u5e08\u7684\u8bfe\u8fd8\u662f\u80fd\u5b66\u5230\u4e00\u4e9b\u4e1c\u897f\u7684\uff0c\u4f46\u9650\u4e8e\u8bfe\u65f6\u7bc7\u5e45\u53ef\u80fd\u6709\u4e00\u4e9b\u4e1c\u897f\u4e0d\u4f1a\u6d89\u53ca\u5f97\u7279\u522b\u591a</p>"},{"location":"md/note/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/#_4","title":"\u524d\u7f6e\u8bfe\u7a0b","text":"<ul> <li>\u6570\u5b66\u5206\u6790\u4e00\u4e8c\u4e09</li> <li>\u9ad8\u7b49\u4ee3\u6570\u4e0e\u89e3\u6790\u51e0\u4f55\u4e00\u4e8c\uff0c\u8fd9\u4e2a\u770b\u4f3c\u597d\u50cf\u6ca1\u4ec0\u4e48\u5173\u7cfb\uff0c\u4f46\u7b2c\u4e8c\u8282\u8bfe\u5c31\u4f1a\u8bb2\u5230\u76f8\u5173\u7684\u8bc1\u660e\uff08\u5e94\u8be5\u662f\u8fd9\u95e8\u8bfe\u6700\u96be\u7684\u90e8\u5206\u4e86\uff09</li> <li>\u6982\u7387\u8bba\uff0c\u8fd9\u4e2a\u5b66\u5f97\u5f88\u597d\u7684\u8bdd\u6570\u7406\u7edf\u8ba1\u4e5f\u4e0d\u4f1a\u592a\u5dee\uff0c\u5c24\u5176\u662f\u5927\u6570\u5b9a\u5f8b\u90a3\u4e00\u90e8\u5206</li> </ul>"},{"location":"md/note/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/#_5","title":"\u8bfe\u7a0b\u7279\u70b9","text":""},{"location":"md/note/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/#_6","title":"\u8bfe\u7a0b\u5185\u5bb9","text":""},{"location":"md/note/math/%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/#_7","title":"\u8003\u8bd5\u76f8\u5173","text":""}]}